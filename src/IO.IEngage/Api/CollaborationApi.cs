/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollaborationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Comment on posted blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment AddCommentBlog (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on posted blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> AddCommentBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Comment on discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment AddCommentDiscussion (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> AddCommentDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Delete blog
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog. Returns the deleted blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog DeleteBlog (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete blog
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog. Returns the deleted blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> DeleteBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment DeleteBlogComment (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> DeleteBlogCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion. Returns the deleted discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion DeleteDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion. Returns the deleted discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> DeleteDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment DeleteDiscussionComment (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> DeleteDiscussionCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of comments on blog
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        VerveResponseCommentList GetBlogComments (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on blog
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        ApiResponse<VerveResponseCommentList> GetBlogCommentsWithHttpInfo (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of blogs
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlogList</returns>
        VerveResponseBlogList GetBlogs (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of blogs
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlogList</returns>
        ApiResponse<VerveResponseBlogList> GetBlogsWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of comments on discussion
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        VerveResponseCommentList GetDiscussionComments (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on discussion
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        ApiResponse<VerveResponseCommentList> GetDiscussionCommentsWithHttpInfo (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of discussions
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussionList</returns>
        VerveResponseDiscussionList GetDiscussions (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of discussions
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussionList</returns>
        ApiResponse<VerveResponseDiscussionList> GetDiscussionsWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of blogs subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs subscribed by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog GetUserSubscribedBlogs (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of blogs subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs subscribed by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> GetUserSubscribedBlogsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of discussions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions subscribed by user 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussionList</returns>
        VerveResponseDiscussionList GetUserSubscribedDiscussions (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of discussions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions subscribed by user 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussionList</returns>
        ApiResponse<VerveResponseDiscussionList> GetUserSubscribedDiscussionsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Post blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog PostBlog (string requesterId, string clientToken, Blog body = null, string accessToken = null);

        /// <summary>
        /// Post blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> PostBlogWithHttpInfo (string requesterId, string clientToken, Blog body = null, string accessToken = null);
        /// <summary>
        /// Start discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion StartDiscussion (string requesterId, string clientToken, Discussion body = null, string accessToken = null);

        /// <summary>
        /// Start discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> StartDiscussionWithHttpInfo (string requesterId, string clientToken, Discussion body = null, string accessToken = null);
        /// <summary>
        /// Subscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to blog. Returns the subscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog SubscribeBlog (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Subscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to blog. Returns the subscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> SubscribeBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Subscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion SubscribeDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Subscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> SubscribeDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Unsubscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog UnsubscribeBlog (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Unsubscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> UnsubscribeBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Unsubscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion UnsubscribeDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Unsubscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> UnsubscribeDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update blog
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog. Returns the updated blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        VerveResponseBlog UpdateBlog (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update blog
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog. Returns the updated blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        ApiResponse<VerveResponseBlog> UpdateBlogWithHttpInfo (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog comment. Returns the updated blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment UpdateBlogComment (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog comment. Returns the updated blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> UpdateBlogCommentWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion. Returns the updated discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion UpdateDiscussion (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion. Returns the updated discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> UpdateDiscussionWithHttpInfo (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion comment. Returns the updated discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        VerveResponseDiscussion UpdateDiscussionComment (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion comment. Returns the updated discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        ApiResponse<VerveResponseDiscussion> UpdateDiscussionCommentWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Comment on posted blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> AddCommentBlogAsync (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on posted blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddCommentBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Comment on discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> AddCommentDiscussionAsync (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddCommentDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Delete blog
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog. Returns the deleted blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> DeleteBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete blog
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog. Returns the deleted blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> DeleteBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> DeleteBlogCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteBlogCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion. Returns the deleted discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> DeleteDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion. Returns the deleted discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> DeleteDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> DeleteDiscussionCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteDiscussionCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of comments on blog
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        System.Threading.Tasks.Task<VerveResponseCommentList> GetBlogCommentsAsync (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on blog
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetBlogCommentsAsyncWithHttpInfo (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of blogs
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlogList</returns>
        System.Threading.Tasks.Task<VerveResponseBlogList> GetBlogsAsync (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of blogs
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlogList>> GetBlogsAsyncWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of comments on discussion
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        System.Threading.Tasks.Task<VerveResponseCommentList> GetDiscussionCommentsAsync (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on discussion
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetDiscussionCommentsAsyncWithHttpInfo (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of discussions
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussionList</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussionList> GetDiscussionsAsync (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of discussions
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussionList>> GetDiscussionsAsyncWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of blogs subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs subscribed by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> GetUserSubscribedBlogsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of blogs subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of blogs subscribed by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> GetUserSubscribedBlogsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of discussions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions subscribed by user 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussionList</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussionList> GetUserSubscribedDiscussionsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of discussions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of discussions subscribed by user 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussionList>> GetUserSubscribedDiscussionsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Post blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> PostBlogAsync (string requesterId, string clientToken, Blog body = null, string accessToken = null);

        /// <summary>
        /// Post blog
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> PostBlogAsyncWithHttpInfo (string requesterId, string clientToken, Blog body = null, string accessToken = null);
        /// <summary>
        /// Start discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> StartDiscussionAsync (string requesterId, string clientToken, Discussion body = null, string accessToken = null);

        /// <summary>
        /// Start discussion
        /// </summary>
        /// <remarks>
        /// This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> StartDiscussionAsyncWithHttpInfo (string requesterId, string clientToken, Discussion body = null, string accessToken = null);
        /// <summary>
        /// Subscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to blog. Returns the subscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> SubscribeBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Subscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to blog. Returns the subscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> SubscribeBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Subscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> SubscribeDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Subscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> SubscribeDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Unsubscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> UnsubscribeBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Unsubscribe blog
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> UnsubscribeBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Unsubscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> UnsubscribeDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Unsubscribe discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UnsubscribeDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update blog
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog. Returns the updated blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        System.Threading.Tasks.Task<VerveResponseBlog> UpdateBlogAsync (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update blog
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog. Returns the updated blog
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> UpdateBlogAsyncWithHttpInfo (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog comment. Returns the updated blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> UpdateBlogCommentAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update blog comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update blog comment. Returns the updated blog comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> UpdateBlogCommentAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion. Returns the updated discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> UpdateDiscussionAsync (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update discussion
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion. Returns the updated discussion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UpdateDiscussionAsyncWithHttpInfo (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion comment. Returns the updated discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        System.Threading.Tasks.Task<VerveResponseDiscussion> UpdateDiscussionCommentAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update discussion comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update discussion comment. Returns the updated discussion comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UpdateDiscussionCommentAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollaborationApi : ICollaborationApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaborationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollaborationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaborationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollaborationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Comment on posted blog This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment AddCommentBlog (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = AddCommentBlogWithHttpInfo(blogId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Comment on posted blog This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > AddCommentBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->AddCommentBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->AddCommentBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->AddCommentBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on posted blog This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> AddCommentBlogAsync (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await AddCommentBlogAsyncWithHttpInfo(blogId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Comment on posted blog This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddCommentBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->AddCommentBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->AddCommentBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->AddCommentBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on discussion This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment AddCommentDiscussion (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = AddCommentDiscussionWithHttpInfo(discussionId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Comment on discussion This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > AddCommentDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->AddCommentDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->AddCommentDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->AddCommentDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on discussion This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> AddCommentDiscussionAsync (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await AddCommentDiscussionAsyncWithHttpInfo(discussionId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Comment on discussion This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddCommentDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->AddCommentDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->AddCommentDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->AddCommentDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete blog Allows the user to delete blog. Returns the deleted blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog DeleteBlog (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = DeleteBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete blog Allows the user to delete blog. Returns the deleted blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > DeleteBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->DeleteBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteBlog");

            var localVarPath = "/collaborations/blogs/{blogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Delete blog Allows the user to delete blog. Returns the deleted blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> DeleteBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await DeleteBlogAsyncWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete blog Allows the user to delete blog. Returns the deleted blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blog Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> DeleteBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->DeleteBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteBlog");

            var localVarPath = "/collaborations/blogs/{blogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Delete blog comment Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment DeleteBlogComment (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = DeleteBlogCommentWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete blog comment Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > DeleteBlogCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->DeleteBlogComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteBlogComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteBlogComment");

            var localVarPath = "/collaborations/blogs/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlogComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete blog comment Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> DeleteBlogCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await DeleteBlogCommentAsyncWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete blog comment Allows the user to delete blog comment.  Returns the deleted blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteBlogCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->DeleteBlogComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteBlogComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteBlogComment");

            var localVarPath = "/collaborations/blogs/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlogComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete discussion Allows the user to delete discussion. Returns the deleted discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion DeleteDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = DeleteDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete discussion Allows the user to delete discussion. Returns the deleted discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > DeleteDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->DeleteDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Delete discussion Allows the user to delete discussion. Returns the deleted discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> DeleteDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await DeleteDiscussionAsyncWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete discussion Allows the user to delete discussion. Returns the deleted discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussion Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> DeleteDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->DeleteDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Delete discussion comment Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment DeleteDiscussionComment (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = DeleteDiscussionCommentWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete discussion comment Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > DeleteDiscussionCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->DeleteDiscussionComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteDiscussionComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteDiscussionComment");

            var localVarPath = "/collaborations/discussions/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscussionComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete discussion comment Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> DeleteDiscussionCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await DeleteDiscussionCommentAsyncWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete discussion comment Allows the user to delete discussion comment. Returns the deleted discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteDiscussionCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->DeleteDiscussionComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->DeleteDiscussionComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->DeleteDiscussionComment");

            var localVarPath = "/collaborations/discussions/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscussionComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Get list of comments on blog Returns the list of comments on blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        public VerveResponseCommentList GetBlogComments (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = GetBlogCommentsWithHttpInfo(blogId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of comments on blog Returns the list of comments on blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        public ApiResponse< VerveResponseCommentList > GetBlogCommentsWithHttpInfo (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetBlogComments");

            var localVarPath = "/collaborations/blogs/{blogId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of comments on blog Returns the list of comments on blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseCommentList> GetBlogCommentsAsync (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = await GetBlogCommentsAsyncWithHttpInfo(blogId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of comments on blog Returns the list of comments on blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetBlogCommentsAsyncWithHttpInfo (long? blogId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetBlogComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetBlogComments");

            var localVarPath = "/collaborations/blogs/{blogId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of blogs Returns the list of blogs
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlogList</returns>
        public VerveResponseBlogList GetBlogs (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlogList> localVarResponse = GetBlogsWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of blogs Returns the list of blogs
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlogList</returns>
        public ApiResponse< VerveResponseBlogList > GetBlogsWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetBlogs");

            var localVarPath = "/collaborations/blogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlogList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlogList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlogList)));
            
        }

        /// <summary>
        /// Get list of blogs Returns the list of blogs
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlogList</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlogList> GetBlogsAsync (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlogList> localVarResponse = await GetBlogsAsyncWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of blogs Returns the list of blogs
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlogList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlogList>> GetBlogsAsyncWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetBlogs");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetBlogs");

            var localVarPath = "/collaborations/blogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlogList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlogList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlogList)));
            
        }

        /// <summary>
        /// Get list of comments on discussion Returns the list of comments on discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        public VerveResponseCommentList GetDiscussionComments (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = GetDiscussionCommentsWithHttpInfo(discussionId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of comments on discussion Returns the list of comments on discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        public ApiResponse< VerveResponseCommentList > GetDiscussionCommentsWithHttpInfo (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetDiscussionComments");

            var localVarPath = "/collaborations/discussions/{discussionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscussionComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of comments on discussion Returns the list of comments on discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseCommentList> GetDiscussionCommentsAsync (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = await GetDiscussionCommentsAsyncWithHttpInfo(discussionId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of comments on discussion Returns the list of comments on discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetDiscussionCommentsAsyncWithHttpInfo (long? discussionId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetDiscussionComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetDiscussionComments");

            var localVarPath = "/collaborations/discussions/{discussionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscussionComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of discussions Returns the list of discussions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussionList</returns>
        public VerveResponseDiscussionList GetDiscussions (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussionList> localVarResponse = GetDiscussionsWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of discussions Returns the list of discussions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussionList</returns>
        public ApiResponse< VerveResponseDiscussionList > GetDiscussionsWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetDiscussions");

            var localVarPath = "/collaborations/discussions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscussions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussionList)));
            
        }

        /// <summary>
        /// Get list of discussions Returns the list of discussions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussionList> GetDiscussionsAsync (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussionList> localVarResponse = await GetDiscussionsAsyncWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of discussions Returns the list of discussions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="association">association</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussionList>> GetDiscussionsAsyncWithHttpInfo (long? association, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetDiscussions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetDiscussions");

            var localVarPath = "/collaborations/discussions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscussions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussionList)));
            
        }

        /// <summary>
        /// Get list of blogs subscribed by user Returns the list of blogs subscribed by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog GetUserSubscribedBlogs (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = GetUserSubscribedBlogsWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of blogs subscribed by user Returns the list of blogs subscribed by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > GetUserSubscribedBlogsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetUserSubscribedBlogs");

            var localVarPath = "/collaborations/blogs/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedBlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Get list of blogs subscribed by user Returns the list of blogs subscribed by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> GetUserSubscribedBlogsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await GetUserSubscribedBlogsAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of blogs subscribed by user Returns the list of blogs subscribed by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get. </param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> GetUserSubscribedBlogsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetUserSubscribedBlogs");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetUserSubscribedBlogs");

            var localVarPath = "/collaborations/blogs/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedBlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Get list of discussions subscribed by user Returns the list of discussions subscribed by user 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussionList</returns>
        public VerveResponseDiscussionList GetUserSubscribedDiscussions (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussionList> localVarResponse = GetUserSubscribedDiscussionsWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of discussions subscribed by user Returns the list of discussions subscribed by user 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussionList</returns>
        public ApiResponse< VerveResponseDiscussionList > GetUserSubscribedDiscussionsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetUserSubscribedDiscussions");

            var localVarPath = "/collaborations/discussions/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedDiscussions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussionList)));
            
        }

        /// <summary>
        /// Get list of discussions subscribed by user Returns the list of discussions subscribed by user 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussionList> GetUserSubscribedDiscussionsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussionList> localVarResponse = await GetUserSubscribedDiscussionsAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of discussions subscribed by user Returns the list of discussions subscribed by user 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose subcribtions want tp get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussionList>> GetUserSubscribedDiscussionsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->GetUserSubscribedDiscussions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->GetUserSubscribedDiscussions");

            var localVarPath = "/collaborations/discussions/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedDiscussions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussionList)));
            
        }

        /// <summary>
        /// Post blog This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog PostBlog (string requesterId, string clientToken, Blog body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = PostBlogWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post blog This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > PostBlogWithHttpInfo (string requesterId, string clientToken, Blog body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->PostBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->PostBlog");

            var localVarPath = "/collaborations/blogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Post blog This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> PostBlogAsync (string requesterId, string clientToken, Blog body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await PostBlogAsyncWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post blog This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> PostBlogAsyncWithHttpInfo (string requesterId, string clientToken, Blog body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->PostBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->PostBlog");

            var localVarPath = "/collaborations/blogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Start discussion This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion StartDiscussion (string requesterId, string clientToken, Discussion body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = StartDiscussionWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start discussion This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > StartDiscussionWithHttpInfo (string requesterId, string clientToken, Discussion body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->StartDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->StartDiscussion");

            var localVarPath = "/collaborations/discussions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Start discussion This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> StartDiscussionAsync (string requesterId, string clientToken, Discussion body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await StartDiscussionAsyncWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start discussion This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> StartDiscussionAsyncWithHttpInfo (string requesterId, string clientToken, Discussion body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->StartDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->StartDiscussion");

            var localVarPath = "/collaborations/discussions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Subscribe blog Allows the user to subscribe to blog. Returns the subscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog SubscribeBlog (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = SubscribeBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe blog Allows the user to subscribe to blog. Returns the subscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > SubscribeBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->SubscribeBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->SubscribeBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->SubscribeBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Subscribe blog Allows the user to subscribe to blog. Returns the subscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> SubscribeBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await SubscribeBlogAsyncWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe blog Allows the user to subscribe to blog. Returns the subscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> SubscribeBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->SubscribeBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->SubscribeBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->SubscribeBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Subscribe discussion Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion SubscribeDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = SubscribeDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe discussion Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > SubscribeDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->SubscribeDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->SubscribeDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->SubscribeDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Subscribe discussion Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> SubscribeDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await SubscribeDiscussionAsyncWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe discussion Allows the user to subscribe to a discussion. Returns the subscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> SubscribeDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->SubscribeDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->SubscribeDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->SubscribeDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Unsubscribe blog Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog UnsubscribeBlog (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = UnsubscribeBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe blog Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > UnsubscribeBlogWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->UnsubscribeBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UnsubscribeBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UnsubscribeBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Unsubscribe blog Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> UnsubscribeBlogAsync (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await UnsubscribeBlogAsyncWithHttpInfo(blogId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe blog Allows the user to unsubscribe blog. Returns the unsubscribed blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> UnsubscribeBlogAsyncWithHttpInfo (long? blogId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->UnsubscribeBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UnsubscribeBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UnsubscribeBlog");

            var localVarPath = "/collaborations/blogs/{blogId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Unsubscribe discussion Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion UnsubscribeDiscussion (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = UnsubscribeDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe discussion Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > UnsubscribeDiscussionWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->UnsubscribeDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UnsubscribeDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UnsubscribeDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Unsubscribe discussion Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> UnsubscribeDiscussionAsync (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await UnsubscribeDiscussionAsyncWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe discussion Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UnsubscribeDiscussionAsyncWithHttpInfo (long? discussionId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->UnsubscribeDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UnsubscribeDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UnsubscribeDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Update blog Allows the user to update blog. Returns the updated blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseBlog</returns>
        public VerveResponseBlog UpdateBlog (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = UpdateBlogWithHttpInfo(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update blog Allows the user to update blog. Returns the updated blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseBlog</returns>
        public ApiResponse< VerveResponseBlog > UpdateBlogWithHttpInfo (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'blogTitle' is set
            if (blogTitle == null)
                throw new ApiException(400, "Missing required parameter 'blogTitle' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'blogDescription' is set
            if (blogDescription == null)
                throw new ApiException(400, "Missing required parameter 'blogDescription' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateBlog");

            var localVarPath = "/collaborations/blogs/{blogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (blogTitle != null) localVarFormParams.Add("blogTitle", Configuration.ApiClient.ParameterToString(blogTitle)); // form parameter
            if (blogDescription != null) localVarFormParams.Add("blogDescription", Configuration.ApiClient.ParameterToString(blogDescription)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Update blog Allows the user to update blog. Returns the updated blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseBlog</returns>
        public async System.Threading.Tasks.Task<VerveResponseBlog> UpdateBlogAsync (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseBlog> localVarResponse = await UpdateBlogAsyncWithHttpInfo(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update blog Allows the user to update blog. Returns the updated blog
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId">blogId</param>
        /// <param name="blogTitle">blog title</param>
        /// <param name="blogDescription">blog description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseBlog>> UpdateBlogAsyncWithHttpInfo (long? blogId, string blogTitle, string blogDescription, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'blogTitle' is set
            if (blogTitle == null)
                throw new ApiException(400, "Missing required parameter 'blogTitle' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'blogDescription' is set
            if (blogDescription == null)
                throw new ApiException(400, "Missing required parameter 'blogDescription' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateBlog");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateBlog");

            var localVarPath = "/collaborations/blogs/{blogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (blogId != null) localVarPathParams.Add("blogId", Configuration.ApiClient.ParameterToString(blogId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (blogTitle != null) localVarFormParams.Add("blogTitle", Configuration.ApiClient.ParameterToString(blogTitle)); // form parameter
            if (blogDescription != null) localVarFormParams.Add("blogDescription", Configuration.ApiClient.ParameterToString(blogDescription)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseBlog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseBlog)));
            
        }

        /// <summary>
        /// Update blog comment Allows the user to update blog comment. Returns the updated blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment UpdateBlogComment (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = UpdateBlogCommentWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update blog comment Allows the user to update blog comment. Returns the updated blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > UpdateBlogCommentWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateBlogComment");

            var localVarPath = "/collaborations/blogs/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Update blog comment Allows the user to update blog comment. Returns the updated blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> UpdateBlogCommentAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await UpdateBlogCommentAsyncWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update blog comment Allows the user to update blog comment. Returns the updated blog comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> UpdateBlogCommentAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateBlogComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateBlogComment");

            var localVarPath = "/collaborations/blogs/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Update discussion Allows the user to update discussion. Returns the updated discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion UpdateDiscussion (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = UpdateDiscussionWithHttpInfo(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update discussion Allows the user to update discussion. Returns the updated discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > UpdateDiscussionWithHttpInfo (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'discussionDescription' is set
            if (discussionDescription == null)
                throw new ApiException(400, "Missing required parameter 'discussionDescription' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (subject != null) localVarFormParams.Add("subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (discussionDescription != null) localVarFormParams.Add("discussionDescription", Configuration.ApiClient.ParameterToString(discussionDescription)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Update discussion Allows the user to update discussion. Returns the updated discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> UpdateDiscussionAsync (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await UpdateDiscussionAsyncWithHttpInfo(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update discussion Allows the user to update discussion. Returns the updated discussion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discussionId">discussionId</param>
        /// <param name="subject">subject</param>
        /// <param name="discussionDescription">discussion Description</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UpdateDiscussionAsyncWithHttpInfo (long? discussionId, string subject, string discussionDescription, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'discussionId' is set
            if (discussionId == null)
                throw new ApiException(400, "Missing required parameter 'discussionId' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'discussionDescription' is set
            if (discussionDescription == null)
                throw new ApiException(400, "Missing required parameter 'discussionDescription' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateDiscussion");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateDiscussion");

            var localVarPath = "/collaborations/discussions/{discussionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (discussionId != null) localVarPathParams.Add("discussionId", Configuration.ApiClient.ParameterToString(discussionId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (subject != null) localVarFormParams.Add("subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (discussionDescription != null) localVarFormParams.Add("discussionDescription", Configuration.ApiClient.ParameterToString(discussionDescription)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscussion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Update discussion comment Allows the user to update discussion comment. Returns the updated discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseDiscussion</returns>
        public VerveResponseDiscussion UpdateDiscussionComment (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = UpdateDiscussionCommentWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update discussion comment Allows the user to update discussion comment. Returns the updated discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseDiscussion</returns>
        public ApiResponse< VerveResponseDiscussion > UpdateDiscussionCommentWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateDiscussionComment");

            var localVarPath = "/collaborations/discussions/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscussionComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

        /// <summary>
        /// Update discussion comment Allows the user to update discussion comment. Returns the updated discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseDiscussion</returns>
        public async System.Threading.Tasks.Task<VerveResponseDiscussion> UpdateDiscussionCommentAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseDiscussion> localVarResponse = await UpdateDiscussionCommentAsyncWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update discussion comment Allows the user to update discussion comment. Returns the updated discussion comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseDiscussion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseDiscussion>> UpdateDiscussionCommentAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling CollaborationApi->UpdateDiscussionComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling CollaborationApi->UpdateDiscussionComment");

            var localVarPath = "/collaborations/discussions/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscussionComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseDiscussion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseDiscussion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseDiscussion)));
            
        }

    }
}
