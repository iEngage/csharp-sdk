/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBPMApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign task
        /// </summary>
        /// <remarks>
        /// Assign BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        VerveResponseWFTask AssignWFTask (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null);

        /// <summary>
        /// Assign task
        /// </summary>
        /// <remarks>
        /// Assign BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        ApiResponse<VerveResponseWFTask> AssignWFTaskWithHttpInfo (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null);
        /// <summary>
        /// Complete task
        /// </summary>
        /// <remarks>
        /// Complete BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        VerveResponseWFTask CompleteWFTask (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null);

        /// <summary>
        /// Complete task
        /// </summary>
        /// <remarks>
        /// Complete BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        ApiResponse<VerveResponseWFTask> CompleteWFTaskWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null);
        /// <summary>
        /// Get task by task id
        /// </summary>
        /// <remarks>
        /// Return the BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        VerveResponseWFTask GetBPMTasks (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get task by task id
        /// </summary>
        /// <remarks>
        /// Return the BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        ApiResponse<VerveResponseWFTask> GetBPMTasksWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        VerveResponseWFTaskList GetSearchTask (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        ApiResponse<VerveResponseWFTaskList> GetSearchTaskWithHttpInfo (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        VerveResponseWFTaskList GetTasksByEntity (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        ApiResponse<VerveResponseWFTaskList> GetTasksByEntityWithHttpInfo (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        VerveResponseWFTaskList GetUserBPMTasks (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        ApiResponse<VerveResponseWFTaskList> GetUserBPMTasksWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user roles
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        VerveResponseWFTaskList GetUserRolesBPMTasks (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user roles
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        ApiResponse<VerveResponseWFTaskList> GetUserRolesBPMTasksWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign task
        /// </summary>
        /// <remarks>
        /// Assign BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        System.Threading.Tasks.Task<VerveResponseWFTask> AssignWFTaskAsync (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null);

        /// <summary>
        /// Assign task
        /// </summary>
        /// <remarks>
        /// Assign BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> AssignWFTaskAsyncWithHttpInfo (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null);
        /// <summary>
        /// Complete task
        /// </summary>
        /// <remarks>
        /// Complete BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        System.Threading.Tasks.Task<VerveResponseWFTask> CompleteWFTaskAsync (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null);

        /// <summary>
        /// Complete task
        /// </summary>
        /// <remarks>
        /// Complete BPM task, It will return task object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> CompleteWFTaskAsyncWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null);
        /// <summary>
        /// Get task by task id
        /// </summary>
        /// <remarks>
        /// Return the BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        System.Threading.Tasks.Task<VerveResponseWFTask> GetBPMTasksAsync (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get task by task id
        /// </summary>
        /// <remarks>
        /// Return the BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> GetBPMTasksAsyncWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        System.Threading.Tasks.Task<VerveResponseWFTaskList> GetSearchTaskAsync (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetSearchTaskAsyncWithHttpInfo (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        System.Threading.Tasks.Task<VerveResponseWFTaskList> GetTasksByEntityAsync (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetTasksByEntityAsyncWithHttpInfo (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        System.Threading.Tasks.Task<VerveResponseWFTaskList> GetUserBPMTasksAsync (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetUserBPMTasksAsyncWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of BPM task assigned to user roles
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        System.Threading.Tasks.Task<VerveResponseWFTaskList> GetUserRolesBPMTasksAsync (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of BPM task assigned to user roles
        /// </summary>
        /// <remarks>
        /// Return the list of BPM task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetUserRolesBPMTasksAsyncWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BPMApi : IBPMApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BPMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BPMApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BPMApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BPMApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign task Assign BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        public VerveResponseWFTask AssignWFTask (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = AssignWFTaskWithHttpInfo(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign task Assign BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        public ApiResponse< VerveResponseWFTask > AssignWFTaskWithHttpInfo (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null)
        {
            // verify the required parameter 'assigneeUserId' is set
            if (assigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'assigneeUserId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->AssignWFTask");

            var localVarPath = "/bpm/tasks/{taskId}/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (assigneeUserId != null) localVarFormParams.Add("assigneeUserId", Configuration.ApiClient.ParameterToString(assigneeUserId)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignWFTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Assign task Assign BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTask> AssignWFTaskAsync (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = await AssignWFTaskAsyncWithHttpInfo(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign task Assign BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assigneeUserId">assigneeUserId - assign to this user</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="dueDate">dueDate (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> AssignWFTaskAsyncWithHttpInfo (long? assigneeUserId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string comment = null, long? dueDate = null, string fields = null)
        {
            // verify the required parameter 'assigneeUserId' is set
            if (assigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'assigneeUserId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->AssignWFTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->AssignWFTask");

            var localVarPath = "/bpm/tasks/{taskId}/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (assigneeUserId != null) localVarFormParams.Add("assigneeUserId", Configuration.ApiClient.ParameterToString(assigneeUserId)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignWFTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Complete task Complete BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        public VerveResponseWFTask CompleteWFTask (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = CompleteWFTaskWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete task Complete BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        public ApiResponse< VerveResponseWFTask > CompleteWFTaskWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->CompleteWFTask");

            var localVarPath = "/bpm/tasks/{taskId}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (transition != null) localVarFormParams.Add("transition", Configuration.ApiClient.ParameterToString(transition)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteWFTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Complete task Complete BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTask> CompleteWFTaskAsync (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = await CompleteWFTaskAsyncWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete task Complete BPM task, It will return task object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to complete</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="transition">transition (optional)</param>
        /// <param name="comment">comment (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> CompleteWFTaskAsyncWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string transition = null, string comment = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->CompleteWFTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->CompleteWFTask");

            var localVarPath = "/bpm/tasks/{taskId}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (transition != null) localVarFormParams.Add("transition", Configuration.ApiClient.ParameterToString(transition)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteWFTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Get task by task id Return the BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTask</returns>
        public VerveResponseWFTask GetBPMTasks (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = GetBPMTasksWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get task by task id Return the BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTask</returns>
        public ApiResponse< VerveResponseWFTask > GetBPMTasksWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetBPMTasks");

            var localVarPath = "/bpm/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Get task by task id Return the BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTask> GetBPMTasksAsync (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseWFTask> localVarResponse = await GetBPMTasksAsyncWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get task by task id Return the BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTask>> GetBPMTasksAsyncWithHttpInfo (long? userId, long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetBPMTasks");

            var localVarPath = "/bpm/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTask)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        public VerveResponseWFTaskList GetSearchTask (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = GetSearchTaskWithHttpInfo(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        public ApiResponse< VerveResponseWFTaskList > GetSearchTaskWithHttpInfo (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'searchString' is set
            if (searchString == null)
                throw new ApiException(400, "Missing required parameter 'searchString' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'searchByUserRoles' is set
            if (searchByUserRoles == null)
                throw new ApiException(400, "Missing required parameter 'searchByUserRoles' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetSearchTask");

            var localVarPath = "/bpm/{userId}/tasks/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (searchString != null) localVarQueryParams.Add("searchString", Configuration.ApiClient.ParameterToString(searchString)); // query parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (searchByUserRoles != null) localVarQueryParams.Add("searchByUserRoles", Configuration.ApiClient.ParameterToString(searchByUserRoles)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTaskList> GetSearchTaskAsync (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = await GetSearchTaskAsyncWithHttpInfo(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="searchString">searchString</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetSearchTaskAsyncWithHttpInfo (long? userId, string searchString, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'searchString' is set
            if (searchString == null)
                throw new ApiException(400, "Missing required parameter 'searchString' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'searchByUserRoles' is set
            if (searchByUserRoles == null)
                throw new ApiException(400, "Missing required parameter 'searchByUserRoles' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetSearchTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetSearchTask");

            var localVarPath = "/bpm/{userId}/tasks/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (searchString != null) localVarQueryParams.Add("searchString", Configuration.ApiClient.ParameterToString(searchString)); // query parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (searchByUserRoles != null) localVarQueryParams.Add("searchByUserRoles", Configuration.ApiClient.ParameterToString(searchByUserRoles)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        public VerveResponseWFTaskList GetTasksByEntity (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = GetTasksByEntityWithHttpInfo(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        public ApiResponse< VerveResponseWFTaskList > GetTasksByEntityWithHttpInfo (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'searchByUserRoles' is set
            if (searchByUserRoles == null)
                throw new ApiException(400, "Missing required parameter 'searchByUserRoles' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetTasksByEntity");

            var localVarPath = "/bpm/{userId}/tasks/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (searchByUserRoles != null) localVarQueryParams.Add("searchByUserRoles", Configuration.ApiClient.ParameterToString(searchByUserRoles)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksByEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTaskList> GetTasksByEntityAsync (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = await GetTasksByEntityAsyncWithHttpInfo(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="entityId">entityId</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt;</param>
        /// <param name="searchByUserRoles">1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetTasksByEntityAsyncWithHttpInfo (long? userId, long? entityId, bool? completed, bool? searchByUserRoles, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'searchByUserRoles' is set
            if (searchByUserRoles == null)
                throw new ApiException(400, "Missing required parameter 'searchByUserRoles' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetTasksByEntity");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetTasksByEntity");

            var localVarPath = "/bpm/{userId}/tasks/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (searchByUserRoles != null) localVarQueryParams.Add("searchByUserRoles", Configuration.ApiClient.ParameterToString(searchByUserRoles)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksByEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        public VerveResponseWFTaskList GetUserBPMTasks (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = GetUserBPMTasksWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        public ApiResponse< VerveResponseWFTaskList > GetUserBPMTasksWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetUserBPMTasks");

            var localVarPath = "/bpm/{userId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTaskList> GetUserBPMTasksAsync (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = await GetUserBPMTasksAsyncWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of BPM task assigned to user Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetUserBPMTasksAsyncWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetUserBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetUserBPMTasks");

            var localVarPath = "/bpm/{userId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user roles Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>VerveResponseWFTaskList</returns>
        public VerveResponseWFTaskList GetUserRolesBPMTasks (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = GetUserRolesBPMTasksWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of BPM task assigned to user roles Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>ApiResponse of VerveResponseWFTaskList</returns>
        public ApiResponse< VerveResponseWFTaskList > GetUserRolesBPMTasksWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetUserRolesBPMTasks");

            var localVarPath = "/bpm/{userId}/roles/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

        /// <summary>
        /// Get list of BPM task assigned to user roles Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of VerveResponseWFTaskList</returns>
        public async System.Threading.Tasks.Task<VerveResponseWFTaskList> GetUserRolesBPMTasksAsync (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseWFTaskList> localVarResponse = await GetUserRolesBPMTasksAsyncWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of BPM task assigned to user roles Return the list of BPM task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose task want to see</param>
        /// <param name="completed">1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="type">Type (optional)</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)</param>
        /// <returns>Task of ApiResponse (VerveResponseWFTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseWFTaskList>> GetUserRolesBPMTasksAsyncWithHttpInfo (long? userId, bool? completed, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string type = null, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'completed' is set
            if (completed == null)
                throw new ApiException(400, "Missing required parameter 'completed' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling BPMApi->GetUserRolesBPMTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling BPMApi->GetUserRolesBPMTasks");

            var localVarPath = "/bpm/{userId}/roles/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (completed != null) localVarQueryParams.Add("completed", Configuration.ApiClient.ParameterToString(completed)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesBPMTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseWFTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseWFTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseWFTaskList)));
            
        }

    }
}
