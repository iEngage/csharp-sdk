/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Comment on milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to comment on milestone. Returns the comments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment AddMilestoneComment (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Comment on milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to comment on milestone. Returns the comments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> AddMilestoneCommentWithHttpInfo (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Comment on task
        /// </summary>
        /// <remarks>
        /// Allows  the user to comment on task. Returns the task comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment AddTaskComment (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Comment on task
        /// </summary>
        /// <remarks>
        /// Allows  the user to comment on task. Returns the task comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> AddTaskCommentWithHttpInfo (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Create milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to create milestone. Returns the created milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        VerveResponseMilestone CreateMilestone (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);

        /// <summary>
        /// Create milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to create milestone. Returns the created milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        ApiResponse<VerveResponseMilestone> CreateMilestoneWithHttpInfo (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);
        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// Allows user to create task. Returns the created task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        VerveResponseTask CreateTask (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// Allows user to create task. Returns the created task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        ApiResponse<VerveResponseTask> CreateTaskWithHttpInfo (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to delete milestone. Returns the deleted milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        VerveResponseMilestone DeleteMilestone (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to delete milestone. Returns the deleted milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        ApiResponse<VerveResponseMilestone> DeleteMilestoneWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete task
        /// </summary>
        /// <remarks>
        /// Allows the user to delete task. Returns the deleted task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        VerveResponseTask DeleteTask (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete task
        /// </summary>
        /// <remarks>
        /// Allows the user to delete task. Returns the deleted task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        ApiResponse<VerveResponseTask> DeleteTaskWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of milestones
        /// </summary>
        /// <remarks>
        /// Returns the list of milestones
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestoneList</returns>
        VerveResponseMilestoneList GetMilestones (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of milestones
        /// </summary>
        /// <remarks>
        /// Returns the list of milestones
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestoneList</returns>
        ApiResponse<VerveResponseMilestoneList> GetMilestonesWithHttpInfo (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of comments written on Milestones
        /// </summary>
        /// <remarks>
        /// Returns the list comments written on milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseCommentList</returns>
        VerveResponseCommentList GetMilestonesComments (long? milestoneId, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get list of comments written on Milestones
        /// </summary>
        /// <remarks>
        /// Returns the list comments written on milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        ApiResponse<VerveResponseCommentList> GetMilestonesCommentsWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of Comments written on task
        /// </summary>
        /// <remarks>
        /// Returns the list of comments written on task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseCommentList</returns>
        VerveResponseCommentList GetTaskComments (long? taskId, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get list of Comments written on task
        /// </summary>
        /// <remarks>
        /// Returns the list of comments written on task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        ApiResponse<VerveResponseCommentList> GetTaskCommentsWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of task assigned to user
        /// </summary>
        /// <remarks>
        /// Returns the list of task assigned to user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTaskList</returns>
        VerveResponseTaskList GetUserTasks (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of task assigned to user
        /// </summary>
        /// <remarks>
        /// Returns the list of task assigned to user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTaskList</returns>
        ApiResponse<VerveResponseTaskList> GetUserTasksWithHttpInfo (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to update milestone. Returns the updated milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        VerveResponseMilestone UpdateMilestone (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to update milestone. Returns the updated milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        ApiResponse<VerveResponseMilestone> UpdateMilestoneWithHttpInfo (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Allows the user to update task. Returns the updated task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        VerveResponseTask UpdateTask (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Allows the user to update task. Returns the updated task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        ApiResponse<VerveResponseTask> UpdateTaskWithHttpInfo (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update task status
        /// </summary>
        /// <remarks>
        /// Allows the user to update task status. Returns the updated task status
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        VerveResponseTask UpdateTaskStatus (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update task status
        /// </summary>
        /// <remarks>
        /// Allows the user to update task status. Returns the updated task status
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        ApiResponse<VerveResponseTask> UpdateTaskStatusWithHttpInfo (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Comment on milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to comment on milestone. Returns the comments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> AddMilestoneCommentAsync (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Comment on milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to comment on milestone. Returns the comments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddMilestoneCommentAsyncWithHttpInfo (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Comment on task
        /// </summary>
        /// <remarks>
        /// Allows  the user to comment on task. Returns the task comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> AddTaskCommentAsync (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Comment on task
        /// </summary>
        /// <remarks>
        /// Allows  the user to comment on task. Returns the task comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddTaskCommentAsyncWithHttpInfo (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Create milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to create milestone. Returns the created milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        System.Threading.Tasks.Task<VerveResponseMilestone> CreateMilestoneAsync (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);

        /// <summary>
        /// Create milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to create milestone. Returns the created milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> CreateMilestoneAsyncWithHttpInfo (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);
        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// Allows user to create task. Returns the created task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        System.Threading.Tasks.Task<VerveResponseTask> CreateTaskAsync (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// Allows user to create task. Returns the created task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> CreateTaskAsyncWithHttpInfo (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to delete milestone. Returns the deleted milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        System.Threading.Tasks.Task<VerveResponseMilestone> DeleteMilestoneAsync (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to delete milestone. Returns the deleted milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> DeleteMilestoneAsyncWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete task
        /// </summary>
        /// <remarks>
        /// Allows the user to delete task. Returns the deleted task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        System.Threading.Tasks.Task<VerveResponseTask> DeleteTaskAsync (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete task
        /// </summary>
        /// <remarks>
        /// Allows the user to delete task. Returns the deleted task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> DeleteTaskAsyncWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of milestones
        /// </summary>
        /// <remarks>
        /// Returns the list of milestones
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestoneList</returns>
        System.Threading.Tasks.Task<VerveResponseMilestoneList> GetMilestonesAsync (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);

        /// <summary>
        /// Get list of milestones
        /// </summary>
        /// <remarks>
        /// Returns the list of milestones
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestoneList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestoneList>> GetMilestonesAsyncWithHttpInfo (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null);
        /// <summary>
        /// Get list of comments written on Milestones
        /// </summary>
        /// <remarks>
        /// Returns the list comments written on milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        System.Threading.Tasks.Task<VerveResponseCommentList> GetMilestonesCommentsAsync (long? milestoneId, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get list of comments written on Milestones
        /// </summary>
        /// <remarks>
        /// Returns the list comments written on milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetMilestonesCommentsAsyncWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of Comments written on task
        /// </summary>
        /// <remarks>
        /// Returns the list of comments written on task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        System.Threading.Tasks.Task<VerveResponseCommentList> GetTaskCommentsAsync (long? taskId, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get list of Comments written on task
        /// </summary>
        /// <remarks>
        /// Returns the list of comments written on task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetTaskCommentsAsyncWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of task assigned to user
        /// </summary>
        /// <remarks>
        /// Returns the list of task assigned to user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTaskList</returns>
        System.Threading.Tasks.Task<VerveResponseTaskList> GetUserTasksAsync (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of task assigned to user
        /// </summary>
        /// <remarks>
        /// Returns the list of task assigned to user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTaskList>> GetUserTasksAsyncWithHttpInfo (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to update milestone. Returns the updated milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        System.Threading.Tasks.Task<VerveResponseMilestone> UpdateMilestoneAsync (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update milestone
        /// </summary>
        /// <remarks>
        /// Allows the user to update milestone. Returns the updated milestone
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> UpdateMilestoneAsyncWithHttpInfo (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Allows the user to update task. Returns the updated task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        System.Threading.Tasks.Task<VerveResponseTask> UpdateTaskAsync (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Allows the user to update task. Returns the updated task
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> UpdateTaskAsyncWithHttpInfo (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update task status
        /// </summary>
        /// <remarks>
        /// Allows the user to update task status. Returns the updated task status
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        System.Threading.Tasks.Task<VerveResponseTask> UpdateTaskStatusAsync (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update task status
        /// </summary>
        /// <remarks>
        /// Allows the user to update task status. Returns the updated task status
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> UpdateTaskStatusAsyncWithHttpInfo (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectManagementApi : IProjectManagementApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectManagementApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectManagementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Comment on milestone Allows the user to comment on milestone. Returns the comments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment AddMilestoneComment (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseComment> localVarResponse = AddMilestoneCommentWithHttpInfo(milestoneId, commentText, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Comment on milestone Allows the user to comment on milestone. Returns the comments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > AddMilestoneCommentWithHttpInfo (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->AddMilestoneComment");

            var localVarPath = "/milestones/{milestoneId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMilestoneComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on milestone Allows the user to comment on milestone. Returns the comments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> AddMilestoneCommentAsync (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await AddMilestoneCommentAsyncWithHttpInfo(milestoneId, commentText, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Comment on milestone Allows the user to comment on milestone. Returns the comments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddMilestoneCommentAsyncWithHttpInfo (long? milestoneId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->AddMilestoneComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->AddMilestoneComment");

            var localVarPath = "/milestones/{milestoneId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMilestoneComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on task Allows  the user to comment on task. Returns the task comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment AddTaskComment (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseComment> localVarResponse = AddTaskCommentWithHttpInfo(taskId, commentText, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Comment on task Allows  the user to comment on task. Returns the task comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > AddTaskCommentWithHttpInfo (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->AddTaskComment");

            var localVarPath = "/milestones/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on task Allows  the user to comment on task. Returns the task comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> AddTaskCommentAsync (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await AddTaskCommentAsyncWithHttpInfo(taskId, commentText, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Comment on task Allows  the user to comment on task. Returns the task comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="commentText">commentText</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> AddTaskCommentAsyncWithHttpInfo (long? taskId, string commentText, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->AddTaskComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->AddTaskComment");

            var localVarPath = "/milestones/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Create milestone Allows the user to create milestone. Returns the created milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        public VerveResponseMilestone CreateMilestone (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = CreateMilestoneWithHttpInfo(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create milestone Allows the user to create milestone. Returns the created milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        public ApiResponse< VerveResponseMilestone > CreateMilestoneWithHttpInfo (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'neverDue' is set
            if (neverDue == null)
                throw new ApiException(400, "Missing required parameter 'neverDue' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->CreateMilestone");

            var localVarPath = "/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (organizationId != null) localVarFormParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (neverDue != null) localVarFormParams.Add("neverDue", Configuration.ApiClient.ParameterToString(neverDue)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Create milestone Allows the user to create milestone. Returns the created milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        public async System.Threading.Tasks.Task<VerveResponseMilestone> CreateMilestoneAsync (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = await CreateMilestoneAsyncWithHttpInfo(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create milestone Allows the user to create milestone. Returns the created milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date(Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> CreateMilestoneAsyncWithHttpInfo (string title, string description, string dueDate, bool? neverDue, string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'neverDue' is set
            if (neverDue == null)
                throw new ApiException(400, "Missing required parameter 'neverDue' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->CreateMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->CreateMilestone");

            var localVarPath = "/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (organizationId != null) localVarFormParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (neverDue != null) localVarFormParams.Add("neverDue", Configuration.ApiClient.ParameterToString(neverDue)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Create task Allows user to create task. Returns the created task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        public VerveResponseTask CreateTask (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = CreateTaskWithHttpInfo(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create task Allows user to create task. Returns the created task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        public ApiResponse< VerveResponseTask > CreateTaskWithHttpInfo (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'assigneeUserId' is set
            if (assigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'assigneeUserId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'neverDue' is set
            if (neverDue == null)
                throw new ApiException(400, "Missing required parameter 'neverDue' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->CreateTask");

            var localVarPath = "/milestones/{milestoneId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (assigneeUserId != null) localVarFormParams.Add("assigneeUserId", Configuration.ApiClient.ParameterToString(assigneeUserId)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (neverDue != null) localVarFormParams.Add("neverDue", Configuration.ApiClient.ParameterToString(neverDue)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Create task Allows user to create task. Returns the created task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseTask> CreateTaskAsync (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = await CreateTaskAsyncWithHttpInfo(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create task Allows user to create task. Returns the created task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="priority">Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL</param>
        /// <param name="assigneeUserId">assignee User Id</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="neverDue">neverDue. If neverDue is true, it takes higher priority than dueDate</param>
        /// <param name="milestoneId">Milestone Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> CreateTaskAsyncWithHttpInfo (string title, string description, int? priority, long? assigneeUserId, string dueDate, bool? neverDue, long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'assigneeUserId' is set
            if (assigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'assigneeUserId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'neverDue' is set
            if (neverDue == null)
                throw new ApiException(400, "Missing required parameter 'neverDue' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->CreateTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->CreateTask");

            var localVarPath = "/milestones/{milestoneId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (assigneeUserId != null) localVarFormParams.Add("assigneeUserId", Configuration.ApiClient.ParameterToString(assigneeUserId)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (neverDue != null) localVarFormParams.Add("neverDue", Configuration.ApiClient.ParameterToString(neverDue)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Delete milestone Allows the user to delete milestone. Returns the deleted milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        public VerveResponseMilestone DeleteMilestone (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = DeleteMilestoneWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete milestone Allows the user to delete milestone. Returns the deleted milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        public ApiResponse< VerveResponseMilestone > DeleteMilestoneWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->DeleteMilestone");

            var localVarPath = "/milestones/{milestoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Delete milestone Allows the user to delete milestone. Returns the deleted milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        public async System.Threading.Tasks.Task<VerveResponseMilestone> DeleteMilestoneAsync (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = await DeleteMilestoneAsyncWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete milestone Allows the user to delete milestone. Returns the deleted milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> DeleteMilestoneAsyncWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->DeleteMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->DeleteMilestone");

            var localVarPath = "/milestones/{milestoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Delete task Allows the user to delete task. Returns the deleted task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        public VerveResponseTask DeleteTask (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = DeleteTaskWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete task Allows the user to delete task. Returns the deleted task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        public ApiResponse< VerveResponseTask > DeleteTaskWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->DeleteTask");

            var localVarPath = "/milestones/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Delete task Allows the user to delete task. Returns the deleted task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseTask> DeleteTaskAsync (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = await DeleteTaskAsyncWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete task Allows the user to delete task. Returns the deleted task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> DeleteTaskAsyncWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->DeleteTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->DeleteTask");

            var localVarPath = "/milestones/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Get list of milestones Returns the list of milestones
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestoneList</returns>
        public VerveResponseMilestoneList GetMilestones (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseMilestoneList> localVarResponse = GetMilestonesWithHttpInfo(loggedInUserId, accessToken, clientToken, organizationId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of milestones Returns the list of milestones
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestoneList</returns>
        public ApiResponse< VerveResponseMilestoneList > GetMilestonesWithHttpInfo (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetMilestones");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetMilestones");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetMilestones");

            var localVarPath = "/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestoneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestoneList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestoneList)));
            
        }

        /// <summary>
        /// Get list of milestones Returns the list of milestones
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestoneList</returns>
        public async System.Threading.Tasks.Task<VerveResponseMilestoneList> GetMilestonesAsync (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
             ApiResponse<VerveResponseMilestoneList> localVarResponse = await GetMilestonesAsyncWithHttpInfo(loggedInUserId, accessToken, clientToken, organizationId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of milestones Returns the list of milestones
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestoneList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestoneList>> GetMilestonesAsyncWithHttpInfo (string loggedInUserId, string accessToken, string clientToken, long? organizationId = null, string fields = null)
        {
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetMilestones");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetMilestones");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetMilestones");

            var localVarPath = "/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestoneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestoneList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestoneList)));
            
        }

        /// <summary>
        /// Get list of comments written on Milestones Returns the list comments written on milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseCommentList</returns>
        public VerveResponseCommentList GetMilestonesComments (long? milestoneId, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = GetMilestonesCommentsWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of comments written on Milestones Returns the list comments written on milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        public ApiResponse< VerveResponseCommentList > GetMilestonesCommentsWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetMilestonesComments");

            var localVarPath = "/milestones/{milestoneId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestonesComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of comments written on Milestones Returns the list comments written on milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseCommentList> GetMilestonesCommentsAsync (long? milestoneId, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = await GetMilestonesCommentsAsyncWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of comments written on Milestones Returns the list comments written on milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetMilestonesCommentsAsyncWithHttpInfo (long? milestoneId, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetMilestonesComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetMilestonesComments");

            var localVarPath = "/milestones/{milestoneId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestonesComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of Comments written on task Returns the list of comments written on task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseCommentList</returns>
        public VerveResponseCommentList GetTaskComments (long? taskId, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = GetTaskCommentsWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of Comments written on task Returns the list of comments written on task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        public ApiResponse< VerveResponseCommentList > GetTaskCommentsWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetTaskComments");

            var localVarPath = "/milestones/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of Comments written on task Returns the list of comments written on task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseCommentList> GetTaskCommentsAsync (long? taskId, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = await GetTaskCommentsAsyncWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of Comments written on task Returns the list of comments written on task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetTaskCommentsAsyncWithHttpInfo (long? taskId, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetTaskComments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetTaskComments");

            var localVarPath = "/milestones/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of task assigned to user Returns the list of task assigned to user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTaskList</returns>
        public VerveResponseTaskList GetUserTasks (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTaskList> localVarResponse = GetUserTasksWithHttpInfo(userId, status, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of task assigned to user Returns the list of task assigned to user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTaskList</returns>
        public ApiResponse< VerveResponseTaskList > GetUserTasksWithHttpInfo (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetUserTasks");

            var localVarPath = "/milestones/tasks/{userId}/assigned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTaskList)));
            
        }

        /// <summary>
        /// Get list of task assigned to user Returns the list of task assigned to user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTaskList</returns>
        public async System.Threading.Tasks.Task<VerveResponseTaskList> GetUserTasksAsync (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTaskList> localVarResponse = await GetUserTasksAsyncWithHttpInfo(userId, status, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of task assigned to user Returns the list of task assigned to user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="status">Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTaskList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTaskList>> GetUserTasksAsyncWithHttpInfo (long? userId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->GetUserTasks");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->GetUserTasks");

            var localVarPath = "/milestones/tasks/{userId}/assigned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTaskList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTaskList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTaskList)));
            
        }

        /// <summary>
        /// Update milestone Allows the user to update milestone. Returns the updated milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>VerveResponseMilestone</returns>
        public VerveResponseMilestone UpdateMilestone (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = UpdateMilestoneWithHttpInfo(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update milestone Allows the user to update milestone. Returns the updated milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>ApiResponse of VerveResponseMilestone</returns>
        public ApiResponse< VerveResponseMilestone > UpdateMilestoneWithHttpInfo (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateMilestone");

            var localVarPath = "/milestones/{milestoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Update milestone Allows the user to update milestone. Returns the updated milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of VerveResponseMilestone</returns>
        public async System.Threading.Tasks.Task<VerveResponseMilestone> UpdateMilestoneAsync (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseMilestone> localVarResponse = await UpdateMilestoneAsyncWithHttpInfo(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update milestone Allows the user to update milestone. Returns the updated milestone
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date (Format: MM-dd-yyyy HH:mm:ss a)</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseMilestone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseMilestone>> UpdateMilestoneAsyncWithHttpInfo (long? milestoneId, string title, string description, string dueDate, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'milestoneId' is set
            if (milestoneId == null)
                throw new ApiException(400, "Missing required parameter 'milestoneId' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateMilestone");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateMilestone");

            var localVarPath = "/milestones/{milestoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (milestoneId != null) localVarPathParams.Add("milestoneId", Configuration.ApiClient.ParameterToString(milestoneId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMilestone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseMilestone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseMilestone) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseMilestone)));
            
        }

        /// <summary>
        /// Update task Allows the user to update task. Returns the updated task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        public VerveResponseTask UpdateTask (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = UpdateTaskWithHttpInfo(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update task Allows the user to update task. Returns the updated task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        public ApiResponse< VerveResponseTask > UpdateTaskWithHttpInfo (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'reAssigneeUserId' is set
            if (reAssigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'reAssigneeUserId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateTask");

            var localVarPath = "/milestones/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (reAssigneeUserId != null) localVarFormParams.Add("reAssigneeUserId", Configuration.ApiClient.ParameterToString(reAssigneeUserId)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Update task Allows the user to update task. Returns the updated task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseTask> UpdateTaskAsync (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = await UpdateTaskAsyncWithHttpInfo(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update task Allows the user to update task. Returns the updated task
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">Due date</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="reAssigneeUserId">re-assignee User Id</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> UpdateTaskAsyncWithHttpInfo (long? taskId, string title, string description, string dueDate, int? status, long? reAssigneeUserId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'dueDate' is set
            if (dueDate == null)
                throw new ApiException(400, "Missing required parameter 'dueDate' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'reAssigneeUserId' is set
            if (reAssigneeUserId == null)
                throw new ApiException(400, "Missing required parameter 'reAssigneeUserId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateTask");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateTask");

            var localVarPath = "/milestones/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (dueDate != null) localVarFormParams.Add("dueDate", Configuration.ApiClient.ParameterToString(dueDate)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (reAssigneeUserId != null) localVarFormParams.Add("reAssigneeUserId", Configuration.ApiClient.ParameterToString(reAssigneeUserId)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Update task status Allows the user to update task status. Returns the updated task status
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>VerveResponseTask</returns>
        public VerveResponseTask UpdateTaskStatus (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = UpdateTaskStatusWithHttpInfo(taskId, status, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update task status Allows the user to update task status. Returns the updated task status
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>ApiResponse of VerveResponseTask</returns>
        public ApiResponse< VerveResponseTask > UpdateTaskStatusWithHttpInfo (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateTaskStatus");

            var localVarPath = "/milestones/tasks/{taskId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

        /// <summary>
        /// Update task status Allows the user to update task status. Returns the updated task status
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of VerveResponseTask</returns>
        public async System.Threading.Tasks.Task<VerveResponseTask> UpdateTaskStatusAsync (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseTask> localVarResponse = await UpdateTaskStatusAsyncWithHttpInfo(taskId, status, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update task status Allows the user to update task status. Returns the updated task status
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="status">Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)</param>
        /// <returns>Task of ApiResponse (VerveResponseTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTask>> UpdateTaskStatusAsyncWithHttpInfo (long? taskId, int? status, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProjectManagementApi->UpdateTaskStatus");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling ProjectManagementApi->UpdateTaskStatus");

            var localVarPath = "/milestones/tasks/{taskId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTask) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTask)));
            
        }

    }
}
