/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create custom notification
        /// </summary>
        /// <remarks>
        /// This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        bool? AddNotification (string requesterId, string clientToken, Notification body = null, string accessToken = null);

        /// <summary>
        /// Create custom notification
        /// </summary>
        /// <remarks>
        /// This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> AddNotificationWithHttpInfo (string requesterId, string clientToken, Notification body = null, string accessToken = null);
        /// <summary>
        /// Get list of notifications
        /// </summary>
        /// <remarks>
        /// Return the list of notifications
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseNotificationList</returns>
        VerveResponseNotificationList GetNotifications (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of notifications
        /// </summary>
        /// <remarks>
        /// Return the list of notifications
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseNotificationList</returns>
        ApiResponse<VerveResponseNotificationList> GetNotificationsWithHttpInfo (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Mark all notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark all the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        bool? MarkAllNotificationAsRead (string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Mark all notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark all the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> MarkAllNotificationAsReadWithHttpInfo (string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Mark notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        bool? MarkNotificationAsRead (long? notificationId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Mark notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> MarkNotificationAsReadWithHttpInfo (long? notificationId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get notifications count
        /// </summary>
        /// <remarks>
        /// Returns the notification count
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>long?</returns>
        long? NotificationCount (string type, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get notifications count
        /// </summary>
        /// <remarks>
        /// Returns the notification count
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> NotificationCountWithHttpInfo (string type, string requesterId, string clientToken, string accessToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create custom notification
        /// </summary>
        /// <remarks>
        /// This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> AddNotificationAsync (string requesterId, string clientToken, Notification body = null, string accessToken = null);

        /// <summary>
        /// Create custom notification
        /// </summary>
        /// <remarks>
        /// This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> AddNotificationAsyncWithHttpInfo (string requesterId, string clientToken, Notification body = null, string accessToken = null);
        /// <summary>
        /// Get list of notifications
        /// </summary>
        /// <remarks>
        /// Return the list of notifications
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseNotificationList</returns>
        System.Threading.Tasks.Task<VerveResponseNotificationList> GetNotificationsAsync (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of notifications
        /// </summary>
        /// <remarks>
        /// Return the list of notifications
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseNotificationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseNotificationList>> GetNotificationsAsyncWithHttpInfo (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Mark all notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark all the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> MarkAllNotificationAsReadAsync (string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Mark all notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark all the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> MarkAllNotificationAsReadAsyncWithHttpInfo (string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Mark notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> MarkNotificationAsReadAsync (long? notificationId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Mark notification as read
        /// </summary>
        /// <remarks>
        /// Allows the user to mark the notification as read
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> MarkNotificationAsReadAsyncWithHttpInfo (long? notificationId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get notifications count
        /// </summary>
        /// <remarks>
        /// Returns the notification count
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> NotificationCountAsync (string type, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get notifications count
        /// </summary>
        /// <remarks>
        /// Returns the notification count
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> NotificationCountAsyncWithHttpInfo (string type, string requesterId, string clientToken, string accessToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationApi : INotificationApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create custom notification This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        public bool? AddNotification (string requesterId, string clientToken, Notification body = null, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = AddNotificationWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom notification This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > AddNotificationWithHttpInfo (string requesterId, string clientToken, Notification body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->AddNotification");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->AddNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Create custom notification This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> AddNotificationAsync (string requesterId, string clientToken, Notification body = null, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = await AddNotificationAsyncWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom notification This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. title &lt;/br&gt;2. body &lt;/br&gt;3. extraData &lt;/br&gt;4. roleName OR toUser: { emailId }
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> AddNotificationAsyncWithHttpInfo (string requesterId, string clientToken, Notification body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->AddNotification");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->AddNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Get list of notifications Return the list of notifications
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseNotificationList</returns>
        public VerveResponseNotificationList GetNotifications (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseNotificationList> localVarResponse = GetNotificationsWithHttpInfo(type, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of notifications Return the list of notifications
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseNotificationList</returns>
        public ApiResponse< VerveResponseNotificationList > GetNotificationsWithHttpInfo (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->GetNotifications");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseNotificationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseNotificationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseNotificationList)));
            
        }

        /// <summary>
        /// Get list of notifications Return the list of notifications
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseNotificationList</returns>
        public async System.Threading.Tasks.Task<VerveResponseNotificationList> GetNotificationsAsync (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseNotificationList> localVarResponse = await GetNotificationsAsyncWithHttpInfo(type, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of notifications Return the list of notifications
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)notificationId&lt;br/&gt;2)message&lt;br/&gt;3)isRead&lt;br/&gt;4)date&lt;br/&gt;5)type&lt;br/&gt;6)byUser&lt;br/&gt;7)entity&lt;br/&gt;8)parentEntity (optional, default to notificationId,message,isRead,date)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseNotificationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseNotificationList>> GetNotificationsAsyncWithHttpInfo (string type, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->GetNotifications");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->GetNotifications");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseNotificationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseNotificationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseNotificationList)));
            
        }

        /// <summary>
        /// Mark all notification as read Allows the user to mark all the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        public bool? MarkAllNotificationAsRead (string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = MarkAllNotificationAsReadWithHttpInfo(requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all notification as read Allows the user to mark all the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > MarkAllNotificationAsReadWithHttpInfo (string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->MarkAllNotificationAsRead");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->MarkAllNotificationAsRead");

            var localVarPath = "/notifications/read/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllNotificationAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Mark all notification as read Allows the user to mark all the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> MarkAllNotificationAsReadAsync (string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = await MarkAllNotificationAsReadAsyncWithHttpInfo(requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all notification as read Allows the user to mark all the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> MarkAllNotificationAsReadAsyncWithHttpInfo (string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->MarkAllNotificationAsRead");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->MarkAllNotificationAsRead");

            var localVarPath = "/notifications/read/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllNotificationAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Mark notification as read Allows the user to mark the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>bool?</returns>
        public bool? MarkNotificationAsRead (long? notificationId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = MarkNotificationAsReadWithHttpInfo(notificationId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification as read Allows the user to mark the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > MarkNotificationAsReadWithHttpInfo (long? notificationId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->MarkNotificationAsRead");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->MarkNotificationAsRead");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->MarkNotificationAsRead");

            var localVarPath = "/notifications/read/{notificationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (notificationId != null) localVarPathParams.Add("notificationId", Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkNotificationAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Mark notification as read Allows the user to mark the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> MarkNotificationAsReadAsync (long? notificationId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<bool?> localVarResponse = await MarkNotificationAsReadAsyncWithHttpInfo(notificationId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark notification as read Allows the user to mark the notification as read
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> MarkNotificationAsReadAsyncWithHttpInfo (long? notificationId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->MarkNotificationAsRead");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->MarkNotificationAsRead");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->MarkNotificationAsRead");

            var localVarPath = "/notifications/read/{notificationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (notificationId != null) localVarPathParams.Add("notificationId", Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkNotificationAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Get notifications count Returns the notification count
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>long?</returns>
        public long? NotificationCount (string type, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<long?> localVarResponse = NotificationCountWithHttpInfo(type, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get notifications count Returns the notification count
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > NotificationCountWithHttpInfo (string type, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NotificationApi->NotificationCount");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->NotificationCount");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->NotificationCount");

            var localVarPath = "/notifications/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Get notifications count Returns the notification count
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> NotificationCountAsync (string type, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<long?> localVarResponse = await NotificationCountAsyncWithHttpInfo(type, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get notifications count Returns the notification count
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of count&lt;br/&gt; 1) UNREAD &lt;br/&gt; 2) READ &lt;br/&gt; 3)ALL</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> NotificationCountAsyncWithHttpInfo (string type, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NotificationApi->NotificationCount");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling NotificationApi->NotificationCount");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling NotificationApi->NotificationCount");

            var localVarPath = "/notifications/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

    }
}
