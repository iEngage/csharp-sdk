/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInteractionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Share interaction without attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction without attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction AddInteraction (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null);

        /// <summary>
        /// Share interaction without attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction without attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> AddInteractionWithHttpInfo (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null);
        /// <summary>
        /// Share interaction with attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction with attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction AddInteraction_0 (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null);

        /// <summary>
        /// Share interaction with attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction with attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> AddInteraction_0WithHttpInfo (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null);
        /// <summary>
        /// Response the specified interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to response the interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse AddResponse (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Response the specified interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to response the interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> AddResponseWithHttpInfo (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Change interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction category.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction ChangeInteractionCategory (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Change interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction category.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> ChangeInteractionCategoryWithHttpInfo (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Change interaction type
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction type. Boolean value
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction ChangeInteractionType (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Change interaction type
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction type. Boolean value
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> ChangeInteractionTypeWithHttpInfo (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Create interaction category
        /// </summary>
        /// <remarks>
        /// Creates a interaction category. Returns the created interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        VerveResponseInteractionCategory CreateInteractionCategory (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null);

        /// <summary>
        /// Create interaction category
        /// </summary>
        /// <remarks>
        /// Creates a interaction category. Returns the created interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        ApiResponse<VerveResponseInteractionCategory> CreateInteractionCategoryWithHttpInfo (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null);
        /// <summary>
        /// Delete interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to delete a interaction. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction DeleteInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to delete a interaction. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> DeleteInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        VerveResponseInteractionCategory DeleteInteractionCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        ApiResponse<VerveResponseInteractionCategory> DeleteInteractionCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete response
        /// </summary>
        /// <remarks>
        /// Allows the user to delete an response. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse DeleteResponse (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete response
        /// </summary>
        /// <remarks>
        /// Allows the user to delete an response. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> DeleteResponseWithHttpInfo (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Dislike response
        /// </summary>
        /// <remarks>
        /// Allows the user to dislike the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse DislikeResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Dislike response
        /// </summary>
        /// <remarks>
        /// Allows the user to dislike the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> DislikeResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of interactions shared by friends
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetFriendsInteractions (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions shared by friends
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetFriendsInteractionsWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null);
        /// <summary>
        /// Get interaction by id
        /// </summary>
        /// <remarks>
        /// Returns the interaction by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction GetInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get interaction by id
        /// </summary>
        /// <remarks>
        /// Returns the interaction by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> GetInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get the list of interaction categories
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategoryList</returns>
        VerveResponseInteractionCategoryList GetInteractionCategories (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get the list of interaction categories
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategoryList</returns>
        ApiResponse<VerveResponseInteractionCategoryList> GetInteractionCategoriesWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of all interactions visible to the user
        /// </summary>
        /// <remarks>
        /// Returns the list of all interactions visible to the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetInteractionsForUser (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of all interactions visible to the user
        /// </summary>
        /// <remarks>
        /// Returns the list of all interactions visible to the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetInteractionsForUserWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetRecommendInteractions (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetRecommendInteractionsWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended interactions from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetRecommendedInteractinsFromDB (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended interactions from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetRecommendedInteractinsFromDBWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended Users from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended users from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>VerveResponseUserList</returns>
        VerveResponseUserList GetRecommendedUsersFromDB (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended Users from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended users from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>ApiResponse of VerveResponseUserList</returns>
        ApiResponse<VerveResponseUserList> GetRecommendedUsersFromDBWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null);
        /// <summary>
        /// Get list of responses by interactionId
        /// </summary>
        /// <remarks>
        /// Returns the list of responses by interactionId
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponseList</returns>
        VerveResponseInteractionResponseList GetResponses (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of responses by interactionId
        /// </summary>
        /// <remarks>
        /// Returns the list of responses by interactionId
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponseList</returns>
        ApiResponse<VerveResponseInteractionResponseList> GetResponsesWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of interactions shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetUserInteractions (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetUserInteractionsWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of interaction categories subscribed by the user
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories subscribed by the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategoryList</returns>
        VerveResponseInteractionCategoryList GetUserSubscribedInteractionCategories (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interaction categories subscribed by the user
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories subscribed by the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategoryList</returns>
        ApiResponse<VerveResponseInteractionCategoryList> GetUserSubscribedInteractionCategoriesWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of interactions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions subscribed by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList GetUserSubscribedInteractions (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions subscribed by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> GetUserSubscribedInteractionsWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Like response
        /// </summary>
        /// <remarks>
        /// Allows the user to like the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse LikeResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Like response
        /// </summary>
        /// <remarks>
        /// Allows the user to like the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> LikeResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Mark response as a response
        /// </summary>
        /// <remarks>
        /// Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse MarkAsAnResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Mark response as a response
        /// </summary>
        /// <remarks>
        /// Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> MarkAsAnResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of matching interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of matching interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        VerveResponseInteractionList SearchInteractions (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of matching interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of matching interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        ApiResponse<VerveResponseInteractionList> SearchInteractionsWithHttpInfo (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Subscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the subscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        VerveResponseInteractionCategory SubscribeInteractinCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Subscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the subscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        ApiResponse<VerveResponseInteractionCategory> SubscribeInteractinCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Subscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction SubscribeInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Subscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> SubscribeInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unmark response as a response
        /// </summary>
        /// <remarks>
        /// Unmarks the response. This will remove the marked response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse UnmarkAsAnResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unmark response as a response
        /// </summary>
        /// <remarks>
        /// Unmarks the response. This will remove the marked response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> UnmarkAsAnResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unsubscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the unsubscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        VerveResponseInteractionCategory UnsubscribeInteractinCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unsubscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the unsubscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        ApiResponse<VerveResponseInteractionCategory> UnsubscribeInteractinCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unsubscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction UnsubscribeInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unsubscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> UnsubscribeInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to update interaction. Returns the updated interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        VerveResponseInteraction UpdateInteraction (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null);

        /// <summary>
        /// Update interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to update interaction. Returns the updated interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        ApiResponse<VerveResponseInteraction> UpdateInteractionWithHttpInfo (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null);
        /// <summary>
        /// Update interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to update the interaction category. Returns the updated interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        VerveResponseInteractionCategory UpdateInteractionCategory (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null);

        /// <summary>
        /// Update interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to update the interaction category. Returns the updated interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        ApiResponse<VerveResponseInteractionCategory> UpdateInteractionCategoryWithHttpInfo (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null);
        /// <summary>
        /// Update response
        /// </summary>
        /// <remarks>
        /// Allows the user to update an response. Returns the updated response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        VerveResponseInteractionResponse UpdateResponse (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update response
        /// </summary>
        /// <remarks>
        /// Allows the user to update an response. Returns the updated response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        ApiResponse<VerveResponseInteractionResponse> UpdateResponseWithHttpInfo (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Share interaction without attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction without attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> AddInteractionAsync (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null);

        /// <summary>
        /// Share interaction without attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction without attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> AddInteractionAsyncWithHttpInfo (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null);
        /// <summary>
        /// Share interaction with attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction with attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> AddInteraction_0Async (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null);

        /// <summary>
        /// Share interaction with attachment
        /// </summary>
        /// <remarks>
        /// Allows the user to share interaction with attachment. Returns the interaction object
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> AddInteraction_0AsyncWithHttpInfo (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null);
        /// <summary>
        /// Response the specified interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to response the interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> AddResponseAsync (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Response the specified interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to response the interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> AddResponseAsyncWithHttpInfo (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Change interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction category.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> ChangeInteractionCategoryAsync (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Change interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction category.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> ChangeInteractionCategoryAsyncWithHttpInfo (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Change interaction type
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction type. Boolean value
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> ChangeInteractionTypeAsync (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Change interaction type
        /// </summary>
        /// <remarks>
        /// Allows the user to change the interaction type. Boolean value
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> ChangeInteractionTypeAsyncWithHttpInfo (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Create interaction category
        /// </summary>
        /// <remarks>
        /// Creates a interaction category. Returns the created interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategory> CreateInteractionCategoryAsync (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null);

        /// <summary>
        /// Create interaction category
        /// </summary>
        /// <remarks>
        /// Creates a interaction category. Returns the created interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> CreateInteractionCategoryAsyncWithHttpInfo (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null);
        /// <summary>
        /// Delete interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to delete a interaction. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> DeleteInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to delete a interaction. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> DeleteInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategory> DeleteInteractionCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> DeleteInteractionCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Delete response
        /// </summary>
        /// <remarks>
        /// Allows the user to delete an response. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> DeleteResponseAsync (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Delete response
        /// </summary>
        /// <remarks>
        /// Allows the user to delete an response. Returns the deleted response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> DeleteResponseAsyncWithHttpInfo (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Dislike response
        /// </summary>
        /// <remarks>
        /// Allows the user to dislike the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> DislikeResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Dislike response
        /// </summary>
        /// <remarks>
        /// Allows the user to dislike the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> DislikeResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of interactions shared by friends
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetFriendsInteractionsAsync (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions shared by friends
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetFriendsInteractionsAsyncWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null);
        /// <summary>
        /// Get interaction by id
        /// </summary>
        /// <remarks>
        /// Returns the interaction by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> GetInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get interaction by id
        /// </summary>
        /// <remarks>
        /// Returns the interaction by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> GetInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get the list of interaction categories
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategoryList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategoryList> GetInteractionCategoriesAsync (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get the list of interaction categories
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategoryList>> GetInteractionCategoriesAsyncWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of all interactions visible to the user
        /// </summary>
        /// <remarks>
        /// Returns the list of all interactions visible to the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetInteractionsForUserAsync (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of all interactions visible to the user
        /// </summary>
        /// <remarks>
        /// Returns the list of all interactions visible to the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetInteractionsForUserAsyncWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetRecommendInteractionsAsync (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetRecommendInteractionsAsyncWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended interactions from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetRecommendedInteractinsFromDBAsync (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended interactions from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended interactions from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetRecommendedInteractinsFromDBAsyncWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of recommended Users from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended users from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>Task of VerveResponseUserList</returns>
        System.Threading.Tasks.Task<VerveResponseUserList> GetRecommendedUsersFromDBAsync (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null);

        /// <summary>
        /// Get list of recommended Users from DB
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended users from DB
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseUserList>> GetRecommendedUsersFromDBAsyncWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null);
        /// <summary>
        /// Get list of responses by interactionId
        /// </summary>
        /// <remarks>
        /// Returns the list of responses by interactionId
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponseList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponseList> GetResponsesAsync (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Get list of responses by interactionId
        /// </summary>
        /// <remarks>
        /// Returns the list of responses by interactionId
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponseList>> GetResponsesAsyncWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of interactions shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetUserInteractionsAsync (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions shared by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetUserInteractionsAsyncWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of interaction categories subscribed by the user
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories subscribed by the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategoryList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategoryList> GetUserSubscribedInteractionCategoriesAsync (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interaction categories subscribed by the user
        /// </summary>
        /// <remarks>
        /// Returns the list of interaction categories subscribed by the user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategoryList>> GetUserSubscribedInteractionCategoriesAsyncWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Get list of interactions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions subscribed by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> GetUserSubscribedInteractionsAsync (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of interactions subscribed by user
        /// </summary>
        /// <remarks>
        /// Returns the list of interactions subscribed by specific user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetUserSubscribedInteractionsAsyncWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Like response
        /// </summary>
        /// <remarks>
        /// Allows the user to like the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> LikeResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Like response
        /// </summary>
        /// <remarks>
        /// Allows the user to like the response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> LikeResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Mark response as a response
        /// </summary>
        /// <remarks>
        /// Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> MarkAsAnResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Mark response as a response
        /// </summary>
        /// <remarks>
        /// Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> MarkAsAnResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Get list of matching interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of matching interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionList> SearchInteractionsAsync (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);

        /// <summary>
        /// Get list of matching interactions
        /// </summary>
        /// <remarks>
        /// Returns the list of matching interactions
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> SearchInteractionsAsyncWithHttpInfo (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null);
        /// <summary>
        /// Subscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the subscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategory> SubscribeInteractinCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Subscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the subscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> SubscribeInteractinCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Subscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> SubscribeInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Subscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to subscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> SubscribeInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unmark response as a response
        /// </summary>
        /// <remarks>
        /// Unmarks the response. This will remove the marked response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> UnmarkAsAnResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unmark response as a response
        /// </summary>
        /// <remarks>
        /// Unmarks the response. This will remove the marked response.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> UnmarkAsAnResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unsubscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the unsubscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategory> UnsubscribeInteractinCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unsubscribe interaction category
        /// </summary>
        /// <remarks>
        /// Returns the unsubscribed interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> UnsubscribeInteractinCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Unsubscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> UnsubscribeInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Unsubscribe interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to unsubscribe a interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> UnsubscribeInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        /// <summary>
        /// Update interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to update interaction. Returns the updated interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        System.Threading.Tasks.Task<VerveResponseInteraction> UpdateInteractionAsync (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null);

        /// <summary>
        /// Update interaction
        /// </summary>
        /// <remarks>
        /// Allows the user to update interaction. Returns the updated interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> UpdateInteractionAsyncWithHttpInfo (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null);
        /// <summary>
        /// Update interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to update the interaction category. Returns the updated interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionCategory> UpdateInteractionCategoryAsync (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null);

        /// <summary>
        /// Update interaction category
        /// </summary>
        /// <remarks>
        /// Allows the user to update the interaction category. Returns the updated interaction category
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> UpdateInteractionCategoryAsyncWithHttpInfo (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null);
        /// <summary>
        /// Update response
        /// </summary>
        /// <remarks>
        /// Allows the user to update an response. Returns the updated response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        System.Threading.Tasks.Task<VerveResponseInteractionResponse> UpdateResponseAsync (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);

        /// <summary>
        /// Update response
        /// </summary>
        /// <remarks>
        /// Allows the user to update an response. Returns the updated response
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> UpdateResponseAsyncWithHttpInfo (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InteractionApi : IInteractionApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InteractionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InteractionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InteractionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InteractionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Share interaction without attachment Allows the user to share interaction without attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction AddInteraction (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = AddInteractionWithHttpInfo(interactionTitle, loggedInUserId, accessToken, clientToken, categoryId, interactionType, interactionDescription, association);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share interaction without attachment Allows the user to share interaction without attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > AddInteractionWithHttpInfo (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null)
        {
            // verify the required parameter 'interactionTitle' is set
            if (interactionTitle == null)
                throw new ApiException(400, "Missing required parameter 'interactionTitle' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddInteraction");

            var localVarPath = "/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (categoryId != null) localVarFormParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (interactionTitle != null) localVarFormParams.Add("interactionTitle", Configuration.ApiClient.ParameterToString(interactionTitle)); // form parameter
            if (interactionDescription != null) localVarFormParams.Add("interactionDescription", Configuration.ApiClient.ParameterToString(interactionDescription)); // form parameter
            if (association != null) localVarFormParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Share interaction without attachment Allows the user to share interaction without attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> AddInteractionAsync (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await AddInteractionAsyncWithHttpInfo(interactionTitle, loggedInUserId, accessToken, clientToken, categoryId, interactionType, interactionDescription, association);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share interaction without attachment Allows the user to share interaction without attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="interactionDescription">Describe interaction (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> AddInteractionAsyncWithHttpInfo (string interactionTitle, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string interactionDescription = null, string association = null)
        {
            // verify the required parameter 'interactionTitle' is set
            if (interactionTitle == null)
                throw new ApiException(400, "Missing required parameter 'interactionTitle' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddInteraction");

            var localVarPath = "/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (categoryId != null) localVarFormParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (interactionTitle != null) localVarFormParams.Add("interactionTitle", Configuration.ApiClient.ParameterToString(interactionTitle)); // form parameter
            if (interactionDescription != null) localVarFormParams.Add("interactionDescription", Configuration.ApiClient.ParameterToString(interactionDescription)); // form parameter
            if (association != null) localVarFormParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Share interaction with attachment Allows the user to share interaction with attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction AddInteraction_0 (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = AddInteraction_0WithHttpInfo(body3, loggedInUserId, accessToken, clientToken, body, body2, body4, body5, body6);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share interaction with attachment Allows the user to share interaction with attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > AddInteraction_0WithHttpInfo (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null)
        {
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddInteraction_0");

            var localVarPath = "/interactions/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body6 != null && body6.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body6); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body6; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteraction_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Share interaction with attachment Allows the user to share interaction with attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> AddInteraction_0Async (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await AddInteraction_0AsyncWithHttpInfo(body3, loggedInUserId, accessToken, clientToken, body, body2, body4, body5, body6);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share interaction with attachment Allows the user to share interaction with attachment. Returns the interaction object
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body3">interactionTitle</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body">categoryId (optional)</param>
        /// <param name="body2">Interaction Type (optional)</param>
        /// <param name="body4">interactionDescription (optional)</param>
        /// <param name="body5">association (optional)</param>
        /// <param name="body6"> (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> AddInteraction_0AsyncWithHttpInfo (string body3, string loggedInUserId, string accessToken, string clientToken, long? body = null, string body2 = null, string body4 = null, string body5 = null, List<Attachment> body6 = null)
        {
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddInteraction_0");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddInteraction_0");

            var localVarPath = "/interactions/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body6 != null && body6.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body6); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body6; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteraction_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Response the specified interaction Allows the user to response the interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse AddResponse (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = AddResponseWithHttpInfo(interactionId, response, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Response the specified interaction Allows the user to response the interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > AddResponseWithHttpInfo (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->AddResponse");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling InteractionApi->AddResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddResponse");

            var localVarPath = "/interactions/{interactionId}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (response != null) localVarFormParams.Add("response", Configuration.ApiClient.ParameterToString(response)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Response the specified interaction Allows the user to response the interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> AddResponseAsync (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await AddResponseAsyncWithHttpInfo(interactionId, response, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Response the specified interaction Allows the user to response the interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> AddResponseAsyncWithHttpInfo (long? interactionId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->AddResponse");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling InteractionApi->AddResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->AddResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->AddResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->AddResponse");

            var localVarPath = "/interactions/{interactionId}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (response != null) localVarFormParams.Add("response", Configuration.ApiClient.ParameterToString(response)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Change interaction category Allows the user to change the interaction category.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction ChangeInteractionCategory (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = ChangeInteractionCategoryWithHttpInfo(interactionId, categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change interaction category Allows the user to change the interaction category.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > ChangeInteractionCategoryWithHttpInfo (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->ChangeInteractionCategory");

            var localVarPath = "/interactions/{interactionId}/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Change interaction category Allows the user to change the interaction category.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> ChangeInteractionCategoryAsync (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await ChangeInteractionCategoryAsyncWithHttpInfo(interactionId, categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change interaction category Allows the user to change the interaction category.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="categoryId">New interaction categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> ChangeInteractionCategoryAsyncWithHttpInfo (long? interactionId, long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->ChangeInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->ChangeInteractionCategory");

            var localVarPath = "/interactions/{interactionId}/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Change interaction type Allows the user to change the interaction type. Boolean value
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction ChangeInteractionType (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = ChangeInteractionTypeWithHttpInfo(interactionId, interactionType, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change interaction type Allows the user to change the interaction type. Boolean value
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > ChangeInteractionTypeWithHttpInfo (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'interactionType' is set
            if (interactionType == null)
                throw new ApiException(400, "Missing required parameter 'interactionType' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->ChangeInteractionType");

            var localVarPath = "/interactions/{interactionId}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeInteractionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Change interaction type Allows the user to change the interaction type. Boolean value
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> ChangeInteractionTypeAsync (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await ChangeInteractionTypeAsyncWithHttpInfo(interactionId, interactionType, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change interaction type Allows the user to change the interaction type. Boolean value
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionType">New interaction type</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> ChangeInteractionTypeAsyncWithHttpInfo (long? interactionId, string interactionType, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'interactionType' is set
            if (interactionType == null)
                throw new ApiException(400, "Missing required parameter 'interactionType' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->ChangeInteractionType");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->ChangeInteractionType");

            var localVarPath = "/interactions/{interactionId}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeInteractionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Create interaction category Creates a interaction category. Returns the created interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        public VerveResponseInteractionCategory CreateInteractionCategory (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = CreateInteractionCategoryWithHttpInfo(interactionType, name, loggedInUserId, accessToken, clientToken, associationId, description, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create interaction category Creates a interaction category. Returns the created interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        public ApiResponse< VerveResponseInteractionCategory > CreateInteractionCategoryWithHttpInfo (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null)
        {
            // verify the required parameter 'interactionType' is set
            if (interactionType == null)
                throw new ApiException(400, "Missing required parameter 'interactionType' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->CreateInteractionCategory");

            var localVarPath = "/interactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (associationId != null) localVarFormParams.Add("associationId", Configuration.ApiClient.ParameterToString(associationId)); // form parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Create interaction category Creates a interaction category. Returns the created interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategory> CreateInteractionCategoryAsync (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = await CreateInteractionCategoryAsyncWithHttpInfo(interactionType, name, loggedInUserId, accessToken, clientToken, associationId, description, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create interaction category Creates a interaction category. Returns the created interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionType">Interaction Type</param>
        /// <param name="name">Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="associationId">associationId (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> CreateInteractionCategoryAsyncWithHttpInfo (string interactionType, string name, string loggedInUserId, string accessToken, string clientToken, long? associationId = null, string description = null, string fields = null)
        {
            // verify the required parameter 'interactionType' is set
            if (interactionType == null)
                throw new ApiException(400, "Missing required parameter 'interactionType' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->CreateInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->CreateInteractionCategory");

            var localVarPath = "/interactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (associationId != null) localVarFormParams.Add("associationId", Configuration.ApiClient.ParameterToString(associationId)); // form parameter
            if (interactionType != null) localVarFormParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Delete interaction Allows the user to delete a interaction. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction DeleteInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = DeleteInteractionWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete interaction Allows the user to delete a interaction. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > DeleteInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Delete interaction Allows the user to delete a interaction. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> DeleteInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await DeleteInteractionAsyncWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete interaction Allows the user to delete a interaction. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> DeleteInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Delete interaction category Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        public VerveResponseInteractionCategory DeleteInteractionCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = DeleteInteractionCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete interaction category Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        public ApiResponse< VerveResponseInteractionCategory > DeleteInteractionCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteInteractionCategory");

            var localVarPath = "/interactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Delete interaction category Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategory> DeleteInteractionCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = await DeleteInteractionCategoryAsyncWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete interaction category Allows the user to delete the interaction category. Returns the deleted interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> DeleteInteractionCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteInteractionCategory");

            var localVarPath = "/interactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Delete response Allows the user to delete an response. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse DeleteResponse (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = DeleteResponseWithHttpInfo(responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete response Allows the user to delete an response. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > DeleteResponseWithHttpInfo (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteResponse");

            var localVarPath = "/interactions/responses/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Delete response Allows the user to delete an response. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> DeleteResponseAsync (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await DeleteResponseAsyncWithHttpInfo(responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete response Allows the user to delete an response. Returns the deleted response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> DeleteResponseAsyncWithHttpInfo (long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DeleteResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DeleteResponse");

            var localVarPath = "/interactions/responses/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Dislike response Allows the user to dislike the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse DislikeResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = DislikeResponseWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dislike response Allows the user to dislike the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > DislikeResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DislikeResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/dislike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DislikeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Dislike response Allows the user to dislike the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> DislikeResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await DislikeResponseAsyncWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dislike response Allows the user to dislike the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> DislikeResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->DislikeResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->DislikeResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/dislike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DislikeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Get list of interactions shared by friends Returns the list of interactions shared by friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetFriendsInteractions (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetFriendsInteractionsWithHttpInfo(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, categoryId, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of interactions shared by friends Returns the list of interactions shared by friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetFriendsInteractionsWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetFriendsInteractions");

            var localVarPath = "/interactions/friends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendsInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of interactions shared by friends Returns the list of interactions shared by friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetFriendsInteractionsAsync (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetFriendsInteractionsAsyncWithHttpInfo(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, categoryId, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of interactions shared by friends Returns the list of interactions shared by friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetFriendsInteractionsAsyncWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, long? categoryId = null, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetFriendsInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetFriendsInteractions");

            var localVarPath = "/interactions/friends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendsInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get interaction by id Returns the interaction by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction GetInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = GetInteractionWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get interaction by id Returns the interaction by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > GetInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Get interaction by id Returns the interaction by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> GetInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await GetInteractionAsyncWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get interaction by id Returns the interaction by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> GetInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Get the list of interaction categories Returns the list of interaction categories
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategoryList</returns>
        public VerveResponseInteractionCategoryList GetInteractionCategories (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategoryList> localVarResponse = GetInteractionCategoriesWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of interaction categories Returns the list of interaction categories
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategoryList</returns>
        public ApiResponse< VerveResponseInteractionCategoryList > GetInteractionCategoriesWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteractionCategories");

            var localVarPath = "/interactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategoryList)));
            
        }

        /// <summary>
        /// Get the list of interaction categories Returns the list of interaction categories
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategoryList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategoryList> GetInteractionCategoriesAsync (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategoryList> localVarResponse = await GetInteractionCategoriesAsyncWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of interaction categories Returns the list of interaction categories
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategoryList>> GetInteractionCategoriesAsyncWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteractionCategories");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteractionCategories");

            var localVarPath = "/interactions/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategoryList)));
            
        }

        /// <summary>
        /// Get list of all interactions visible to the user Returns the list of all interactions visible to the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetInteractionsForUser (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetInteractionsForUserWithHttpInfo(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all interactions visible to the user Returns the list of all interactions visible to the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetInteractionsForUserWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteractionsForUser");

            var localVarPath = "/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of all interactions visible to the user Returns the list of all interactions visible to the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetInteractionsForUserAsync (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetInteractionsForUserAsyncWithHttpInfo(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all interactions visible to the user Returns the list of all interactions visible to the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetInteractionsForUserAsyncWithHttpInfo (string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetInteractionsForUser");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetInteractionsForUser");

            var localVarPath = "/interactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of recommended interactions Returns the list of recommended interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetRecommendInteractions (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetRecommendInteractionsWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of recommended interactions Returns the list of recommended interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetRecommendInteractionsWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendInteractions");

            var localVarPath = "/interactions/recommend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of recommended interactions Returns the list of recommended interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetRecommendInteractionsAsync (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetRecommendInteractionsAsyncWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of recommended interactions Returns the list of recommended interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetRecommendInteractionsAsyncWithHttpInfo (int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendInteractions");

            var localVarPath = "/interactions/recommend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of recommended interactions from DB Returns the list of recommended interactions from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetRecommendedInteractinsFromDB (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetRecommendedInteractinsFromDBWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of recommended interactions from DB Returns the list of recommended interactions from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetRecommendedInteractinsFromDBWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendedInteractinsFromDB");

            var localVarPath = "/interactions/{userId}/recommendedInteractions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedInteractinsFromDB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of recommended interactions from DB Returns the list of recommended interactions from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetRecommendedInteractinsFromDBAsync (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetRecommendedInteractinsFromDBAsyncWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of recommended interactions from DB Returns the list of recommended interactions from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetRecommendedInteractinsFromDBAsyncWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendedInteractinsFromDB");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendedInteractinsFromDB");

            var localVarPath = "/interactions/{userId}/recommendedInteractions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedInteractinsFromDB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of recommended Users from DB Returns the list of recommended users from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>VerveResponseUserList</returns>
        public VerveResponseUserList GetRecommendedUsersFromDB (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseUserList> localVarResponse = GetRecommendedUsersFromDBWithHttpInfo(interactionId, start, end, loggedInUserId, accessToken, clientToken, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of recommended Users from DB Returns the list of recommended users from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>ApiResponse of VerveResponseUserList</returns>
        public ApiResponse< VerveResponseUserList > GetRecommendedUsersFromDBWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendedUsersFromDB");

            var localVarPath = "/interactions/{interactionId}/recommendedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedUsersFromDB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserList)));
            
        }

        /// <summary>
        /// Get list of recommended Users from DB Returns the list of recommended users from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>Task of VerveResponseUserList</returns>
        public async System.Threading.Tasks.Task<VerveResponseUserList> GetRecommendedUsersFromDBAsync (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseUserList> localVarResponse = await GetRecommendedUsersFromDBAsyncWithHttpInfo(interactionId, start, end, loggedInUserId, accessToken, clientToken, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of recommended Users from DB Returns the list of recommended users from DB
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseUserList>> GetRecommendedUsersFromDBAsyncWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string association = null, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetRecommendedUsersFromDB");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetRecommendedUsersFromDB");

            var localVarPath = "/interactions/{interactionId}/recommendedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedUsersFromDB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserList)));
            
        }

        /// <summary>
        /// Get list of responses by interactionId Returns the list of responses by interactionId
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponseList</returns>
        public VerveResponseInteractionResponseList GetResponses (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponseList> localVarResponse = GetResponsesWithHttpInfo(interactionId, start, end, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of responses by interactionId Returns the list of responses by interactionId
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponseList</returns>
        public ApiResponse< VerveResponseInteractionResponseList > GetResponsesWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetResponses");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetResponses");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetResponses");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetResponses");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetResponses");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetResponses");

            var localVarPath = "/interactions/{interactionId}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponseList)));
            
        }

        /// <summary>
        /// Get list of responses by interactionId Returns the list of responses by interactionId
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponseList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponseList> GetResponsesAsync (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponseList> localVarResponse = await GetResponsesAsyncWithHttpInfo(interactionId, start, end, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of responses by interactionId Returns the list of responses by interactionId
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponseList>> GetResponsesAsyncWithHttpInfo (long? interactionId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->GetResponses");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetResponses");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetResponses");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetResponses");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetResponses");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetResponses");

            var localVarPath = "/interactions/{interactionId}/responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponseList)));
            
        }

        /// <summary>
        /// Get list of interactions shared by user Returns the list of interactions shared by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetUserInteractions (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetUserInteractionsWithHttpInfo(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of interactions shared by user Returns the list of interactions shared by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetUserInteractionsWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserInteractions");

            var localVarPath = "/interactions/{userId}/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of interactions shared by user Returns the list of interactions shared by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetUserInteractionsAsync (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetUserInteractionsAsyncWithHttpInfo(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of interactions shared by user Returns the list of interactions shared by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetUserInteractionsAsyncWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserInteractions");

            var localVarPath = "/interactions/{userId}/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of interaction categories subscribed by the user Returns the list of interaction categories subscribed by the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategoryList</returns>
        public VerveResponseInteractionCategoryList GetUserSubscribedInteractionCategories (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategoryList> localVarResponse = GetUserSubscribedInteractionCategoriesWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of interaction categories subscribed by the user Returns the list of interaction categories subscribed by the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategoryList</returns>
        public ApiResponse< VerveResponseInteractionCategoryList > GetUserSubscribedInteractionCategoriesWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserSubscribedInteractionCategories");

            var localVarPath = "/interactions/categories/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedInteractionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategoryList)));
            
        }

        /// <summary>
        /// Get list of interaction categories subscribed by the user Returns the list of interaction categories subscribed by the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategoryList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategoryList> GetUserSubscribedInteractionCategoriesAsync (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategoryList> localVarResponse = await GetUserSubscribedInteractionCategoriesAsyncWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of interaction categories subscribed by the user Returns the list of interaction categories subscribed by the user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">interactionType (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategoryList>> GetUserSubscribedInteractionCategoriesAsyncWithHttpInfo (long? userId, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserSubscribedInteractionCategories");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserSubscribedInteractionCategories");

            var localVarPath = "/interactions/categories/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedInteractionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategoryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategoryList)));
            
        }

        /// <summary>
        /// Get list of interactions subscribed by user Returns the list of interactions subscribed by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList GetUserSubscribedInteractions (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = GetUserSubscribedInteractionsWithHttpInfo(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of interactions subscribed by user Returns the list of interactions subscribed by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > GetUserSubscribedInteractionsWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserSubscribedInteractions");

            var localVarPath = "/interactions/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of interactions subscribed by user Returns the list of interactions subscribed by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> GetUserSubscribedInteractionsAsync (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await GetUserSubscribedInteractionsAsyncWithHttpInfo(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of interactions subscribed by user Returns the list of interactions subscribed by specific user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> GetUserSubscribedInteractionsAsyncWithHttpInfo (long? userId, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, long? categoryId = null, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->GetUserSubscribedInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->GetUserSubscribedInteractions");

            var localVarPath = "/interactions/{userId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSubscribedInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Like response Allows the user to like the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse LikeResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = LikeResponseWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Like response Allows the user to like the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > LikeResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->LikeResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/like";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Like response Allows the user to like the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> LikeResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await LikeResponseAsyncWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Like response Allows the user to like the response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> LikeResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->LikeResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->LikeResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/like";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Mark response as a response Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse MarkAsAnResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = MarkAsAnResponseWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark response as a response Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > MarkAsAnResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->MarkAsAnResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/mark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAsAnResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Mark response as a response Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> MarkAsAnResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await MarkAsAnResponseAsyncWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark response as a response Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> MarkAsAnResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->MarkAsAnResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->MarkAsAnResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/mark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAsAnResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Get list of matching interactions Returns the list of matching interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionList</returns>
        public VerveResponseInteractionList SearchInteractions (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = SearchInteractionsWithHttpInfo(searchText, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of matching interactions Returns the list of matching interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionList</returns>
        public ApiResponse< VerveResponseInteractionList > SearchInteractionsWithHttpInfo (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SearchInteractions");

            var localVarPath = "/interactions/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Get list of matching interactions Returns the list of matching interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionList</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionList> SearchInteractionsAsync (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionList> localVarResponse = await SearchInteractionsAsyncWithHttpInfo(searchText, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, association, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of matching interactions Returns the list of matching interactions
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Search Text, keywords to search</param>
        /// <param name="interactionStatus">Interaction status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionList>> SearchInteractionsAsyncWithHttpInfo (string searchText, string interactionStatus, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string association = null, string fields = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'interactionStatus' is set
            if (interactionStatus == null)
                throw new ApiException(400, "Missing required parameter 'interactionStatus' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SearchInteractions");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SearchInteractions");

            var localVarPath = "/interactions/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (interactionStatus != null) localVarQueryParams.Add("interactionStatus", Configuration.ApiClient.ParameterToString(interactionStatus)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInteractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionList)));
            
        }

        /// <summary>
        /// Subscribe interaction category Returns the subscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        public VerveResponseInteractionCategory SubscribeInteractinCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = SubscribeInteractinCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe interaction category Returns the subscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        public ApiResponse< VerveResponseInteractionCategory > SubscribeInteractinCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SubscribeInteractinCategory");

            var localVarPath = "/interactions/categories/{categoryId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeInteractinCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Subscribe interaction category Returns the subscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategory> SubscribeInteractinCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = await SubscribeInteractinCategoryAsyncWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe interaction category Returns the subscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> SubscribeInteractinCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SubscribeInteractinCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SubscribeInteractinCategory");

            var localVarPath = "/interactions/categories/{categoryId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeInteractinCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Subscribe interaction Allows the user to subscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction SubscribeInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = SubscribeInteractionWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe interaction Allows the user to subscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > SubscribeInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SubscribeInteraction");

            var localVarPath = "/interactions/{interactionId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Subscribe interaction Allows the user to subscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> SubscribeInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await SubscribeInteractionAsyncWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe interaction Allows the user to subscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> SubscribeInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->SubscribeInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->SubscribeInteraction");

            var localVarPath = "/interactions/{interactionId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Unmark response as a response Unmarks the response. This will remove the marked response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse UnmarkAsAnResponse (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = UnmarkAsAnResponseWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmark response as a response Unmarks the response. This will remove the marked response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > UnmarkAsAnResponseWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnmarkAsAnResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/unmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkAsAnResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Unmark response as a response Unmarks the response. This will remove the marked response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> UnmarkAsAnResponseAsync (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await UnmarkAsAnResponseAsyncWithHttpInfo(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmark response as a response Unmarks the response. This will remove the marked response.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="responseId">responseId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> UnmarkAsAnResponseAsyncWithHttpInfo (long? interactionId, long? responseId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnmarkAsAnResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnmarkAsAnResponse");

            var localVarPath = "/interactions/{interactionId}/responses/{responseId}/unmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmarkAsAnResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Unsubscribe interaction category Returns the unsubscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        public VerveResponseInteractionCategory UnsubscribeInteractinCategory (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = UnsubscribeInteractinCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe interaction category Returns the unsubscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        public ApiResponse< VerveResponseInteractionCategory > UnsubscribeInteractinCategoryWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnsubscribeInteractinCategory");

            var localVarPath = "/interactions/categories/{categoryId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeInteractinCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Unsubscribe interaction category Returns the unsubscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategory> UnsubscribeInteractinCategoryAsync (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = await UnsubscribeInteractinCategoryAsyncWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe interaction category Returns the unsubscribed interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> UnsubscribeInteractinCategoryAsyncWithHttpInfo (long? categoryId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnsubscribeInteractinCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnsubscribeInteractinCategory");

            var localVarPath = "/interactions/categories/{categoryId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeInteractinCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Unsubscribe interaction Allows the user to unsubscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction UnsubscribeInteraction (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = UnsubscribeInteractionWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe interaction Allows the user to unsubscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > UnsubscribeInteractionWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnsubscribeInteraction");

            var localVarPath = "/interactions/{interactionId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Unsubscribe interaction Allows the user to unsubscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> UnsubscribeInteractionAsync (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await UnsubscribeInteractionAsyncWithHttpInfo(interactionId, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe interaction Allows the user to unsubscribe a interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> UnsubscribeInteractionAsyncWithHttpInfo (long? interactionId, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UnsubscribeInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UnsubscribeInteraction");

            var localVarPath = "/interactions/{interactionId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Update interaction Allows the user to update interaction. Returns the updated interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteraction</returns>
        public VerveResponseInteraction UpdateInteraction (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = UpdateInteractionWithHttpInfo(interactionId, interactionTitle, loggedInUserId, accessToken, clientToken, interactionDescription, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update interaction Allows the user to update interaction. Returns the updated interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteraction</returns>
        public ApiResponse< VerveResponseInteraction > UpdateInteractionWithHttpInfo (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'interactionTitle' is set
            if (interactionTitle == null)
                throw new ApiException(400, "Missing required parameter 'interactionTitle' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (interactionTitle != null) localVarFormParams.Add("interactionTitle", Configuration.ApiClient.ParameterToString(interactionTitle)); // form parameter
            if (interactionDescription != null) localVarFormParams.Add("interactionDescription", Configuration.ApiClient.ParameterToString(interactionDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Update interaction Allows the user to update interaction. Returns the updated interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteraction</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteraction> UpdateInteractionAsync (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null)
        {
             ApiResponse<VerveResponseInteraction> localVarResponse = await UpdateInteractionAsyncWithHttpInfo(interactionId, interactionTitle, loggedInUserId, accessToken, clientToken, interactionDescription, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update interaction Allows the user to update interaction. Returns the updated interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">interactionId</param>
        /// <param name="interactionTitle">Interaction Title</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionDescription">Describe Interaction (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)interactionType&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)interactionId&lt;br/&gt;2)interactionTitle&lt;br/&gt;3)interactionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfResponses&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity&lt;br/&gt;14)interactionType&lt;br/&gt;15)categoryId&lt;br/&gt;16)categoryName (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteraction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteraction>> UpdateInteractionAsyncWithHttpInfo (long? interactionId, string interactionTitle, string loggedInUserId, string accessToken, string clientToken, string interactionDescription = null, string fields = null)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'interactionTitle' is set
            if (interactionTitle == null)
                throw new ApiException(400, "Missing required parameter 'interactionTitle' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateInteraction");

            var localVarPath = "/interactions/{interactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (interactionTitle != null) localVarFormParams.Add("interactionTitle", Configuration.ApiClient.ParameterToString(interactionTitle)); // form parameter
            if (interactionDescription != null) localVarFormParams.Add("interactionDescription", Configuration.ApiClient.ParameterToString(interactionDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteraction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteraction)));
            
        }

        /// <summary>
        /// Update interaction category Allows the user to update the interaction category. Returns the updated interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>VerveResponseInteractionCategory</returns>
        public VerveResponseInteractionCategory UpdateInteractionCategory (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = UpdateInteractionCategoryWithHttpInfo(categoryId, categoryName, loggedInUserId, accessToken, clientToken, categoryDescription, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update interaction category Allows the user to update the interaction category. Returns the updated interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionCategory</returns>
        public ApiResponse< VerveResponseInteractionCategory > UpdateInteractionCategoryWithHttpInfo (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'categoryName' is set
            if (categoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryName' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateInteractionCategory");

            var localVarPath = "/interactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (categoryName != null) localVarFormParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("categoryDescription", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Update interaction category Allows the user to update the interaction category. Returns the updated interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionCategory</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionCategory> UpdateInteractionCategoryAsync (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null)
        {
             ApiResponse<VerveResponseInteractionCategory> localVarResponse = await UpdateInteractionCategoryAsyncWithHttpInfo(categoryId, categoryName, loggedInUserId, accessToken, clientToken, categoryDescription, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update interaction category Allows the user to update the interaction category. Returns the updated interaction category
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="categoryName">Category Name</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="categoryDescription">Describe category (optional)</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed&lt;br/&gt;6)interactionType (optional, default to categoryId,categoryName,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionCategory>> UpdateInteractionCategoryAsyncWithHttpInfo (long? categoryId, string categoryName, string loggedInUserId, string accessToken, string clientToken, string categoryDescription = null, string fields = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'categoryName' is set
            if (categoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryName' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateInteractionCategory");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateInteractionCategory");

            var localVarPath = "/interactions/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (categoryName != null) localVarFormParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("categoryDescription", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInteractionCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionCategory)));
            
        }

        /// <summary>
        /// Update response Allows the user to update an response. Returns the updated response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>VerveResponseInteractionResponse</returns>
        public VerveResponseInteractionResponse UpdateResponse (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = UpdateResponseWithHttpInfo(responseId, response, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update response Allows the user to update an response. Returns the updated response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>ApiResponse of VerveResponseInteractionResponse</returns>
        public ApiResponse< VerveResponseInteractionResponse > UpdateResponseWithHttpInfo (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateResponse");

            var localVarPath = "/interactions/responses/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (response != null) localVarFormParams.Add("response", Configuration.ApiClient.ParameterToString(response)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

        /// <summary>
        /// Update response Allows the user to update an response. Returns the updated response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of VerveResponseInteractionResponse</returns>
        public async System.Threading.Tasks.Task<VerveResponseInteractionResponse> UpdateResponseAsync (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
             ApiResponse<VerveResponseInteractionResponse> localVarResponse = await UpdateResponseAsyncWithHttpInfo(responseId, response, loggedInUserId, accessToken, clientToken, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update response Allows the user to update an response. Returns the updated response
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId">responseId</param>
        /// <param name="response">response</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionType&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)responseId&lt;br/&gt;2)responseDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)interactionId&lt;br/&gt;5)respondingUser&lt;br/&gt;6)isMarkedResponse&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked&lt;br/&gt;12)interactionType (optional, default to responseId,responseDescription,createdDate,interactionType)</param>
        /// <returns>Task of ApiResponse (VerveResponseInteractionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseInteractionResponse>> UpdateResponseAsyncWithHttpInfo (long? responseId, string response, string loggedInUserId, string accessToken, string clientToken, string fields = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling InteractionApi->UpdateResponse");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling InteractionApi->UpdateResponse");

            var localVarPath = "/interactions/responses/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseId != null) localVarPathParams.Add("responseId", Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (response != null) localVarFormParams.Add("response", Configuration.ApiClient.ParameterToString(response)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseInteractionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseInteractionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseInteractionResponse)));
            
        }

    }
}
