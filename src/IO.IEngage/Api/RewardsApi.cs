/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get list of top friends
        /// </summary>
        /// <remarks>
        /// Returns the list top friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPointsList</returns>
        VerveResponseUserPointsList GetTopFriends (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of top friends
        /// </summary>
        /// <remarks>
        /// Returns the list top friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPointsList</returns>
        ApiResponse<VerveResponseUserPointsList> GetTopFriendsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of top users
        /// </summary>
        /// <remarks>
        /// Returns the list of top users
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPointsList</returns>
        VerveResponseUserPointsList GetTopUsers (int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of top users
        /// </summary>
        /// <remarks>
        /// Returns the list of top users
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPointsList</returns>
        ApiResponse<VerveResponseUserPointsList> GetTopUsersWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of user points
        /// </summary>
        /// <remarks>
        /// Returns the list of user points
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPoints</returns>
        VerveResponseUserPoints GetUserPoints (long? userId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of user points
        /// </summary>
        /// <remarks>
        /// Returns the list of user points
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPoints</returns>
        ApiResponse<VerveResponseUserPoints> GetUserPointsWithHttpInfo (long? userId, string requesterId, string clientToken, string accessToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get list of top friends
        /// </summary>
        /// <remarks>
        /// Returns the list top friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPointsList</returns>
        System.Threading.Tasks.Task<VerveResponseUserPointsList> GetTopFriendsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of top friends
        /// </summary>
        /// <remarks>
        /// Returns the list top friends
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPointsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPointsList>> GetTopFriendsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of top users
        /// </summary>
        /// <remarks>
        /// Returns the list of top users
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPointsList</returns>
        System.Threading.Tasks.Task<VerveResponseUserPointsList> GetTopUsersAsync (int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of top users
        /// </summary>
        /// <remarks>
        /// Returns the list of top users
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPointsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPointsList>> GetTopUsersAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of user points
        /// </summary>
        /// <remarks>
        /// Returns the list of user points
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPoints</returns>
        System.Threading.Tasks.Task<VerveResponseUserPoints> GetUserPointsAsync (long? userId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of user points
        /// </summary>
        /// <remarks>
        /// Returns the list of user points
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPoints)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPoints>> GetUserPointsAsyncWithHttpInfo (long? userId, string requesterId, string clientToken, string accessToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RewardsApi : IRewardsApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RewardsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RewardsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get list of top friends Returns the list top friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPointsList</returns>
        public VerveResponseUserPointsList GetTopFriends (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPointsList> localVarResponse = GetTopFriendsWithHttpInfo(userId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of top friends Returns the list top friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPointsList</returns>
        public ApiResponse< VerveResponseUserPointsList > GetTopFriendsWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetTopFriends");

            var localVarPath = "/rewards/points/top/friends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopFriends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPointsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPointsList)));
            
        }

        /// <summary>
        /// Get list of top friends Returns the list top friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPointsList</returns>
        public async System.Threading.Tasks.Task<VerveResponseUserPointsList> GetTopFriendsAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPointsList> localVarResponse = await GetTopFriendsAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of top friends Returns the list top friends
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPointsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPointsList>> GetTopFriendsAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetTopFriends");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetTopFriends");

            var localVarPath = "/rewards/points/top/friends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopFriends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPointsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPointsList)));
            
        }

        /// <summary>
        /// Get list of top users Returns the list of top users
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPointsList</returns>
        public VerveResponseUserPointsList GetTopUsers (int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPointsList> localVarResponse = GetTopUsersWithHttpInfo(start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of top users Returns the list of top users
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPointsList</returns>
        public ApiResponse< VerveResponseUserPointsList > GetTopUsersWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetTopUsers");

            var localVarPath = "/rewards/points/top";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPointsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPointsList)));
            
        }

        /// <summary>
        /// Get list of top users Returns the list of top users
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPointsList</returns>
        public async System.Threading.Tasks.Task<VerveResponseUserPointsList> GetTopUsersAsync (int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPointsList> localVarResponse = await GetTopUsersAsyncWithHttpInfo(start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of top users Returns the list of top users
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPointsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPointsList>> GetTopUsersAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetTopUsers");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetTopUsers");

            var localVarPath = "/rewards/points/top";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPointsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPointsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPointsList)));
            
        }

        /// <summary>
        /// Get list of user points Returns the list of user points
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserPoints</returns>
        public VerveResponseUserPoints GetUserPoints (long? userId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPoints> localVarResponse = GetUserPointsWithHttpInfo(userId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of user points Returns the list of user points
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserPoints</returns>
        public ApiResponse< VerveResponseUserPoints > GetUserPointsWithHttpInfo (long? userId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RewardsApi->GetUserPoints");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetUserPoints");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetUserPoints");

            var localVarPath = "/rewards/points/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPoints) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPoints)));
            
        }

        /// <summary>
        /// Get list of user points Returns the list of user points
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserPoints</returns>
        public async System.Threading.Tasks.Task<VerveResponseUserPoints> GetUserPointsAsync (long? userId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserPoints> localVarResponse = await GetUserPointsAsyncWithHttpInfo(userId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of user points Returns the list of user points
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose points wants to get</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserPoints)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseUserPoints>> GetUserPointsAsyncWithHttpInfo (long? userId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RewardsApi->GetUserPoints");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling RewardsApi->GetUserPoints");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling RewardsApi->GetUserPoints");

            var localVarPath = "/rewards/points/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserPoints) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserPoints)));
            
        }

    }
}
