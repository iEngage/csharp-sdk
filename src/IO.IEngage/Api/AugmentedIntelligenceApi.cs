/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAugmentedIntelligenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Classifies using your classifier
        /// </summary>
        /// <remarks>
        /// Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseTextClassificationList</returns>
        VerveResponseTextClassificationList Classify (string text, long? id, string clientToken);

        /// <summary>
        /// Classifies using your classifier
        /// </summary>
        /// <remarks>
        /// Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseTextClassificationList</returns>
        ApiResponse<VerveResponseTextClassificationList> ClassifyWithHttpInfo (string text, long? id, string clientToken);
        /// <summary>
        /// Extracts entities from text
        /// </summary>
        /// <remarks>
        /// Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseEntitiesClassifiedList</returns>
        VerveResponseEntitiesClassifiedList GetEntities (long? id, string text, string clientToken);

        /// <summary>
        /// Extracts entities from text
        /// </summary>
        /// <remarks>
        /// Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseEntitiesClassifiedList</returns>
        ApiResponse<VerveResponseEntitiesClassifiedList> GetEntitiesWithHttpInfo (long? id, string text, string clientToken);
        /// <summary>
        /// Returns the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseFlowFinder</returns>
        VerveResponseFlowFinder GetInteractionType (string text, string clientToken);

        /// <summary>
        /// Returns the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseFlowFinder</returns>
        ApiResponse<VerveResponseFlowFinder> GetInteractionTypeWithHttpInfo (string text, string clientToken);
        /// <summary>
        /// Returns the keywords of the sentence
        /// </summary>
        /// <remarks>
        /// Extracts the keywords of a sentence. This could be used for example as tags.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseKeyword</returns>
        VerveResponseKeyword GetKeywords (string text, string clientToken);

        /// <summary>
        /// Returns the keywords of the sentence
        /// </summary>
        /// <remarks>
        /// Extracts the keywords of a sentence. This could be used for example as tags.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseKeyword</returns>
        ApiResponse<VerveResponseKeyword> GetKeywordsWithHttpInfo (string text, string clientToken);
        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseTagList</returns>
        VerveResponseTagList GetPopularTag (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseTagList</returns>
        ApiResponse<VerveResponseTagList> GetPopularTagWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseSentimentAnalytics</returns>
        VerveResponseSentimentAnalytics GetSentiment (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseSentimentAnalytics</returns>
        ApiResponse<VerveResponseSentimentAnalytics> GetSentimentWithHttpInfo (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseEntitySentimentList</returns>
        VerveResponseEntitySentimentList GetTagEntitySentiments (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseEntitySentimentList</returns>
        ApiResponse<VerveResponseEntitySentimentList> GetTagEntitySentimentsWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Analyzes the sentiment of the content
        /// </summary>
        /// <remarks>
        /// The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseSentiment</returns>
        VerveResponseSentiment Sentiment (string text, string clientToken);

        /// <summary>
        /// Analyzes the sentiment of the content
        /// </summary>
        /// <remarks>
        /// The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseSentiment</returns>
        ApiResponse<VerveResponseSentiment> SentimentWithHttpInfo (string text, string clientToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Classifies using your classifier
        /// </summary>
        /// <remarks>
        /// Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseTextClassificationList</returns>
        System.Threading.Tasks.Task<VerveResponseTextClassificationList> ClassifyAsync (string text, long? id, string clientToken);

        /// <summary>
        /// Classifies using your classifier
        /// </summary>
        /// <remarks>
        /// Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseTextClassificationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTextClassificationList>> ClassifyAsyncWithHttpInfo (string text, long? id, string clientToken);
        /// <summary>
        /// Extracts entities from text
        /// </summary>
        /// <remarks>
        /// Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseEntitiesClassifiedList</returns>
        System.Threading.Tasks.Task<VerveResponseEntitiesClassifiedList> GetEntitiesAsync (long? id, string text, string clientToken);

        /// <summary>
        /// Extracts entities from text
        /// </summary>
        /// <remarks>
        /// Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitiesClassifiedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitiesClassifiedList>> GetEntitiesAsyncWithHttpInfo (long? id, string text, string clientToken);
        /// <summary>
        /// Returns the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseFlowFinder</returns>
        System.Threading.Tasks.Task<VerveResponseFlowFinder> GetInteractionTypeAsync (string text, string clientToken);

        /// <summary>
        /// Returns the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseFlowFinder)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseFlowFinder>> GetInteractionTypeAsyncWithHttpInfo (string text, string clientToken);
        /// <summary>
        /// Returns the keywords of the sentence
        /// </summary>
        /// <remarks>
        /// Extracts the keywords of a sentence. This could be used for example as tags.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseKeyword</returns>
        System.Threading.Tasks.Task<VerveResponseKeyword> GetKeywordsAsync (string text, string clientToken);

        /// <summary>
        /// Returns the keywords of the sentence
        /// </summary>
        /// <remarks>
        /// Extracts the keywords of a sentence. This could be used for example as tags.
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseKeyword)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseKeyword>> GetKeywordsAsyncWithHttpInfo (string text, string clientToken);
        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseTagList</returns>
        System.Threading.Tasks.Task<VerveResponseTagList> GetPopularTagAsync (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseTagList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTagList>> GetPopularTagAsyncWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseSentimentAnalytics</returns>
        System.Threading.Tasks.Task<VerveResponseSentimentAnalytics> GetSentimentAsync (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseSentimentAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseSentimentAnalytics>> GetSentimentAsyncWithHttpInfo (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseEntitySentimentList</returns>
        System.Threading.Tasks.Task<VerveResponseEntitySentimentList> GetTagEntitySentimentsAsync (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null);

        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitySentimentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitySentimentList>> GetTagEntitySentimentsAsyncWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null);
        /// <summary>
        /// Analyzes the sentiment of the content
        /// </summary>
        /// <remarks>
        /// The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseSentiment</returns>
        System.Threading.Tasks.Task<VerveResponseSentiment> SentimentAsync (string text, string clientToken);

        /// <summary>
        /// Analyzes the sentiment of the content
        /// </summary>
        /// <remarks>
        /// The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseSentiment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseSentiment>> SentimentAsyncWithHttpInfo (string text, string clientToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AugmentedIntelligenceApi : IAugmentedIntelligenceApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AugmentedIntelligenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AugmentedIntelligenceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AugmentedIntelligenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AugmentedIntelligenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Classifies using your classifier Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseTextClassificationList</returns>
        public VerveResponseTextClassificationList Classify (string text, long? id, string clientToken)
        {
             ApiResponse<VerveResponseTextClassificationList> localVarResponse = ClassifyWithHttpInfo(text, id, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Classifies using your classifier Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseTextClassificationList</returns>
        public ApiResponse< VerveResponseTextClassificationList > ClassifyWithHttpInfo (string text, long? id, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->Classify");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AugmentedIntelligenceApi->Classify");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->Classify");

            var localVarPath = "/ml/classifier/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if(localVarHttpContentType != null)
            {
                localVarHeaderParams.Add("Content-Type", localVarHttpContentType);
            }
            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTextClassificationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTextClassificationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTextClassificationList)));
            
        }

        /// <summary>
        /// Classifies using your classifier Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseTextClassificationList</returns>
        public async System.Threading.Tasks.Task<VerveResponseTextClassificationList> ClassifyAsync (string text, long? id, string clientToken)
        {
             ApiResponse<VerveResponseTextClassificationList> localVarResponse = await ClassifyAsyncWithHttpInfo(text, id, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Classifies using your classifier Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text you want classified</param>
        /// <param name="id">Classifier ID from the Admin Panel</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseTextClassificationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTextClassificationList>> ClassifyAsyncWithHttpInfo (string text, long? id, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->Classify");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AugmentedIntelligenceApi->Classify");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->Classify");

            var localVarPath = "/ml/classifier/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTextClassificationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTextClassificationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTextClassificationList)));
            
        }

        /// <summary>
        /// Extracts entities from text Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseEntitiesClassifiedList</returns>
        public VerveResponseEntitiesClassifiedList GetEntities (long? id, string text, string clientToken)
        {
             ApiResponse<VerveResponseEntitiesClassifiedList> localVarResponse = GetEntitiesWithHttpInfo(id, text, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extracts entities from text Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseEntitiesClassifiedList</returns>
        public ApiResponse< VerveResponseEntitiesClassifiedList > GetEntitiesWithHttpInfo (long? id, string text, string clientToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AugmentedIntelligenceApi->GetEntities");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetEntities");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetEntities");

            var localVarPath = "/ml/ner/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (localVarHttpContentType != null)
                localVarHeaderParams.Add("Content-Type", localVarHttpContentType);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitiesClassifiedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitiesClassifiedList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitiesClassifiedList)));
            
        }

        /// <summary>
        /// Extracts entities from text Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseEntitiesClassifiedList</returns>
        public async System.Threading.Tasks.Task<VerveResponseEntitiesClassifiedList> GetEntitiesAsync (long? id, string text, string clientToken)
        {
             ApiResponse<VerveResponseEntitiesClassifiedList> localVarResponse = await GetEntitiesAsyncWithHttpInfo(id, text, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extracts entities from text Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">NER ID present from the Admin Panel</param>
        /// <param name="text">Text from which to extract entities</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitiesClassifiedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitiesClassifiedList>> GetEntitiesAsyncWithHttpInfo (long? id, string text, string clientToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AugmentedIntelligenceApi->GetEntities");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetEntities");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetEntities");

            var localVarPath = "/ml/ner/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitiesClassifiedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitiesClassifiedList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitiesClassifiedList)));
            
        }

        /// <summary>
        /// Returns the type of interaction Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseFlowFinder</returns>
        public VerveResponseFlowFinder GetInteractionType (string text, string clientToken)
        {
             ApiResponse<VerveResponseFlowFinder> localVarResponse = GetInteractionTypeWithHttpInfo(text, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the type of interaction Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseFlowFinder</returns>
        public ApiResponse< VerveResponseFlowFinder > GetInteractionTypeWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetInteractionType");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetInteractionType");

            var localVarPath = "/ml/interactionType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            if (localVarHttpContentType != null)
                localVarHeaderParams.Add("Content-Type", localVarHttpContentType);


            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseFlowFinder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseFlowFinder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseFlowFinder)));
            
        }

        /// <summary>
        /// Returns the type of interaction Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseFlowFinder</returns>
        public async System.Threading.Tasks.Task<VerveResponseFlowFinder> GetInteractionTypeAsync (string text, string clientToken)
        {
             ApiResponse<VerveResponseFlowFinder> localVarResponse = await GetInteractionTypeAsyncWithHttpInfo(text, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the type of interaction Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text that is to be classified by type</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseFlowFinder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseFlowFinder>> GetInteractionTypeAsyncWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetInteractionType");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetInteractionType");

            var localVarPath = "/ml/interactionType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseFlowFinder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseFlowFinder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseFlowFinder)));
            
        }

        /// <summary>
        /// Returns the keywords of the sentence Extracts the keywords of a sentence. This could be used for example as tags.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseKeyword</returns>
        public VerveResponseKeyword GetKeywords (string text, string clientToken)
        {
             ApiResponse<VerveResponseKeyword> localVarResponse = GetKeywordsWithHttpInfo(text, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the keywords of the sentence Extracts the keywords of a sentence. This could be used for example as tags.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseKeyword</returns>
        public ApiResponse< VerveResponseKeyword > GetKeywordsWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetKeywords");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetKeywords");

            var localVarPath = "/ml/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            if (localVarHttpContentType != null)
                localVarHeaderParams.Add("Content-Type", localVarHttpContentType);


            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseKeyword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseKeyword) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseKeyword)));
            
        }

        /// <summary>
        /// Returns the keywords of the sentence Extracts the keywords of a sentence. This could be used for example as tags.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseKeyword</returns>
        public async System.Threading.Tasks.Task<VerveResponseKeyword> GetKeywordsAsync (string text, string clientToken)
        {
             ApiResponse<VerveResponseKeyword> localVarResponse = await GetKeywordsAsyncWithHttpInfo(text, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the keywords of the sentence Extracts the keywords of a sentence. This could be used for example as tags.
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Content whose keywords are to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseKeyword)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseKeyword>> GetKeywordsAsyncWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetKeywords");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetKeywords");

            var localVarPath = "/ml/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseKeyword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseKeyword) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseKeyword)));
            
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseTagList</returns>
        public VerveResponseTagList GetPopularTag (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseTagList> localVarResponse = GetPopularTagWithHttpInfo(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseTagList</returns>
        public ApiResponse< VerveResponseTagList > GetPopularTagWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetPopularTag");

            var localVarPath = "/analytics/popular/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTagList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTagList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTagList)));
            
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseTagList</returns>
        public async System.Threading.Tasks.Task<VerveResponseTagList> GetPopularTagAsync (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseTagList> localVarResponse = await GetPopularTagAsyncWithHttpInfo(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="sentimentType">  /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseTagList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTagList>> GetPopularTagAsyncWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetPopularTag");

            var localVarPath = "/analytics/popular/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTagList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTagList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTagList)));
            
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseSentimentAnalytics</returns>
        public VerveResponseSentimentAnalytics GetSentiment (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseSentimentAnalytics> localVarResponse = GetSentimentWithHttpInfo(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseSentimentAnalytics</returns>
        public ApiResponse< VerveResponseSentimentAnalytics > GetSentimentWithHttpInfo (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetSentiment");

            var localVarPath = "/analytics/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentimentAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentimentAnalytics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentimentAnalytics)));
            
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseSentimentAnalytics</returns>
        public async System.Threading.Tasks.Task<VerveResponseSentimentAnalytics> GetSentimentAsync (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseSentimentAnalytics> localVarResponse = await GetSentimentAsyncWithHttpInfo(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">  /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseSentimentAnalytics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseSentimentAnalytics>> GetSentimentAsyncWithHttpInfo (long? startTime, long? endTime, string requesterId, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetSentiment");

            var localVarPath = "/analytics/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentimentAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentimentAnalytics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentimentAnalytics)));
            
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseEntitySentimentList</returns>
        public VerveResponseEntitySentimentList GetTagEntitySentiments (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseEntitySentimentList> localVarResponse = GetTagEntitySentimentsWithHttpInfo(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseEntitySentimentList</returns>
        public ApiResponse< VerveResponseEntitySentimentList > GetTagEntitySentimentsWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new ApiException(400, "Missing required parameter 'tagName' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");

            var localVarPath = "/analytics/tag/entitySentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tagName != null) localVarQueryParams.Add("tagName", Configuration.ApiClient.ParameterToString(tagName)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagEntitySentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitySentimentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitySentimentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitySentimentList)));
            
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseEntitySentimentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseEntitySentimentList> GetTagEntitySentimentsAsync (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null)
        {
             ApiResponse<VerveResponseEntitySentimentList> localVarResponse = await GetTagEntitySentimentsAsyncWithHttpInfo(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">  /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">  /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitySentimentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitySentimentList>> GetTagEntitySentimentsAsyncWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string requesterId, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null, string accessToken = null)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new ApiException(400, "Missing required parameter 'tagName' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");

            var localVarPath = "/analytics/tag/entitySentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tagName != null) localVarQueryParams.Add("tagName", Configuration.ApiClient.ParameterToString(tagName)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagEntitySentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitySentimentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitySentimentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitySentimentList)));
            
        }

        /// <summary>
        /// Analyzes the sentiment of the content The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseSentiment</returns>
        public VerveResponseSentiment Sentiment (string text, string clientToken)
        {
             ApiResponse<VerveResponseSentiment> localVarResponse = SentimentWithHttpInfo(text, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Analyzes the sentiment of the content The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseSentiment</returns>
        public ApiResponse< VerveResponseSentiment > SentimentWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->Sentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->Sentiment");

            var localVarPath = "/ml/sentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            if (localVarHttpContentType != null)
                localVarHeaderParams.Add("Content-Type", localVarHttpContentType);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentiment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentiment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentiment)));
            
        }

        /// <summary>
        /// Analyzes the sentiment of the content The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseSentiment</returns>
        public async System.Threading.Tasks.Task<VerveResponseSentiment> SentimentAsync (string text, string clientToken)
        {
             ApiResponse<VerveResponseSentiment> localVarResponse = await SentimentAsyncWithHttpInfo(text, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Analyzes the sentiment of the content The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Sentence whose sentiment is to be found out</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseSentiment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseSentiment>> SentimentAsyncWithHttpInfo (string text, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->Sentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->Sentiment");

            var localVarPath = "/ml/sentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentiment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentiment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentiment)));
            
        }

    }
}
