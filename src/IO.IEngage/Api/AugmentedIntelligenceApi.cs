/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAugmentedIntelligenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint or suggestion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseFlowFinder</returns>
        VerveResponseFlowFinder GetInteraction (string text, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint or suggestion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseFlowFinder</returns>
        ApiResponse<VerveResponseFlowFinder> GetInteractionWithHttpInfo (string text, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseTagList</returns>
        VerveResponseTagList GetPopularTag (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null);

        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseTagList</returns>
        ApiResponse<VerveResponseTagList> GetPopularTagWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null);
        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseSentimentAnalytics</returns>
        VerveResponseSentimentAnalytics GetSentiment (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null);

        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseSentimentAnalytics</returns>
        ApiResponse<VerveResponseSentimentAnalytics> GetSentimentWithHttpInfo (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null);
        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseEntitySentimentList</returns>
        VerveResponseEntitySentimentList GetTagEntitySentiments (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null);

        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseEntitySentimentList</returns>
        ApiResponse<VerveResponseEntitySentimentList> GetTagEntitySentimentsWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint or suggestion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseFlowFinder</returns>
        System.Threading.Tasks.Task<VerveResponseFlowFinder> GetInteractionAsync (string text, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Get the type of interaction
        /// </summary>
        /// <remarks>
        /// Classifies text to question, complaint or suggestion
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseFlowFinder)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseFlowFinder>> GetInteractionAsyncWithHttpInfo (string text, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseTagList</returns>
        System.Threading.Tasks.Task<VerveResponseTagList> GetPopularTagAsync (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null);

        /// <summary>
        /// Get list of popular tag of interactions
        /// </summary>
        /// <remarks>
        /// Return the most popular tag of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseTagList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseTagList>> GetPopularTagAsyncWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null);
        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseSentimentAnalytics</returns>
        System.Threading.Tasks.Task<VerveResponseSentimentAnalytics> GetSentimentAsync (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null);

        /// <summary>
        /// Get sentiment count of interactions
        /// </summary>
        /// <remarks>
        /// Returns the sum of the sentiment count of given interaction type
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseSentimentAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseSentimentAnalytics>> GetSentimentAsyncWithHttpInfo (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null);
        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseEntitySentimentList</returns>
        System.Threading.Tasks.Task<VerveResponseEntitySentimentList> GetTagEntitySentimentsAsync (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null);

        /// <summary>
        /// Get list of tag entity sentiment
        /// </summary>
        /// <remarks>
        /// Return the list of tag entity sentiments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitySentimentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitySentimentList>> GetTagEntitySentimentsAsyncWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AugmentedIntelligenceApi : IAugmentedIntelligenceApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AugmentedIntelligenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AugmentedIntelligenceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AugmentedIntelligenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AugmentedIntelligenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the type of interaction Classifies text to question, complaint or suggestion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseFlowFinder</returns>
        public VerveResponseFlowFinder GetInteraction (string text, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseFlowFinder> localVarResponse = GetInteractionWithHttpInfo(text, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the type of interaction Classifies text to question, complaint or suggestion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseFlowFinder</returns>
        public ApiResponse< VerveResponseFlowFinder > GetInteractionWithHttpInfo (string text, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetInteraction");

            var localVarPath = "/machineLearning/interactionType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseFlowFinder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseFlowFinder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseFlowFinder)));
            
        }

        /// <summary>
        /// Get the type of interaction Classifies text to question, complaint or suggestion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseFlowFinder</returns>
        public async System.Threading.Tasks.Task<VerveResponseFlowFinder> GetInteractionAsync (string text, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseFlowFinder> localVarResponse = await GetInteractionAsyncWithHttpInfo(text, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the type of interaction Classifies text to question, complaint or suggestion
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to be classified</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseFlowFinder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseFlowFinder>> GetInteractionAsyncWithHttpInfo (string text, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetInteraction");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetInteraction");

            var localVarPath = "/machineLearning/interactionType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseFlowFinder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseFlowFinder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseFlowFinder)));
            
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseTagList</returns>
        public VerveResponseTagList GetPopularTag (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseTagList> localVarResponse = GetPopularTagWithHttpInfo(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseTagList</returns>
        public ApiResponse< VerveResponseTagList > GetPopularTagWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetPopularTag");

            var localVarPath = "/analytics/popular/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTagList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTagList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTagList)));
            
        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseTagList</returns>
        public async System.Threading.Tasks.Task<VerveResponseTagList> GetPopularTagAsync (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseTagList> localVarResponse = await GetPopularTagAsyncWithHttpInfo(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of popular tag of interactions Return the most popular tag of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseTagList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseTagList>> GetPopularTagAsyncWithHttpInfo (long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string sentimentType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetPopularTag");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetPopularTag");

            var localVarPath = "/analytics/popular/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseTagList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseTagList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseTagList)));
            
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseSentimentAnalytics</returns>
        public VerveResponseSentimentAnalytics GetSentiment (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseSentimentAnalytics> localVarResponse = GetSentimentWithHttpInfo(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, association, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseSentimentAnalytics</returns>
        public ApiResponse< VerveResponseSentimentAnalytics > GetSentimentWithHttpInfo (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetSentiment");

            var localVarPath = "/analytics/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentimentAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentimentAnalytics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentimentAnalytics)));
            
        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseSentimentAnalytics</returns>
        public async System.Threading.Tasks.Task<VerveResponseSentimentAnalytics> GetSentimentAsync (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseSentimentAnalytics> localVarResponse = await GetSentimentAsyncWithHttpInfo(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, association, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sentiment count of interactions Returns the sum of the sentiment count of given interaction type
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseSentimentAnalytics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseSentimentAnalytics>> GetSentimentAsyncWithHttpInfo (long? startTime, long? endTime, string loggedInUserId, string accessToken, string clientToken, string interactionType = null, string additionalInformation = null, string association = null, long? categoryId = null)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetSentiment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetSentiment");

            var localVarPath = "/analytics/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseSentimentAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseSentimentAnalytics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseSentimentAnalytics)));
            
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>VerveResponseEntitySentimentList</returns>
        public VerveResponseEntitySentimentList GetTagEntitySentiments (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseEntitySentimentList> localVarResponse = GetTagEntitySentimentsWithHttpInfo(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of VerveResponseEntitySentimentList</returns>
        public ApiResponse< VerveResponseEntitySentimentList > GetTagEntitySentimentsWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new ApiException(400, "Missing required parameter 'tagName' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");

            var localVarPath = "/analytics/tag/entitySentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tagName != null) localVarQueryParams.Add("tagName", Configuration.ApiClient.ParameterToString(tagName)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagEntitySentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitySentimentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitySentimentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitySentimentList)));
            
        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of VerveResponseEntitySentimentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseEntitySentimentList> GetTagEntitySentimentsAsync (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null)
        {
             ApiResponse<VerveResponseEntitySentimentList> localVarResponse = await GetTagEntitySentimentsAsyncWithHttpInfo(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of tag entity sentiment Return the list of tag entity sentiments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">tag name</param>
        /// <param name="startTime">start time</param>
        /// <param name="endTime">end time</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="sentimentType">Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)</param>
        /// <param name="additionalInformation">additional information (optional)</param>
        /// <param name="association">association (optional)</param>
        /// <param name="interactionType">Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseEntitySentimentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseEntitySentimentList>> GetTagEntitySentimentsAsyncWithHttpInfo (string tagName, long? startTime, long? endTime, int? start, int? end, string loggedInUserId, string accessToken, string clientToken, string sentimentType = null, string additionalInformation = null, string association = null, string interactionType = null, long? categoryId = null)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new ApiException(400, "Missing required parameter 'tagName' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new ApiException(400, "Missing required parameter 'startTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new ApiException(400, "Missing required parameter 'endTime' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling AugmentedIntelligenceApi->GetTagEntitySentiments");

            var localVarPath = "/analytics/tag/entitySentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tagName != null) localVarQueryParams.Add("tagName", Configuration.ApiClient.ParameterToString(tagName)); // query parameter
            if (sentimentType != null) localVarQueryParams.Add("sentimentType", Configuration.ApiClient.ParameterToString(sentimentType)); // query parameter
            if (additionalInformation != null) localVarQueryParams.Add("additionalInformation", Configuration.ApiClient.ParameterToString(additionalInformation)); // query parameter
            if (association != null) localVarQueryParams.Add("association", Configuration.ApiClient.ParameterToString(association)); // query parameter
            if (interactionType != null) localVarQueryParams.Add("interactionType", Configuration.ApiClient.ParameterToString(interactionType)); // query parameter
            if (categoryId != null) localVarQueryParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagEntitySentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseEntitySentimentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseEntitySentimentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseEntitySentimentList)));
            
        }

    }
}
