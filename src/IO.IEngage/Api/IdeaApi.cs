/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.IEngage.Client;
using IO.IEngage.Model;

namespace IO.IEngage.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdeaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete comment. Returns the deleted comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment DeleteComment (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete comment. Returns the deleted comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> DeleteCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete idea
        /// </summary>
        /// <remarks>
        /// Allows the user to delete idea. Returns the deleted idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea DeleteIdea (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null);

        /// <summary>
        /// Delete idea
        /// </summary>
        /// <remarks>
        /// Allows the user to delete idea. Returns the deleted idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> DeleteIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null);
        /// <summary>
        /// Follow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to follow idea. Returns the followed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea FollowIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Follow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to follow idea. Returns the followed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> FollowIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of Ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetAllIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of Ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetAllIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas that users are following
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas being followed
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetFollowingIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas that users are following
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas being followed
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetFollowingIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas in group
        /// </summary>
        /// <remarks>
        /// Return the ideas list on group
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetGroupIdeas (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas in group
        /// </summary>
        /// <remarks>
        /// Return the ideas list on group
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetGroupIdeasWithHttpInfo (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get idea by id
        /// </summary>
        /// <remarks>
        /// Returns the idea by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea GetIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get idea by id
        /// </summary>
        /// <remarks>
        /// Returns the idea by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> GetIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of comments on idea
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        VerveResponseCommentList GetIdeaComment (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on idea
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        ApiResponse<VerveResponseCommentList> GetIdeaCommentWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of followers for this idea
        /// </summary>
        /// <remarks>
        /// Returns the list of followers
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserList</returns>
        VerveResponseUserList GetIdeaFollowers (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of followers for this idea
        /// </summary>
        /// <remarks>
        /// Returns the list of followers
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserList</returns>
        ApiResponse<VerveResponseUserList> GetIdeaFollowersWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get rating parameters of idea by user
        /// </summary>
        /// <remarks>
        /// Return the rating parameters of idea by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseString</returns>
        VerveResponseString GetIdeaRatingParameters (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get rating parameters of idea by user
        /// </summary>
        /// <remarks>
        /// Return the rating parameters of idea by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseString</returns>
        ApiResponse<VerveResponseString> GetIdeaRatingParametersWithHttpInfo (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of ideas that are rated by user 
        /// </summary>
        /// <remarks>
        /// Return the rated ideas list
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaUserRatingList</returns>
        VerveResponseIdeaUserRatingList GetIdeaRatings (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of ideas that are rated by user 
        /// </summary>
        /// <remarks>
        /// Return the rated ideas list
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaUserRatingList</returns>
        ApiResponse<VerveResponseIdeaUserRatingList> GetIdeaRatingsWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get the list of recommended ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended ideas 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetRecommendIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get the list of recommended ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended ideas 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetRecommendIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get the list of top ideas
        /// </summary>
        /// <remarks>
        /// Return the list of top ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetTopIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get the list of top ideas
        /// </summary>
        /// <remarks>
        /// Return the list of top ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetTopIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas shared by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetUserIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas shared by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetUserIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas rated by user
        /// </summary>
        /// <remarks>
        /// Return the list of ideas rated by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList GetUserRateIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas rated by user
        /// </summary>
        /// <remarks>
        /// Return the list of ideas rated by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> GetUserRateIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Rate an idea
        /// </summary>
        /// <remarks>
        /// Allows the user to rate an idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea RateIdea (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Rate an idea
        /// </summary>
        /// <remarks>
        /// Allows the user to rate an idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> RateIdeaWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Give rating on idea
        /// </summary>
        /// <remarks>
        /// Allows the user to give a rating on idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea RateIdea_0 (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Give rating on idea
        /// </summary>
        /// <remarks>
        /// Allows the user to give a rating on idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> RateIdea_0WithHttpInfo (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of matching ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of matching ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        VerveResponseIdeaList SearchIdeas (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of matching ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of matching ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        ApiResponse<VerveResponseIdeaList> SearchIdeasWithHttpInfo (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Share Idea with attachments
        /// </summary>
        /// <remarks>
        /// Allows the user to share idea with attachments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea ShareFormIdea (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Share Idea with attachments
        /// </summary>
        /// <remarks>
        /// Allows the user to share idea with attachments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> ShareFormIdeaWithHttpInfo (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Share idea  
        /// </summary>
        /// <remarks>
        /// This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea ShareIdea (string requesterId, string clientToken, Idea body = null, string accessToken = null);

        /// <summary>
        /// Share idea  
        /// </summary>
        /// <remarks>
        /// This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> ShareIdeaWithHttpInfo (string requesterId, string clientToken, Idea body = null, string accessToken = null);
        /// <summary>
        /// Comment on shared idea
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment ShareIdeaComment (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on shared idea
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> ShareIdeaCommentWithHttpInfo (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Unfollow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to unfollow idea. Returns the unfollowed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea UnfollowIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Unfollow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to unfollow idea. Returns the unfollowed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> UnfollowIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update comment. Returns the updated comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        VerveResponseComment UpdateCommet (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update comment. Returns the updated comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        ApiResponse<VerveResponseComment> UpdateCommetWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update idea
        /// </summary>
        /// <remarks>
        /// Allows the user to update idea. Returns the updated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        VerveResponseIdea UpdateIdea (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Update idea
        /// </summary>
        /// <remarks>
        /// Allows the user to update idea. Returns the updated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        ApiResponse<VerveResponseIdea> UpdateIdeaWithHttpInfo (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete comment. Returns the deleted comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> DeleteCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>
        /// Allows the user to delete comment. Returns the deleted comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Delete idea
        /// </summary>
        /// <remarks>
        /// Allows the user to delete idea. Returns the deleted idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> DeleteIdeaAsync (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null);

        /// <summary>
        /// Delete idea
        /// </summary>
        /// <remarks>
        /// Allows the user to delete idea. Returns the deleted idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> DeleteIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null);
        /// <summary>
        /// Follow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to follow idea. Returns the followed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> FollowIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Follow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to follow idea. Returns the followed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> FollowIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of Ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetAllIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of Ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetAllIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas that users are following
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas being followed
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetFollowingIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas that users are following
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas being followed
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetFollowingIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas in group
        /// </summary>
        /// <remarks>
        /// Return the ideas list on group
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetGroupIdeasAsync (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas in group
        /// </summary>
        /// <remarks>
        /// Return the ideas list on group
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetGroupIdeasAsyncWithHttpInfo (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get idea by id
        /// </summary>
        /// <remarks>
        /// Returns the idea by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> GetIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get idea by id
        /// </summary>
        /// <remarks>
        /// Returns the idea by id
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> GetIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of comments on idea
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        System.Threading.Tasks.Task<VerveResponseCommentList> GetIdeaCommentAsync (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of comments on idea
        /// </summary>
        /// <remarks>
        /// Returns the list of comments on idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetIdeaCommentAsyncWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of followers for this idea
        /// </summary>
        /// <remarks>
        /// Returns the list of followers
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserList</returns>
        System.Threading.Tasks.Task<VerveResponseUserList> GetIdeaFollowersAsync (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of followers for this idea
        /// </summary>
        /// <remarks>
        /// Returns the list of followers
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseUserList>> GetIdeaFollowersAsyncWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get rating parameters of idea by user
        /// </summary>
        /// <remarks>
        /// Return the rating parameters of idea by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseString</returns>
        System.Threading.Tasks.Task<VerveResponseString> GetIdeaRatingParametersAsync (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get rating parameters of idea by user
        /// </summary>
        /// <remarks>
        /// Return the rating parameters of idea by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseString)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseString>> GetIdeaRatingParametersAsyncWithHttpInfo (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get list of ideas that are rated by user 
        /// </summary>
        /// <remarks>
        /// Return the rated ideas list
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaUserRatingList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaUserRatingList> GetIdeaRatingsAsync (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Get list of ideas that are rated by user 
        /// </summary>
        /// <remarks>
        /// Return the rated ideas list
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaUserRatingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaUserRatingList>> GetIdeaRatingsAsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Get the list of recommended ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended ideas 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetRecommendIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get the list of recommended ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of recommended ideas 
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetRecommendIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get the list of top ideas
        /// </summary>
        /// <remarks>
        /// Return the list of top ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetTopIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get the list of top ideas
        /// </summary>
        /// <remarks>
        /// Return the list of top ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetTopIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas shared by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetUserIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas shared by user
        /// </summary>
        /// <remarks>
        /// Returns the list of ideas shared by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetUserIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of ideas rated by user
        /// </summary>
        /// <remarks>
        /// Return the list of ideas rated by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> GetUserRateIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of ideas rated by user
        /// </summary>
        /// <remarks>
        /// Return the list of ideas rated by user
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetUserRateIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Rate an idea
        /// </summary>
        /// <remarks>
        /// Allows the user to rate an idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> RateIdeaAsync (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Rate an idea
        /// </summary>
        /// <remarks>
        /// Allows the user to rate an idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> RateIdeaAsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Give rating on idea
        /// </summary>
        /// <remarks>
        /// Allows the user to give a rating on idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> RateIdea_0Async (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Give rating on idea
        /// </summary>
        /// <remarks>
        /// Allows the user to give a rating on idea. Returns the rated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> RateIdea_0AsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Get list of matching ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of matching ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        System.Threading.Tasks.Task<VerveResponseIdeaList> SearchIdeasAsync (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Get list of matching ideas
        /// </summary>
        /// <remarks>
        /// Returns the list of matching ideas
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> SearchIdeasAsyncWithHttpInfo (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Share Idea with attachments
        /// </summary>
        /// <remarks>
        /// Allows the user to share idea with attachments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> ShareFormIdeaAsync (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken);

        /// <summary>
        /// Share Idea with attachments
        /// </summary>
        /// <remarks>
        /// Allows the user to share idea with attachments
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> ShareFormIdeaAsyncWithHttpInfo (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken);
        /// <summary>
        /// Share idea  
        /// </summary>
        /// <remarks>
        /// This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> ShareIdeaAsync (string requesterId, string clientToken, Idea body = null, string accessToken = null);

        /// <summary>
        /// Share idea  
        /// </summary>
        /// <remarks>
        /// This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> ShareIdeaAsyncWithHttpInfo (string requesterId, string clientToken, Idea body = null, string accessToken = null);
        /// <summary>
        /// Comment on shared idea
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> ShareIdeaCommentAsync (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null);

        /// <summary>
        /// Comment on shared idea
        /// </summary>
        /// <remarks>
        /// This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> ShareIdeaCommentAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null);
        /// <summary>
        /// Unfollow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to unfollow idea. Returns the unfollowed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> UnfollowIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Unfollow idea
        /// </summary>
        /// <remarks>
        /// Allows the user to unfollow idea. Returns the unfollowed idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> UnfollowIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null);
        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update comment. Returns the updated comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        System.Threading.Tasks.Task<VerveResponseComment> UpdateCommetAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);

        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>
        /// Allows the user to update comment. Returns the updated comment
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> UpdateCommetAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null);
        /// <summary>
        /// Update idea
        /// </summary>
        /// <remarks>
        /// Allows the user to update idea. Returns the updated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        System.Threading.Tasks.Task<VerveResponseIdea> UpdateIdeaAsync (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null);

        /// <summary>
        /// Update idea
        /// </summary>
        /// <remarks>
        /// Allows the user to update idea. Returns the updated idea
        /// </remarks>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> UpdateIdeaAsyncWithHttpInfo (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdeaApi : IIdeaApi
    {
        private IO.IEngage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdeaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdeaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdeaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdeaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.IEngage.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.IEngage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete comment Allows the user to delete comment. Returns the deleted comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment DeleteComment (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = DeleteCommentWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete comment Allows the user to delete comment. Returns the deleted comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > DeleteCommentWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling IdeaApi->DeleteComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->DeleteComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->DeleteComment");

            var localVarPath = "/ideas/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete comment Allows the user to delete comment. Returns the deleted comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> DeleteCommentAsync (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await DeleteCommentAsyncWithHttpInfo(commentId, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete comment Allows the user to delete comment. Returns the deleted comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">Comment Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> DeleteCommentAsyncWithHttpInfo (long? commentId, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling IdeaApi->DeleteComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->DeleteComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->DeleteComment");

            var localVarPath = "/ideas/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Delete idea Allows the user to delete idea. Returns the deleted idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea DeleteIdea (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = DeleteIdeaWithHttpInfo(ideaId, requesterId, clientToken, file, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete idea Allows the user to delete idea. Returns the deleted idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > DeleteIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling IdeaApi->DeleteIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Delete idea Allows the user to delete idea. Returns the deleted idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> DeleteIdeaAsync (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await DeleteIdeaAsyncWithHttpInfo(ideaId, requesterId, clientToken, file, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete idea Allows the user to delete idea. Returns the deleted idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="file">file</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> DeleteIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, System.IO.Stream file, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->DeleteIdea");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling IdeaApi->DeleteIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Follow idea Allows the user to follow idea. Returns the followed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea FollowIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = FollowIdeaWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Follow idea Allows the user to follow idea. Returns the followed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > FollowIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->FollowIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->FollowIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->FollowIdea");

            var localVarPath = "/ideas/{ideaId}/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Follow idea Allows the user to follow idea. Returns the followed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> FollowIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await FollowIdeaAsyncWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Follow idea Allows the user to follow idea. Returns the followed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> FollowIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->FollowIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->FollowIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->FollowIdea");

            var localVarPath = "/ideas/{ideaId}/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Get list of Ideas Returns the list of ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetAllIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetAllIdeasWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of Ideas Returns the list of ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetAllIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetAllIdeas");

            var localVarPath = "/ideas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of Ideas Returns the list of ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetAllIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetAllIdeasAsyncWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of Ideas Returns the list of ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetAllIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetAllIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetAllIdeas");

            var localVarPath = "/ideas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas that users are following Returns the list of ideas being followed
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetFollowingIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetFollowingIdeasWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of ideas that users are following Returns the list of ideas being followed
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetFollowingIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetFollowingIdeas");

            var localVarPath = "/ideas/{userId}/following";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowingIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas that users are following Returns the list of ideas being followed
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetFollowingIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetFollowingIdeasAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of ideas that users are following Returns the list of ideas being followed
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id whose followed ideas want to get.</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetFollowingIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetFollowingIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetFollowingIdeas");

            var localVarPath = "/ideas/{userId}/following";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowingIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas in group Return the ideas list on group
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetGroupIdeas (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetGroupIdeasWithHttpInfo(userId, groupId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of ideas in group Return the ideas list on group
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetGroupIdeasWithHttpInfo (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetGroupIdeas");

            var localVarPath = "/ideas/getGroupIdeas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (groupId != null) localVarQueryParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas in group Return the ideas list on group
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetGroupIdeasAsync (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetGroupIdeasAsyncWithHttpInfo(userId, groupId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of ideas in group Return the ideas list on group
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="groupId">group Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetGroupIdeasAsyncWithHttpInfo (long? userId, long? groupId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetGroupIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetGroupIdeas");

            var localVarPath = "/ideas/getGroupIdeas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (groupId != null) localVarQueryParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get idea by id Returns the idea by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea GetIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = GetIdeaWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get idea by id Returns the idea by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > GetIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Get idea by id Returns the idea by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> GetIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await GetIdeaAsyncWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get idea by id Returns the idea by id
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> GetIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Get list of comments on idea Returns the list of comments on idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseCommentList</returns>
        public VerveResponseCommentList GetIdeaComment (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = GetIdeaCommentWithHttpInfo(ideaId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of comments on idea Returns the list of comments on idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseCommentList</returns>
        public ApiResponse< VerveResponseCommentList > GetIdeaCommentWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaComment");

            var localVarPath = "/ideas/{ideaId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of comments on idea Returns the list of comments on idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseCommentList</returns>
        public async System.Threading.Tasks.Task<VerveResponseCommentList> GetIdeaCommentAsync (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseCommentList> localVarResponse = await GetIdeaCommentAsyncWithHttpInfo(ideaId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of comments on idea Returns the list of comments on idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseCommentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseCommentList>> GetIdeaCommentAsyncWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaComment");

            var localVarPath = "/ideas/{ideaId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseCommentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseCommentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseCommentList)));
            
        }

        /// <summary>
        /// Get list of followers for this idea Returns the list of followers
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseUserList</returns>
        public VerveResponseUserList GetIdeaFollowers (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserList> localVarResponse = GetIdeaFollowersWithHttpInfo(ideaId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of followers for this idea Returns the list of followers
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseUserList</returns>
        public ApiResponse< VerveResponseUserList > GetIdeaFollowersWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaFollowers");

            var localVarPath = "/ideas/{ideaId}/followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserList)));
            
        }

        /// <summary>
        /// Get list of followers for this idea Returns the list of followers
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseUserList</returns>
        public async System.Threading.Tasks.Task<VerveResponseUserList> GetIdeaFollowersAsync (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseUserList> localVarResponse = await GetIdeaFollowersAsyncWithHttpInfo(ideaId, start, end, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of followers for this idea Returns the list of followers
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseUserList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseUserList>> GetIdeaFollowersAsyncWithHttpInfo (long? ideaId, int? start, int? end, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaFollowers");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaFollowers");

            var localVarPath = "/ideas/{ideaId}/followers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseUserList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseUserList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseUserList)));
            
        }

        /// <summary>
        /// Get rating parameters of idea by user Return the rating parameters of idea by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseString</returns>
        public VerveResponseString GetIdeaRatingParameters (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseString> localVarResponse = GetIdeaRatingParametersWithHttpInfo(userId, ideaStage, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get rating parameters of idea by user Return the rating parameters of idea by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseString</returns>
        public ApiResponse< VerveResponseString > GetIdeaRatingParametersWithHttpInfo (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaRatingParameters");

            var localVarPath = "/ideas/getIdeaRatingParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaRatingParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseString) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseString)));
            
        }

        /// <summary>
        /// Get rating parameters of idea by user Return the rating parameters of idea by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseString</returns>
        public async System.Threading.Tasks.Task<VerveResponseString> GetIdeaRatingParametersAsync (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseString> localVarResponse = await GetIdeaRatingParametersAsyncWithHttpInfo(userId, ideaStage, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get rating parameters of idea by user Return the rating parameters of idea by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseString>> GetIdeaRatingParametersAsyncWithHttpInfo (long? userId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaRatingParameters");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaRatingParameters");

            var localVarPath = "/ideas/getIdeaRatingParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaRatingParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseString) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseString)));
            
        }

        /// <summary>
        /// Get list of ideas that are rated by user  Return the rated ideas list
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaUserRatingList</returns>
        public VerveResponseIdeaUserRatingList GetIdeaRatings (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaUserRatingList> localVarResponse = GetIdeaRatingsWithHttpInfo(userId, ideaId, ideaStage, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of ideas that are rated by user  Return the rated ideas list
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaUserRatingList</returns>
        public ApiResponse< VerveResponseIdeaUserRatingList > GetIdeaRatingsWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaRatings");

            var localVarPath = "/ideas/getIdeaUserRating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaId != null) localVarQueryParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaRatings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaUserRatingList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaUserRatingList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaUserRatingList)));
            
        }

        /// <summary>
        /// Get list of ideas that are rated by user  Return the rated ideas list
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaUserRatingList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaUserRatingList> GetIdeaRatingsAsync (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaUserRatingList> localVarResponse = await GetIdeaRatingsAsyncWithHttpInfo(userId, ideaId, ideaStage, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of ideas that are rated by user  Return the rated ideas list
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaUserRatingList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaUserRatingList>> GetIdeaRatingsAsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetIdeaRatings");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetIdeaRatings");

            var localVarPath = "/ideas/getIdeaUserRating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaId != null) localVarQueryParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdeaRatings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaUserRatingList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaUserRatingList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaUserRatingList)));
            
        }

        /// <summary>
        /// Get the list of recommended ideas Returns the list of recommended ideas 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetRecommendIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetRecommendIdeasWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of recommended ideas Returns the list of recommended ideas 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetRecommendIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetRecommendIdeas");

            var localVarPath = "/ideas/recommend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get the list of recommended ideas Returns the list of recommended ideas 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetRecommendIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetRecommendIdeasAsyncWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of recommended ideas Returns the list of recommended ideas 
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetRecommendIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetRecommendIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetRecommendIdeas");

            var localVarPath = "/ideas/recommend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get the list of top ideas Return the list of top ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetTopIdeas (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetTopIdeasWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of top ideas Return the list of top ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetTopIdeasWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetTopIdeas");

            var localVarPath = "/ideas/top";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get the list of top ideas Return the list of top ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetTopIdeasAsync (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetTopIdeasAsyncWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of top ideas Return the list of top ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetTopIdeasAsyncWithHttpInfo (int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetTopIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetTopIdeas");

            var localVarPath = "/ideas/top";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas shared by user Returns the list of ideas shared by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetUserIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetUserIdeasWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of ideas shared by user Returns the list of ideas shared by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetUserIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetUserIdeas");

            var localVarPath = "/ideas/{userId}/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas shared by user Returns the list of ideas shared by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetUserIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetUserIdeasAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of ideas shared by user Returns the list of ideas shared by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose shared ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetUserIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetUserIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetUserIdeas");

            var localVarPath = "/ideas/{userId}/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas rated by user Return the list of ideas rated by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList GetUserRateIdeas (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = GetUserRateIdeasWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of ideas rated by user Return the list of ideas rated by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > GetUserRateIdeasWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetUserRateIdeas");

            var localVarPath = "/ideas/{userId}/rated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRateIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of ideas rated by user Return the list of ideas rated by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> GetUserRateIdeasAsync (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await GetUserRateIdeasAsyncWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of ideas rated by user Return the list of ideas rated by user
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId whose rated ideas want to get</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> GetUserRateIdeasAsyncWithHttpInfo (long? userId, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->GetUserRateIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->GetUserRateIdeas");

            var localVarPath = "/ideas/{userId}/rated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRateIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Rate an idea Allows the user to rate an idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea RateIdea (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = RateIdeaWithHttpInfo(userId, ideaId, ideaStage, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rate an idea Allows the user to rate an idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > RateIdeaWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->RateIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->RateIdea");

            var localVarPath = "/ideas/rateIdea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (ideaId != null) localVarFormParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // form parameter
            if (ideaStage != null) localVarFormParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RateIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Rate an idea Allows the user to rate an idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> RateIdeaAsync (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await RateIdeaAsyncWithHttpInfo(userId, ideaId, ideaStage, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rate an idea Allows the user to rate an idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> RateIdeaAsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->RateIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->RateIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->RateIdea");

            var localVarPath = "/ideas/rateIdea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (userId != null) localVarFormParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (ideaId != null) localVarFormParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // form parameter
            if (ideaStage != null) localVarFormParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RateIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Give rating on idea Allows the user to give a rating on idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea RateIdea_0 (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = RateIdea_0WithHttpInfo(userId, ideaId, ideaStage, parameter, rating, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Give rating on idea Allows the user to give a rating on idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > RateIdea_0WithHttpInfo (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'parameter' is set
            if (parameter == null)
                throw new ApiException(400, "Missing required parameter 'parameter' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'rating' is set
            if (rating == null)
                throw new ApiException(400, "Missing required parameter 'rating' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->RateIdea_0");

            var localVarPath = "/ideas/rateIdeaByParameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaId != null) localVarQueryParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (parameter != null) localVarQueryParams.Add("parameter", Configuration.ApiClient.ParameterToString(parameter)); // query parameter
            if (rating != null) localVarQueryParams.Add("rating", Configuration.ApiClient.ParameterToString(rating)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RateIdea_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Give rating on idea Allows the user to give a rating on idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> RateIdea_0Async (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await RateIdea_0AsyncWithHttpInfo(userId, ideaId, ideaStage, parameter, rating, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Give rating on idea Allows the user to give a rating on idea. Returns the rated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user Id</param>
        /// <param name="ideaId">idea Id</param>
        /// <param name="ideaStage"> /_* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  *_/</param>
        /// <param name="parameter">parameter</param>
        /// <param name="rating">rating</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> RateIdea_0AsyncWithHttpInfo (long? userId, long? ideaId, string ideaStage, string parameter, double? rating, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'ideaStage' is set
            if (ideaStage == null)
                throw new ApiException(400, "Missing required parameter 'ideaStage' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'parameter' is set
            if (parameter == null)
                throw new ApiException(400, "Missing required parameter 'parameter' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'rating' is set
            if (rating == null)
                throw new ApiException(400, "Missing required parameter 'rating' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->RateIdea_0");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->RateIdea_0");

            var localVarPath = "/ideas/rateIdeaByParameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ideaId != null) localVarQueryParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // query parameter
            if (ideaStage != null) localVarQueryParams.Add("ideaStage", Configuration.ApiClient.ParameterToString(ideaStage)); // query parameter
            if (parameter != null) localVarQueryParams.Add("parameter", Configuration.ApiClient.ParameterToString(parameter)); // query parameter
            if (rating != null) localVarQueryParams.Add("rating", Configuration.ApiClient.ParameterToString(rating)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RateIdea_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Get list of matching ideas Returns the list of matching ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdeaList</returns>
        public VerveResponseIdeaList SearchIdeas (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = SearchIdeasWithHttpInfo(searchText, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of matching ideas Returns the list of matching ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdeaList</returns>
        public ApiResponse< VerveResponseIdeaList > SearchIdeasWithHttpInfo (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->SearchIdeas");

            var localVarPath = "/ideas/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Get list of matching ideas Returns the list of matching ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdeaList</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdeaList> SearchIdeasAsync (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdeaList> localVarResponse = await SearchIdeasAsyncWithHttpInfo(searchText, start, end, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of matching ideas Returns the list of matching ideas
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Enter text to be searched</param>
        /// <param name="start">start, initial value start from 0</param>
        /// <param name="end">end</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdeaList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdeaList>> SearchIdeasAsyncWithHttpInfo (string searchText, int? start, int? end, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->SearchIdeas");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->SearchIdeas");

            var localVarPath = "/ideas/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchIdeas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdeaList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdeaList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdeaList)));
            
        }

        /// <summary>
        /// Share Idea with attachments Allows the user to share idea with attachments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea ShareFormIdea (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = ShareFormIdeaWithHttpInfo(title, description, groupId, file, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share Idea with attachments Allows the user to share idea with attachments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > ShareFormIdeaWithHttpInfo (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareFormIdea");

            var localVarPath = "/ideas/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (groupId != null) localVarFormParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareFormIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Share Idea with attachments Allows the user to share idea with attachments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> ShareFormIdeaAsync (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await ShareFormIdeaAsyncWithHttpInfo(title, description, groupId, file, loggedInUserId, accessToken, clientToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share Idea with attachments Allows the user to share idea with attachments
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="groupId">groupId</param>
        /// <param name="file">file</param>
        /// <param name="loggedInUserId">User id of logged / authenticated user</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> ShareFormIdeaAsyncWithHttpInfo (string title, string description, string groupId, System.IO.Stream file, string loggedInUserId, string accessToken, string clientToken)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'loggedInUserId' is set
            if (loggedInUserId == null)
                throw new ApiException(400, "Missing required parameter 'loggedInUserId' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling IdeaApi->ShareFormIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareFormIdea");

            var localVarPath = "/ideas/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loggedInUserId != null) localVarHeaderParams.Add("loggedInUserId", Configuration.ApiClient.ParameterToString(loggedInUserId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (groupId != null) localVarFormParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareFormIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Share idea   This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea ShareIdea (string requesterId, string clientToken, Idea body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = ShareIdeaWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share idea   This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > ShareIdeaWithHttpInfo (string requesterId, string clientToken, Idea body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->ShareIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareIdea");

            var localVarPath = "/ideas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Share idea   This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> ShareIdeaAsync (string requesterId, string clientToken, Idea body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await ShareIdeaAsyncWithHttpInfo(requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share idea   This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  /_*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> ShareIdeaAsyncWithHttpInfo (string requesterId, string clientToken, Idea body = null, string accessToken = null)
        {
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->ShareIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareIdea");

            var localVarPath = "/ideas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Comment on shared idea This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment ShareIdeaComment (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = ShareIdeaCommentWithHttpInfo(ideaId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Comment on shared idea This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > ShareIdeaCommentWithHttpInfo (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->ShareIdeaComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->ShareIdeaComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareIdeaComment");

            var localVarPath = "/ideas/{ideaId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareIdeaComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Comment on shared idea This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> ShareIdeaCommentAsync (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await ShareIdeaCommentAsyncWithHttpInfo(ideaId, requesterId, clientToken, body, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Comment on shared idea This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. /_* **Required fields**     1. ideaId (Path Parameter)     2. commentText  *_/
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="body"> (optional)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> ShareIdeaCommentAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, Comment body = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->ShareIdeaComment");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->ShareIdeaComment");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->ShareIdeaComment");

            var localVarPath = "/ideas/{ideaId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareIdeaComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Unfollow idea Allows the user to unfollow idea. Returns the unfollowed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea UnfollowIdea (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = UnfollowIdeaWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unfollow idea Allows the user to unfollow idea. Returns the unfollowed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > UnfollowIdeaWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->UnfollowIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UnfollowIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UnfollowIdea");

            var localVarPath = "/ideas/{ideaId}/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Unfollow idea Allows the user to unfollow idea. Returns the unfollowed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> UnfollowIdeaAsync (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await UnfollowIdeaAsyncWithHttpInfo(ideaId, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unfollow idea Allows the user to unfollow idea. Returns the unfollowed idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">idea Id</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> UnfollowIdeaAsyncWithHttpInfo (long? ideaId, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->UnfollowIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UnfollowIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UnfollowIdea");

            var localVarPath = "/ideas/{ideaId}/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Update comment Allows the user to update comment. Returns the updated comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseComment</returns>
        public VerveResponseComment UpdateCommet (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = UpdateCommetWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update comment Allows the user to update comment. Returns the updated comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseComment</returns>
        public ApiResponse< VerveResponseComment > UpdateCommetWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UpdateCommet");

            var localVarPath = "/ideas/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCommet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Update comment Allows the user to update comment. Returns the updated comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseComment</returns>
        public async System.Threading.Tasks.Task<VerveResponseComment> UpdateCommetAsync (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
             ApiResponse<VerveResponseComment> localVarResponse = await UpdateCommetAsyncWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update comment Allows the user to update comment. Returns the updated comment
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">commentId</param>
        /// <param name="commentText">Comment text</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseComment>> UpdateCommetAsyncWithHttpInfo (long? commentId, string commentText, string requesterId, string clientToken, string accessToken = null)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'commentText' is set
            if (commentText == null)
                throw new ApiException(400, "Missing required parameter 'commentText' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UpdateCommet");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UpdateCommet");

            var localVarPath = "/ideas/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (commentText != null) localVarFormParams.Add("commentText", Configuration.ApiClient.ParameterToString(commentText)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCommet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseComment)));
            
        }

        /// <summary>
        /// Update idea Allows the user to update idea. Returns the updated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>VerveResponseIdea</returns>
        public VerveResponseIdea UpdateIdea (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = UpdateIdeaWithHttpInfo(ideaId, ideaTitle, ideaDescription, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update idea Allows the user to update idea. Returns the updated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>ApiResponse of VerveResponseIdea</returns>
        public ApiResponse< VerveResponseIdea > UpdateIdeaWithHttpInfo (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'ideaTitle' is set
            if (ideaTitle == null)
                throw new ApiException(400, "Missing required parameter 'ideaTitle' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'ideaDescription' is set
            if (ideaDescription == null)
                throw new ApiException(400, "Missing required parameter 'ideaDescription' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UpdateIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (ideaTitle != null) localVarFormParams.Add("ideaTitle", Configuration.ApiClient.ParameterToString(ideaTitle)); // form parameter
            if (ideaDescription != null) localVarFormParams.Add("ideaDescription", Configuration.ApiClient.ParameterToString(ideaDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

        /// <summary>
        /// Update idea Allows the user to update idea. Returns the updated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of VerveResponseIdea</returns>
        public async System.Threading.Tasks.Task<VerveResponseIdea> UpdateIdeaAsync (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
             ApiResponse<VerveResponseIdea> localVarResponse = await UpdateIdeaAsyncWithHttpInfo(ideaId, ideaTitle, ideaDescription, requesterId, clientToken, fields, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update idea Allows the user to update idea. Returns the updated idea
        /// </summary>
        /// <exception cref="IO.IEngage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaId">ideaId</param>
        /// <param name="ideaTitle">Idea Title</param>
        /// <param name="ideaDescription">Describe Idea</param>
        /// <param name="requesterId">requesterId can be user id OR email address.</param>
        /// <param name="clientToken">Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs</param>
        /// <param name="fields">Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)</param>
        /// <param name="accessToken">Unique session token for user. To get access token user will have to authenticate (optional)</param>
        /// <returns>Task of ApiResponse (VerveResponseIdea)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerveResponseIdea>> UpdateIdeaAsyncWithHttpInfo (long? ideaId, string ideaTitle, string ideaDescription, string requesterId, string clientToken, string fields = null, string accessToken = null)
        {
            // verify the required parameter 'ideaId' is set
            if (ideaId == null)
                throw new ApiException(400, "Missing required parameter 'ideaId' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'ideaTitle' is set
            if (ideaTitle == null)
                throw new ApiException(400, "Missing required parameter 'ideaTitle' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'ideaDescription' is set
            if (ideaDescription == null)
                throw new ApiException(400, "Missing required parameter 'ideaDescription' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'requesterId' is set
            if (requesterId == null)
                throw new ApiException(400, "Missing required parameter 'requesterId' when calling IdeaApi->UpdateIdea");
            // verify the required parameter 'clientToken' is set
            if (clientToken == null)
                throw new ApiException(400, "Missing required parameter 'clientToken' when calling IdeaApi->UpdateIdea");

            var localVarPath = "/ideas/{ideaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ideaId != null) localVarPathParams.Add("ideaId", Configuration.ApiClient.ParameterToString(ideaId)); // path parameter
            if (requesterId != null) localVarHeaderParams.Add("requesterId", Configuration.ApiClient.ParameterToString(requesterId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("accessToken", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (clientToken != null) localVarHeaderParams.Add("clientToken", Configuration.ApiClient.ParameterToString(clientToken)); // header parameter
            if (ideaTitle != null) localVarFormParams.Add("ideaTitle", Configuration.ApiClient.ParameterToString(ideaTitle)); // form parameter
            if (ideaDescription != null) localVarFormParams.Add("ideaDescription", Configuration.ApiClient.ParameterToString(ideaDescription)); // form parameter
            if (fields != null) localVarFormParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // form parameter

            // authentication (default) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerveResponseIdea>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerveResponseIdea) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerveResponseIdea)));
            
        }

    }
}
