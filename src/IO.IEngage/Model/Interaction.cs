/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Interaction
    /// </summary>
    [DataContract]
    public partial class Interaction :  IEquatable<Interaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Interaction" /> class.
        /// </summary>
        /// <param name="InteractionId">InteractionId.</param>
        /// <param name="InteractionTitle">InteractionTitle.</param>
        /// <param name="InteractionDescription">InteractionDescription.</param>
        /// <param name="InteractionType">InteractionType.</param>
        /// <param name="Issuer">Issuer.</param>
        /// <param name="NoOfResponses">NoOfResponses.</param>
        /// <param name="IsClosed">IsClosed (default to false).</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="LastUpdatedDate">LastUpdatedDate.</param>
        /// <param name="Association">Association.</param>
        /// <param name="VideoId">VideoId.</param>
        /// <param name="FileURL">FileURL.</param>
        /// <param name="FileEntityName">FileEntityName.</param>
        /// <param name="IsSubscribed">IsSubscribed (default to false).</param>
        /// <param name="Sentiment">Sentiment.</param>
        /// <param name="SentimentDetails">SentimentDetails.</param>
        /// <param name="SentimentWeightage">SentimentWeightage.</param>
        /// <param name="Entity">Entity.</param>
        /// <param name="AttachmentList">AttachmentList.</param>
        /// <param name="CategoryId">CategoryId.</param>
        /// <param name="CategoryName">CategoryName.</param>
        /// <param name="Score">Score.</param>
        public Interaction(long? InteractionId = null, string InteractionTitle = null, string InteractionDescription = null, string InteractionType = null, User Issuer = null, int? NoOfResponses = null, bool? IsClosed = null, DateTime? CreatedDate = null, DateTime? LastUpdatedDate = null, string Association = null, string VideoId = null, string FileURL = null, string FileEntityName = null, bool? IsSubscribed = null, string Sentiment = null, Sentiment SentimentDetails = null, double? SentimentWeightage = null, List<NER> Entity = null, List<Multimedia> AttachmentList = null, long? CategoryId = null, string CategoryName = null, double? Score = null)
        {
            this.InteractionId = InteractionId;
            this.InteractionTitle = InteractionTitle;
            this.InteractionDescription = InteractionDescription;
            this.InteractionType = InteractionType;
            this.Issuer = Issuer;
            this.NoOfResponses = NoOfResponses;
            // use default value if no "IsClosed" provided
            if (IsClosed == null)
            {
                this.IsClosed = false;
            }
            else
            {
                this.IsClosed = IsClosed;
            }
            this.CreatedDate = CreatedDate;
            this.LastUpdatedDate = LastUpdatedDate;
            this.Association = Association;
            this.VideoId = VideoId;
            this.FileURL = FileURL;
            this.FileEntityName = FileEntityName;
            // use default value if no "IsSubscribed" provided
            if (IsSubscribed == null)
            {
                this.IsSubscribed = false;
            }
            else
            {
                this.IsSubscribed = IsSubscribed;
            }
            this.Sentiment = Sentiment;
            this.SentimentDetails = SentimentDetails;
            this.SentimentWeightage = SentimentWeightage;
            this.Entity = Entity;
            this.AttachmentList = AttachmentList;
            this.CategoryId = CategoryId;
            this.CategoryName = CategoryName;
            this.Score = Score;
        }
        
        /// <summary>
        /// Gets or Sets InteractionId
        /// </summary>
        [DataMember(Name="interactionId", EmitDefaultValue=false)]
        public long? InteractionId { get; set; }
        /// <summary>
        /// Gets or Sets InteractionTitle
        /// </summary>
        [DataMember(Name="interactionTitle", EmitDefaultValue=false)]
        public string InteractionTitle { get; set; }
        /// <summary>
        /// Gets or Sets InteractionDescription
        /// </summary>
        [DataMember(Name="interactionDescription", EmitDefaultValue=false)]
        public string InteractionDescription { get; set; }
        /// <summary>
        /// Gets or Sets InteractionType
        /// </summary>
        [DataMember(Name="interactionType", EmitDefaultValue=false)]
        public string InteractionType { get; set; }
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public User Issuer { get; set; }
        /// <summary>
        /// Gets or Sets NoOfResponses
        /// </summary>
        [DataMember(Name="noOfResponses", EmitDefaultValue=false)]
        public int? NoOfResponses { get; set; }
        /// <summary>
        /// Gets or Sets IsClosed
        /// </summary>
        [DataMember(Name="isClosed", EmitDefaultValue=false)]
        public bool? IsClosed { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets LastUpdatedDate
        /// </summary>
        [DataMember(Name="lastUpdatedDate", EmitDefaultValue=false)]
        public DateTime? LastUpdatedDate { get; set; }
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }
        /// <summary>
        /// Gets or Sets VideoId
        /// </summary>
        [DataMember(Name="videoId", EmitDefaultValue=false)]
        public string VideoId { get; set; }
        /// <summary>
        /// Gets or Sets FileURL
        /// </summary>
        [DataMember(Name="fileURL", EmitDefaultValue=false)]
        public string FileURL { get; set; }
        /// <summary>
        /// Gets or Sets FileEntityName
        /// </summary>
        [DataMember(Name="fileEntityName", EmitDefaultValue=false)]
        public string FileEntityName { get; set; }
        /// <summary>
        /// Gets or Sets IsSubscribed
        /// </summary>
        [DataMember(Name="isSubscribed", EmitDefaultValue=false)]
        public bool? IsSubscribed { get; set; }
        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name="sentiment", EmitDefaultValue=false)]
        public string Sentiment { get; set; }
        /// <summary>
        /// Gets or Sets SentimentDetails
        /// </summary>
        [DataMember(Name="sentimentDetails", EmitDefaultValue=false)]
        public Sentiment SentimentDetails { get; set; }
        /// <summary>
        /// Gets or Sets SentimentWeightage
        /// </summary>
        [DataMember(Name="sentimentWeightage", EmitDefaultValue=false)]
        public double? SentimentWeightage { get; set; }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public List<NER> Entity { get; set; }
        /// <summary>
        /// Gets or Sets AttachmentList
        /// </summary>
        [DataMember(Name="attachmentList", EmitDefaultValue=false)]
        public List<Multimedia> AttachmentList { get; set; }
        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public long? CategoryId { get; set; }
        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Interaction {\n");
            sb.Append("  InteractionId: ").Append(InteractionId).Append("\n");
            sb.Append("  InteractionTitle: ").Append(InteractionTitle).Append("\n");
            sb.Append("  InteractionDescription: ").Append(InteractionDescription).Append("\n");
            sb.Append("  InteractionType: ").Append(InteractionType).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  NoOfResponses: ").Append(NoOfResponses).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  Association: ").Append(Association).Append("\n");
            sb.Append("  VideoId: ").Append(VideoId).Append("\n");
            sb.Append("  FileURL: ").Append(FileURL).Append("\n");
            sb.Append("  FileEntityName: ").Append(FileEntityName).Append("\n");
            sb.Append("  IsSubscribed: ").Append(IsSubscribed).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  SentimentDetails: ").Append(SentimentDetails).Append("\n");
            sb.Append("  SentimentWeightage: ").Append(SentimentWeightage).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  AttachmentList: ").Append(AttachmentList).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Interaction);
        }

        /// <summary>
        /// Returns true if Interaction instances are equal
        /// </summary>
        /// <param name="other">Instance of Interaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Interaction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InteractionId == other.InteractionId ||
                    this.InteractionId != null &&
                    this.InteractionId.Equals(other.InteractionId)
                ) && 
                (
                    this.InteractionTitle == other.InteractionTitle ||
                    this.InteractionTitle != null &&
                    this.InteractionTitle.Equals(other.InteractionTitle)
                ) && 
                (
                    this.InteractionDescription == other.InteractionDescription ||
                    this.InteractionDescription != null &&
                    this.InteractionDescription.Equals(other.InteractionDescription)
                ) && 
                (
                    this.InteractionType == other.InteractionType ||
                    this.InteractionType != null &&
                    this.InteractionType.Equals(other.InteractionType)
                ) && 
                (
                    this.Issuer == other.Issuer ||
                    this.Issuer != null &&
                    this.Issuer.Equals(other.Issuer)
                ) && 
                (
                    this.NoOfResponses == other.NoOfResponses ||
                    this.NoOfResponses != null &&
                    this.NoOfResponses.Equals(other.NoOfResponses)
                ) && 
                (
                    this.IsClosed == other.IsClosed ||
                    this.IsClosed != null &&
                    this.IsClosed.Equals(other.IsClosed)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.LastUpdatedDate == other.LastUpdatedDate ||
                    this.LastUpdatedDate != null &&
                    this.LastUpdatedDate.Equals(other.LastUpdatedDate)
                ) && 
                (
                    this.Association == other.Association ||
                    this.Association != null &&
                    this.Association.Equals(other.Association)
                ) && 
                (
                    this.VideoId == other.VideoId ||
                    this.VideoId != null &&
                    this.VideoId.Equals(other.VideoId)
                ) && 
                (
                    this.FileURL == other.FileURL ||
                    this.FileURL != null &&
                    this.FileURL.Equals(other.FileURL)
                ) && 
                (
                    this.FileEntityName == other.FileEntityName ||
                    this.FileEntityName != null &&
                    this.FileEntityName.Equals(other.FileEntityName)
                ) && 
                (
                    this.IsSubscribed == other.IsSubscribed ||
                    this.IsSubscribed != null &&
                    this.IsSubscribed.Equals(other.IsSubscribed)
                ) && 
                (
                    this.Sentiment == other.Sentiment ||
                    this.Sentiment != null &&
                    this.Sentiment.Equals(other.Sentiment)
                ) && 
                (
                    this.SentimentDetails == other.SentimentDetails ||
                    this.SentimentDetails != null &&
                    this.SentimentDetails.Equals(other.SentimentDetails)
                ) && 
                (
                    this.SentimentWeightage == other.SentimentWeightage ||
                    this.SentimentWeightage != null &&
                    this.SentimentWeightage.Equals(other.SentimentWeightage)
                ) && 
                (
                    this.Entity == other.Entity ||
                    this.Entity != null &&
                    this.Entity.SequenceEqual(other.Entity)
                ) && 
                (
                    this.AttachmentList == other.AttachmentList ||
                    this.AttachmentList != null &&
                    this.AttachmentList.SequenceEqual(other.AttachmentList)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.CategoryName == other.CategoryName ||
                    this.CategoryName != null &&
                    this.CategoryName.Equals(other.CategoryName)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InteractionId != null)
                    hash = hash * 59 + this.InteractionId.GetHashCode();
                if (this.InteractionTitle != null)
                    hash = hash * 59 + this.InteractionTitle.GetHashCode();
                if (this.InteractionDescription != null)
                    hash = hash * 59 + this.InteractionDescription.GetHashCode();
                if (this.InteractionType != null)
                    hash = hash * 59 + this.InteractionType.GetHashCode();
                if (this.Issuer != null)
                    hash = hash * 59 + this.Issuer.GetHashCode();
                if (this.NoOfResponses != null)
                    hash = hash * 59 + this.NoOfResponses.GetHashCode();
                if (this.IsClosed != null)
                    hash = hash * 59 + this.IsClosed.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.LastUpdatedDate != null)
                    hash = hash * 59 + this.LastUpdatedDate.GetHashCode();
                if (this.Association != null)
                    hash = hash * 59 + this.Association.GetHashCode();
                if (this.VideoId != null)
                    hash = hash * 59 + this.VideoId.GetHashCode();
                if (this.FileURL != null)
                    hash = hash * 59 + this.FileURL.GetHashCode();
                if (this.FileEntityName != null)
                    hash = hash * 59 + this.FileEntityName.GetHashCode();
                if (this.IsSubscribed != null)
                    hash = hash * 59 + this.IsSubscribed.GetHashCode();
                if (this.Sentiment != null)
                    hash = hash * 59 + this.Sentiment.GetHashCode();
                if (this.SentimentDetails != null)
                    hash = hash * 59 + this.SentimentDetails.GetHashCode();
                if (this.SentimentWeightage != null)
                    hash = hash * 59 + this.SentimentWeightage.GetHashCode();
                if (this.Entity != null)
                    hash = hash * 59 + this.Entity.GetHashCode();
                if (this.AttachmentList != null)
                    hash = hash * 59 + this.AttachmentList.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryName != null)
                    hash = hash * 59 + this.CategoryName.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
