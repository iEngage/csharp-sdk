/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Group
    /// </summary>
    [DataContract]
    public partial class Group :  IEquatable<Group>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        /// <param name="GroupId">GroupId.</param>
        /// <param name="GroupName">GroupName.</param>
        /// <param name="GroupType">GroupType.</param>
        /// <param name="Category">Category.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CurrentUserFollowing">CurrentUserFollowing (default to false).</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="DueDate">DueDate.</param>
        /// <param name="IdeasCount">IdeasCount.</param>
        /// <param name="FriendsIdeasCount">FriendsIdeasCount.</param>
        /// <param name="FollowersCount">FollowersCount.</param>
        /// <param name="ParticipantsCount">ParticipantsCount.</param>
        /// <param name="FriendsParticipantsCount">FriendsParticipantsCount.</param>
        public Group(long? GroupId = null, string GroupName = null, string GroupType = null, string Category = null, string Description = null, bool? CurrentUserFollowing = null, DateTime? StartDate = null, DateTime? DueDate = null, long? IdeasCount = null, long? FriendsIdeasCount = null, long? FollowersCount = null, long? ParticipantsCount = null, long? FriendsParticipantsCount = null)
        {
            this.GroupId = GroupId;
            this.GroupName = GroupName;
            this.GroupType = GroupType;
            this.Category = Category;
            this.Description = Description;
            // use default value if no "CurrentUserFollowing" provided
            if (CurrentUserFollowing == null)
            {
                this.CurrentUserFollowing = false;
            }
            else
            {
                this.CurrentUserFollowing = CurrentUserFollowing;
            }
            this.StartDate = StartDate;
            this.DueDate = DueDate;
            this.IdeasCount = IdeasCount;
            this.FriendsIdeasCount = FriendsIdeasCount;
            this.FollowersCount = FollowersCount;
            this.ParticipantsCount = ParticipantsCount;
            this.FriendsParticipantsCount = FriendsParticipantsCount;
        }
        
        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public long? GroupId { get; set; }
        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }
        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name="groupType", EmitDefaultValue=false)]
        public string GroupType { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CurrentUserFollowing
        /// </summary>
        [DataMember(Name="currentUserFollowing", EmitDefaultValue=false)]
        public bool? CurrentUserFollowing { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }
        /// <summary>
        /// Gets or Sets IdeasCount
        /// </summary>
        [DataMember(Name="ideasCount", EmitDefaultValue=false)]
        public long? IdeasCount { get; set; }
        /// <summary>
        /// Gets or Sets FriendsIdeasCount
        /// </summary>
        [DataMember(Name="friendsIdeasCount", EmitDefaultValue=false)]
        public long? FriendsIdeasCount { get; set; }
        /// <summary>
        /// Gets or Sets FollowersCount
        /// </summary>
        [DataMember(Name="followersCount", EmitDefaultValue=false)]
        public long? FollowersCount { get; set; }
        /// <summary>
        /// Gets or Sets ParticipantsCount
        /// </summary>
        [DataMember(Name="participantsCount", EmitDefaultValue=false)]
        public long? ParticipantsCount { get; set; }
        /// <summary>
        /// Gets or Sets FriendsParticipantsCount
        /// </summary>
        [DataMember(Name="friendsParticipantsCount", EmitDefaultValue=false)]
        public long? FriendsParticipantsCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Group {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CurrentUserFollowing: ").Append(CurrentUserFollowing).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  IdeasCount: ").Append(IdeasCount).Append("\n");
            sb.Append("  FriendsIdeasCount: ").Append(FriendsIdeasCount).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  ParticipantsCount: ").Append(ParticipantsCount).Append("\n");
            sb.Append("  FriendsParticipantsCount: ").Append(FriendsParticipantsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Group);
        }

        /// <summary>
        /// Returns true if Group instances are equal
        /// </summary>
        /// <param name="other">Instance of Group to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Group other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GroupId == other.GroupId ||
                    this.GroupId != null &&
                    this.GroupId.Equals(other.GroupId)
                ) && 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                ) && 
                (
                    this.GroupType == other.GroupType ||
                    this.GroupType != null &&
                    this.GroupType.Equals(other.GroupType)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CurrentUserFollowing == other.CurrentUserFollowing ||
                    this.CurrentUserFollowing != null &&
                    this.CurrentUserFollowing.Equals(other.CurrentUserFollowing)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.DueDate == other.DueDate ||
                    this.DueDate != null &&
                    this.DueDate.Equals(other.DueDate)
                ) && 
                (
                    this.IdeasCount == other.IdeasCount ||
                    this.IdeasCount != null &&
                    this.IdeasCount.Equals(other.IdeasCount)
                ) && 
                (
                    this.FriendsIdeasCount == other.FriendsIdeasCount ||
                    this.FriendsIdeasCount != null &&
                    this.FriendsIdeasCount.Equals(other.FriendsIdeasCount)
                ) && 
                (
                    this.FollowersCount == other.FollowersCount ||
                    this.FollowersCount != null &&
                    this.FollowersCount.Equals(other.FollowersCount)
                ) && 
                (
                    this.ParticipantsCount == other.ParticipantsCount ||
                    this.ParticipantsCount != null &&
                    this.ParticipantsCount.Equals(other.ParticipantsCount)
                ) && 
                (
                    this.FriendsParticipantsCount == other.FriendsParticipantsCount ||
                    this.FriendsParticipantsCount != null &&
                    this.FriendsParticipantsCount.Equals(other.FriendsParticipantsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GroupId != null)
                    hash = hash * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                if (this.GroupType != null)
                    hash = hash * 59 + this.GroupType.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CurrentUserFollowing != null)
                    hash = hash * 59 + this.CurrentUserFollowing.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.DueDate != null)
                    hash = hash * 59 + this.DueDate.GetHashCode();
                if (this.IdeasCount != null)
                    hash = hash * 59 + this.IdeasCount.GetHashCode();
                if (this.FriendsIdeasCount != null)
                    hash = hash * 59 + this.FriendsIdeasCount.GetHashCode();
                if (this.FollowersCount != null)
                    hash = hash * 59 + this.FollowersCount.GetHashCode();
                if (this.ParticipantsCount != null)
                    hash = hash * 59 + this.ParticipantsCount.GetHashCode();
                if (this.FriendsParticipantsCount != null)
                    hash = hash * 59 + this.FriendsParticipantsCount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
