/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Comment
    /// </summary>
    [DataContract]
    public partial class Comment :  IEquatable<Comment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comment" /> class.
        /// </summary>
        /// <param name="CommentId">CommentId.</param>
        /// <param name="Commentor">Commentor.</param>
        /// <param name="CommentText">CommentText.</param>
        /// <param name="CommentTime">CommentTime.</param>
        public Comment(long? CommentId = null, User Commentor = null, string CommentText = null, DateTime? CommentTime = null)
        {
            this.CommentId = CommentId;
            this.Commentor = Commentor;
            this.CommentText = CommentText;
            this.CommentTime = CommentTime;
        }
        
        /// <summary>
        /// Gets or Sets CommentId
        /// </summary>
        [DataMember(Name="commentId", EmitDefaultValue=false)]
        public long? CommentId { get; set; }
        /// <summary>
        /// Gets or Sets Commentor
        /// </summary>
        [DataMember(Name="commentor", EmitDefaultValue=false)]
        public User Commentor { get; set; }
        /// <summary>
        /// Gets or Sets CommentText
        /// </summary>
        [DataMember(Name="commentText", EmitDefaultValue=false)]
        public string CommentText { get; set; }
        /// <summary>
        /// Gets or Sets CommentTime
        /// </summary>
        [DataMember(Name="commentTime", EmitDefaultValue=false)]
        public DateTime? CommentTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Comment {\n");
            sb.Append("  CommentId: ").Append(CommentId).Append("\n");
            sb.Append("  Commentor: ").Append(Commentor).Append("\n");
            sb.Append("  CommentText: ").Append(CommentText).Append("\n");
            sb.Append("  CommentTime: ").Append(CommentTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Comment);
        }

        /// <summary>
        /// Returns true if Comment instances are equal
        /// </summary>
        /// <param name="other">Instance of Comment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Comment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CommentId == other.CommentId ||
                    this.CommentId != null &&
                    this.CommentId.Equals(other.CommentId)
                ) && 
                (
                    this.Commentor == other.Commentor ||
                    this.Commentor != null &&
                    this.Commentor.Equals(other.Commentor)
                ) && 
                (
                    this.CommentText == other.CommentText ||
                    this.CommentText != null &&
                    this.CommentText.Equals(other.CommentText)
                ) && 
                (
                    this.CommentTime == other.CommentTime ||
                    this.CommentTime != null &&
                    this.CommentTime.Equals(other.CommentTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CommentId != null)
                    hash = hash * 59 + this.CommentId.GetHashCode();
                if (this.Commentor != null)
                    hash = hash * 59 + this.Commentor.GetHashCode();
                if (this.CommentText != null)
                    hash = hash * 59 + this.CommentText.GetHashCode();
                if (this.CommentTime != null)
                    hash = hash * 59 + this.CommentTime.GetHashCode();
                return hash;
            }
        }
    }

}
