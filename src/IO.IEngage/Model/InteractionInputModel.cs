/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.IEngage.Model
{
    /// <summary>
    /// InteractionInputModel
    /// </summary>
    [DataContract]
    public partial class InteractionInputModel :  IEquatable<InteractionInputModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InteractionInputModel" /> class.
        /// </summary>
        /// <param name="InteractionTitle">InteractionTitle.</param>
        /// <param name="InteractionDescription">InteractionDescription.</param>
        /// <param name="InteractionType">InteractionType.</param>
        /// <param name="Association">Association.</param>
        /// <param name="CategoryId">CategoryId.</param>
        public InteractionInputModel(string InteractionTitle = null, string InteractionDescription = null, string InteractionType = null, string Association = null, long? CategoryId = null)
        {
            this.InteractionTitle = InteractionTitle;
            this.InteractionDescription = InteractionDescription;
            this.InteractionType = InteractionType;
            this.Association = Association;
            this.CategoryId = CategoryId;
        }
        
        /// <summary>
        /// Gets or Sets InteractionTitle
        /// </summary>
        [DataMember(Name="interactionTitle", EmitDefaultValue=false)]
        public string InteractionTitle { get; set; }
        /// <summary>
        /// Gets or Sets InteractionDescription
        /// </summary>
        [DataMember(Name="interactionDescription", EmitDefaultValue=false)]
        public string InteractionDescription { get; set; }
        /// <summary>
        /// Gets or Sets InteractionType
        /// </summary>
        [DataMember(Name="interactionType", EmitDefaultValue=false)]
        public string InteractionType { get; set; }
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }
        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public long? CategoryId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InteractionInputModel {\n");
            sb.Append("  InteractionTitle: ").Append(InteractionTitle).Append("\n");
            sb.Append("  InteractionDescription: ").Append(InteractionDescription).Append("\n");
            sb.Append("  InteractionType: ").Append(InteractionType).Append("\n");
            sb.Append("  Association: ").Append(Association).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InteractionInputModel);
        }

        /// <summary>
        /// Returns true if InteractionInputModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InteractionInputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InteractionInputModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InteractionTitle == other.InteractionTitle ||
                    this.InteractionTitle != null &&
                    this.InteractionTitle.Equals(other.InteractionTitle)
                ) && 
                (
                    this.InteractionDescription == other.InteractionDescription ||
                    this.InteractionDescription != null &&
                    this.InteractionDescription.Equals(other.InteractionDescription)
                ) && 
                (
                    this.InteractionType == other.InteractionType ||
                    this.InteractionType != null &&
                    this.InteractionType.Equals(other.InteractionType)
                ) && 
                (
                    this.Association == other.Association ||
                    this.Association != null &&
                    this.Association.Equals(other.Association)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InteractionTitle != null)
                    hash = hash * 59 + this.InteractionTitle.GetHashCode();
                if (this.InteractionDescription != null)
                    hash = hash * 59 + this.InteractionDescription.GetHashCode();
                if (this.InteractionType != null)
                    hash = hash * 59 + this.InteractionType.GetHashCode();
                if (this.Association != null)
                    hash = hash * 59 + this.Association.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                return hash;
            }
        }
    }

}
