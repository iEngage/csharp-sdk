/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// CommandInfo
    /// </summary>
    [DataContract]
    public partial class CommandInfo :  IEquatable<CommandInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandInfo" /> class.
        /// </summary>
        /// <param name="CommandClass">CommandClass.</param>
        /// <param name="CommandName">CommandName.</param>
        public CommandInfo(string CommandClass = null, string CommandName = null)
        {
            this.CommandClass = CommandClass;
            this.CommandName = CommandName;
        }
        
        /// <summary>
        /// Gets or Sets CommandClass
        /// </summary>
        [DataMember(Name="commandClass", EmitDefaultValue=false)]
        public string CommandClass { get; set; }
        /// <summary>
        /// Gets or Sets CommandName
        /// </summary>
        [DataMember(Name="commandName", EmitDefaultValue=false)]
        public string CommandName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommandInfo {\n");
            sb.Append("  CommandClass: ").Append(CommandClass).Append("\n");
            sb.Append("  CommandName: ").Append(CommandName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommandInfo);
        }

        /// <summary>
        /// Returns true if CommandInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CommandInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CommandClass == other.CommandClass ||
                    this.CommandClass != null &&
                    this.CommandClass.Equals(other.CommandClass)
                ) && 
                (
                    this.CommandName == other.CommandName ||
                    this.CommandName != null &&
                    this.CommandName.Equals(other.CommandName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CommandClass != null)
                    hash = hash * 59 + this.CommandClass.GetHashCode();
                if (this.CommandName != null)
                    hash = hash * 59 + this.CommandName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
