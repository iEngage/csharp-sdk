/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Multimedia
    /// </summary>
    [DataContract]
    public partial class Multimedia :  IEquatable<Multimedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Multimedia" /> class.
        /// </summary>
        /// <param name="MultimediaId">MultimediaId.</param>
        /// <param name="UsedFor">UsedFor.</param>
        /// <param name="MultimediaType">MultimediaType.</param>
        /// <param name="Text">Text.</param>
        /// <param name="Url">Url.</param>
        public Multimedia(long? MultimediaId = null, string UsedFor = null, string MultimediaType = null, string Text = null, string Url = null)
        {
            this.MultimediaId = MultimediaId;
            this.UsedFor = UsedFor;
            this.MultimediaType = MultimediaType;
            this.Text = Text;
            this.Url = Url;
        }
        
        /// <summary>
        /// Gets or Sets MultimediaId
        /// </summary>
        [DataMember(Name="multimediaId", EmitDefaultValue=false)]
        public long? MultimediaId { get; set; }
        /// <summary>
        /// Gets or Sets UsedFor
        /// </summary>
        [DataMember(Name="usedFor", EmitDefaultValue=false)]
        public string UsedFor { get; set; }
        /// <summary>
        /// Gets or Sets MultimediaType
        /// </summary>
        [DataMember(Name="multimediaType", EmitDefaultValue=false)]
        public string MultimediaType { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Multimedia {\n");
            sb.Append("  MultimediaId: ").Append(MultimediaId).Append("\n");
            sb.Append("  UsedFor: ").Append(UsedFor).Append("\n");
            sb.Append("  MultimediaType: ").Append(MultimediaType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Multimedia);
        }

        /// <summary>
        /// Returns true if Multimedia instances are equal
        /// </summary>
        /// <param name="other">Instance of Multimedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Multimedia other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MultimediaId == other.MultimediaId ||
                    this.MultimediaId != null &&
                    this.MultimediaId.Equals(other.MultimediaId)
                ) && 
                (
                    this.UsedFor == other.UsedFor ||
                    this.UsedFor != null &&
                    this.UsedFor.Equals(other.UsedFor)
                ) && 
                (
                    this.MultimediaType == other.MultimediaType ||
                    this.MultimediaType != null &&
                    this.MultimediaType.Equals(other.MultimediaType)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MultimediaId != null)
                    hash = hash * 59 + this.MultimediaId.GetHashCode();
                if (this.UsedFor != null)
                    hash = hash * 59 + this.UsedFor.GetHashCode();
                if (this.MultimediaType != null)
                    hash = hash * 59 + this.MultimediaType.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
