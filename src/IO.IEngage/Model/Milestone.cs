/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Milestone
    /// </summary>
    [DataContract]
    public partial class Milestone :  IEquatable<Milestone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Milestone" /> class.
        /// </summary>
        /// <param name="MilestoneId">MilestoneId.</param>
        /// <param name="MilestoneTitle">MilestoneTitle.</param>
        /// <param name="MilestoneDescription">MilestoneDescription.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="DueDate">DueDate.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="AssociationId">AssociationId.</param>
        /// <param name="NeverDue">NeverDue (default to false).</param>
        /// <param name="User">User.</param>
        public Milestone(long? MilestoneId = null, string MilestoneTitle = null, string MilestoneDescription = null, int? Status = null, int? Priority = null, DateTime? DueDate = null, DateTime? CreatedDate = null, long? AssociationId = null, bool? NeverDue = null, User User = null)
        {
            this.MilestoneId = MilestoneId;
            this.MilestoneTitle = MilestoneTitle;
            this.MilestoneDescription = MilestoneDescription;
            this.Status = Status;
            this.Priority = Priority;
            this.DueDate = DueDate;
            this.CreatedDate = CreatedDate;
            this.AssociationId = AssociationId;
            // use default value if no "NeverDue" provided
            if (NeverDue == null)
            {
                this.NeverDue = false;
            }
            else
            {
                this.NeverDue = NeverDue;
            }
            this.User = User;
        }
        
        /// <summary>
        /// Gets or Sets MilestoneId
        /// </summary>
        [DataMember(Name="milestoneId", EmitDefaultValue=false)]
        public long? MilestoneId { get; set; }
        /// <summary>
        /// Gets or Sets MilestoneTitle
        /// </summary>
        [DataMember(Name="milestoneTitle", EmitDefaultValue=false)]
        public string MilestoneTitle { get; set; }
        /// <summary>
        /// Gets or Sets MilestoneDescription
        /// </summary>
        [DataMember(Name="milestoneDescription", EmitDefaultValue=false)]
        public string MilestoneDescription { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets AssociationId
        /// </summary>
        [DataMember(Name="associationId", EmitDefaultValue=false)]
        public long? AssociationId { get; set; }
        /// <summary>
        /// Gets or Sets NeverDue
        /// </summary>
        [DataMember(Name="neverDue", EmitDefaultValue=false)]
        public bool? NeverDue { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Milestone {\n");
            sb.Append("  MilestoneId: ").Append(MilestoneId).Append("\n");
            sb.Append("  MilestoneTitle: ").Append(MilestoneTitle).Append("\n");
            sb.Append("  MilestoneDescription: ").Append(MilestoneDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  AssociationId: ").Append(AssociationId).Append("\n");
            sb.Append("  NeverDue: ").Append(NeverDue).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Milestone);
        }

        /// <summary>
        /// Returns true if Milestone instances are equal
        /// </summary>
        /// <param name="other">Instance of Milestone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Milestone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MilestoneId == other.MilestoneId ||
                    this.MilestoneId != null &&
                    this.MilestoneId.Equals(other.MilestoneId)
                ) && 
                (
                    this.MilestoneTitle == other.MilestoneTitle ||
                    this.MilestoneTitle != null &&
                    this.MilestoneTitle.Equals(other.MilestoneTitle)
                ) && 
                (
                    this.MilestoneDescription == other.MilestoneDescription ||
                    this.MilestoneDescription != null &&
                    this.MilestoneDescription.Equals(other.MilestoneDescription)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.DueDate == other.DueDate ||
                    this.DueDate != null &&
                    this.DueDate.Equals(other.DueDate)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.AssociationId == other.AssociationId ||
                    this.AssociationId != null &&
                    this.AssociationId.Equals(other.AssociationId)
                ) && 
                (
                    this.NeverDue == other.NeverDue ||
                    this.NeverDue != null &&
                    this.NeverDue.Equals(other.NeverDue)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MilestoneId != null)
                    hash = hash * 59 + this.MilestoneId.GetHashCode();
                if (this.MilestoneTitle != null)
                    hash = hash * 59 + this.MilestoneTitle.GetHashCode();
                if (this.MilestoneDescription != null)
                    hash = hash * 59 + this.MilestoneDescription.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.DueDate != null)
                    hash = hash * 59 + this.DueDate.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.AssociationId != null)
                    hash = hash * 59 + this.AssociationId.GetHashCode();
                if (this.NeverDue != null)
                    hash = hash * 59 + this.NeverDue.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
