/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Attachment
    /// </summary>
    [DataContract]
    public partial class Attachment :  IEquatable<Attachment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachment" /> class.
        /// </summary>
        /// <param name="Headers">Headers.</param>
        /// <param name="_Object">_Object.</param>
        /// <param name="ContentId">ContentId.</param>
        /// <param name="DataHandler">DataHandler.</param>
        /// <param name="ContentDisposition">ContentDisposition.</param>
        /// <param name="ContentType">ContentType.</param>
        public Attachment(Dictionary<string, List<string>> Headers = null, Object _Object = null, string ContentId = null, DataHandler DataHandler = null, ContentDisposition ContentDisposition = null, MediaType ContentType = null)
        {
            this.Headers = Headers;
            this._Object = _Object;
            this.ContentId = ContentId;
            this.DataHandler = DataHandler;
            this.ContentDisposition = ContentDisposition;
            this.ContentType = ContentType;
        }
        
        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> Headers { get; set; }
        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public Object _Object { get; set; }
        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId", EmitDefaultValue=false)]
        public string ContentId { get; set; }
        /// <summary>
        /// Gets or Sets DataHandler
        /// </summary>
        [DataMember(Name="dataHandler", EmitDefaultValue=false)]
        public DataHandler DataHandler { get; set; }
        /// <summary>
        /// Gets or Sets ContentDisposition
        /// </summary>
        [DataMember(Name="contentDisposition", EmitDefaultValue=false)]
        public ContentDisposition ContentDisposition { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public MediaType ContentType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  DataHandler: ").Append(DataHandler).Append("\n");
            sb.Append("  ContentDisposition: ").Append(ContentDisposition).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Attachment);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="other">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Headers == other.Headers ||
                    this.Headers != null &&
                    this.Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    this._Object == other._Object ||
                    this._Object != null &&
                    this._Object.Equals(other._Object)
                ) && 
                (
                    this.ContentId == other.ContentId ||
                    this.ContentId != null &&
                    this.ContentId.Equals(other.ContentId)
                ) && 
                (
                    this.DataHandler == other.DataHandler ||
                    this.DataHandler != null &&
                    this.DataHandler.Equals(other.DataHandler)
                ) && 
                (
                    this.ContentDisposition == other.ContentDisposition ||
                    this.ContentDisposition != null &&
                    this.ContentDisposition.Equals(other.ContentDisposition)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Headers != null)
                    hash = hash * 59 + this.Headers.GetHashCode();
                if (this._Object != null)
                    hash = hash * 59 + this._Object.GetHashCode();
                if (this.ContentId != null)
                    hash = hash * 59 + this.ContentId.GetHashCode();
                if (this.DataHandler != null)
                    hash = hash * 59 + this.DataHandler.GetHashCode();
                if (this.ContentDisposition != null)
                    hash = hash * 59 + this.ContentDisposition.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                return hash;
            }
        }
    }

}
