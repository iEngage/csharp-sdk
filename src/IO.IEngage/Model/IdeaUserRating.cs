/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// IdeaUserRating
    /// </summary>
    [DataContract]
    public partial class IdeaUserRating :  IEquatable<IdeaUserRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdeaUserRating" /> class.
        /// </summary>
        /// <param name="Param">Param.</param>
        /// <param name="Message">Message.</param>
        /// <param name="RatingScore">RatingScore.</param>
        public IdeaUserRating(string Param = null, string Message = null, double? RatingScore = null)
        {
            this.Param = Param;
            this.Message = Message;
            this.RatingScore = RatingScore;
        }
        
        /// <summary>
        /// Gets or Sets Param
        /// </summary>
        [DataMember(Name="param", EmitDefaultValue=false)]
        public string Param { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets RatingScore
        /// </summary>
        [DataMember(Name="ratingScore", EmitDefaultValue=false)]
        public double? RatingScore { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdeaUserRating {\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RatingScore: ").Append(RatingScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IdeaUserRating);
        }

        /// <summary>
        /// Returns true if IdeaUserRating instances are equal
        /// </summary>
        /// <param name="other">Instance of IdeaUserRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdeaUserRating other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Param == other.Param ||
                    this.Param != null &&
                    this.Param.Equals(other.Param)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.RatingScore == other.RatingScore ||
                    this.RatingScore != null &&
                    this.RatingScore.Equals(other.RatingScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Param != null)
                    hash = hash * 59 + this.Param.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.RatingScore != null)
                    hash = hash * 59 + this.RatingScore.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
