/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// UserDetail
    /// </summary>
    [DataContract]
    public partial class UserDetail :  IEquatable<UserDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDetail" /> class.
        /// </summary>
        /// <param name="User">User.</param>
        /// <param name="CurrentUserFollowing">CurrentUserFollowing (default to false).</param>
        /// <param name="CurrentUserFriend">CurrentUserFriend (default to false).</param>
        /// <param name="EquityScore">EquityScore.</param>
        /// <param name="FollowingCount">FollowingCount.</param>
        /// <param name="SubmissionCount">SubmissionCount.</param>
        /// <param name="FriendRequestStatus">FriendRequestStatus.</param>
        public UserDetail(User User = null, bool? CurrentUserFollowing = null, bool? CurrentUserFriend = null, long? EquityScore = null, long? FollowingCount = null, long? SubmissionCount = null, int? FriendRequestStatus = null)
        {
            this.User = User;
            // use default value if no "CurrentUserFollowing" provided
            if (CurrentUserFollowing == null)
            {
                this.CurrentUserFollowing = false;
            }
            else
            {
                this.CurrentUserFollowing = CurrentUserFollowing;
            }
            // use default value if no "CurrentUserFriend" provided
            if (CurrentUserFriend == null)
            {
                this.CurrentUserFriend = false;
            }
            else
            {
                this.CurrentUserFriend = CurrentUserFriend;
            }
            this.EquityScore = EquityScore;
            this.FollowingCount = FollowingCount;
            this.SubmissionCount = SubmissionCount;
            this.FriendRequestStatus = FriendRequestStatus;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// Gets or Sets CurrentUserFollowing
        /// </summary>
        [DataMember(Name="currentUserFollowing", EmitDefaultValue=false)]
        public bool? CurrentUserFollowing { get; set; }
        /// <summary>
        /// Gets or Sets CurrentUserFriend
        /// </summary>
        [DataMember(Name="currentUserFriend", EmitDefaultValue=false)]
        public bool? CurrentUserFriend { get; set; }
        /// <summary>
        /// Gets or Sets EquityScore
        /// </summary>
        [DataMember(Name="equityScore", EmitDefaultValue=false)]
        public long? EquityScore { get; set; }
        /// <summary>
        /// Gets or Sets FollowingCount
        /// </summary>
        [DataMember(Name="followingCount", EmitDefaultValue=false)]
        public long? FollowingCount { get; set; }
        /// <summary>
        /// Gets or Sets SubmissionCount
        /// </summary>
        [DataMember(Name="submissionCount", EmitDefaultValue=false)]
        public long? SubmissionCount { get; set; }
        /// <summary>
        /// Gets or Sets FriendRequestStatus
        /// </summary>
        [DataMember(Name="friendRequestStatus", EmitDefaultValue=false)]
        public int? FriendRequestStatus { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDetail {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CurrentUserFollowing: ").Append(CurrentUserFollowing).Append("\n");
            sb.Append("  CurrentUserFriend: ").Append(CurrentUserFriend).Append("\n");
            sb.Append("  EquityScore: ").Append(EquityScore).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  SubmissionCount: ").Append(SubmissionCount).Append("\n");
            sb.Append("  FriendRequestStatus: ").Append(FriendRequestStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserDetail);
        }

        /// <summary>
        /// Returns true if UserDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.CurrentUserFollowing == other.CurrentUserFollowing ||
                    this.CurrentUserFollowing != null &&
                    this.CurrentUserFollowing.Equals(other.CurrentUserFollowing)
                ) && 
                (
                    this.CurrentUserFriend == other.CurrentUserFriend ||
                    this.CurrentUserFriend != null &&
                    this.CurrentUserFriend.Equals(other.CurrentUserFriend)
                ) && 
                (
                    this.EquityScore == other.EquityScore ||
                    this.EquityScore != null &&
                    this.EquityScore.Equals(other.EquityScore)
                ) && 
                (
                    this.FollowingCount == other.FollowingCount ||
                    this.FollowingCount != null &&
                    this.FollowingCount.Equals(other.FollowingCount)
                ) && 
                (
                    this.SubmissionCount == other.SubmissionCount ||
                    this.SubmissionCount != null &&
                    this.SubmissionCount.Equals(other.SubmissionCount)
                ) && 
                (
                    this.FriendRequestStatus == other.FriendRequestStatus ||
                    this.FriendRequestStatus != null &&
                    this.FriendRequestStatus.Equals(other.FriendRequestStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.CurrentUserFollowing != null)
                    hash = hash * 59 + this.CurrentUserFollowing.GetHashCode();
                if (this.CurrentUserFriend != null)
                    hash = hash * 59 + this.CurrentUserFriend.GetHashCode();
                if (this.EquityScore != null)
                    hash = hash * 59 + this.EquityScore.GetHashCode();
                if (this.FollowingCount != null)
                    hash = hash * 59 + this.FollowingCount.GetHashCode();
                if (this.SubmissionCount != null)
                    hash = hash * 59 + this.SubmissionCount.GetHashCode();
                if (this.FriendRequestStatus != null)
                    hash = hash * 59 + this.FriendRequestStatus.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
