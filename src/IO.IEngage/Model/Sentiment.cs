/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Sentiment
    /// </summary>
    [DataContract]
    public partial class Sentiment :  IEquatable<Sentiment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sentiment" /> class.
        /// </summary>
        /// <param name="VeryNegative">VeryNegative.</param>
        /// <param name="Negative">Negative.</param>
        /// <param name="Neutral">Neutral.</param>
        /// <param name="Positive">Positive.</param>
        /// <param name="VeryPositive">VeryPositive.</param>
        public Sentiment(double? VeryNegative = null, double? Negative = null, double? Neutral = null, double? Positive = null, double? VeryPositive = null)
        {
            this.VeryNegative = VeryNegative;
            this.Negative = Negative;
            this.Neutral = Neutral;
            this.Positive = Positive;
            this.VeryPositive = VeryPositive;
        }
        
        /// <summary>
        /// Gets or Sets VeryNegative
        /// </summary>
        [DataMember(Name="veryNegative", EmitDefaultValue=false)]
        public double? VeryNegative { get; set; }
        /// <summary>
        /// Gets or Sets Negative
        /// </summary>
        [DataMember(Name="negative", EmitDefaultValue=false)]
        public double? Negative { get; set; }
        /// <summary>
        /// Gets or Sets Neutral
        /// </summary>
        [DataMember(Name="neutral", EmitDefaultValue=false)]
        public double? Neutral { get; set; }
        /// <summary>
        /// Gets or Sets Positive
        /// </summary>
        [DataMember(Name="positive", EmitDefaultValue=false)]
        public double? Positive { get; set; }
        /// <summary>
        /// Gets or Sets VeryPositive
        /// </summary>
        [DataMember(Name="veryPositive", EmitDefaultValue=false)]
        public double? VeryPositive { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sentiment {\n");
            sb.Append("  VeryNegative: ").Append(VeryNegative).Append("\n");
            sb.Append("  Negative: ").Append(Negative).Append("\n");
            sb.Append("  Neutral: ").Append(Neutral).Append("\n");
            sb.Append("  Positive: ").Append(Positive).Append("\n");
            sb.Append("  VeryPositive: ").Append(VeryPositive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Sentiment);
        }

        /// <summary>
        /// Returns true if Sentiment instances are equal
        /// </summary>
        /// <param name="other">Instance of Sentiment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sentiment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VeryNegative == other.VeryNegative ||
                    this.VeryNegative != null &&
                    this.VeryNegative.Equals(other.VeryNegative)
                ) && 
                (
                    this.Negative == other.Negative ||
                    this.Negative != null &&
                    this.Negative.Equals(other.Negative)
                ) && 
                (
                    this.Neutral == other.Neutral ||
                    this.Neutral != null &&
                    this.Neutral.Equals(other.Neutral)
                ) && 
                (
                    this.Positive == other.Positive ||
                    this.Positive != null &&
                    this.Positive.Equals(other.Positive)
                ) && 
                (
                    this.VeryPositive == other.VeryPositive ||
                    this.VeryPositive != null &&
                    this.VeryPositive.Equals(other.VeryPositive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VeryNegative != null)
                    hash = hash * 59 + this.VeryNegative.GetHashCode();
                if (this.Negative != null)
                    hash = hash * 59 + this.Negative.GetHashCode();
                if (this.Neutral != null)
                    hash = hash * 59 + this.Neutral.GetHashCode();
                if (this.Positive != null)
                    hash = hash * 59 + this.Positive.GetHashCode();
                if (this.VeryPositive != null)
                    hash = hash * 59 + this.VeryPositive.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
