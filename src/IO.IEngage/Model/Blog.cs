/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Blog
    /// </summary>
    [DataContract]
    public partial class Blog :  IEquatable<Blog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Blog" /> class.
        /// </summary>
        /// <param name="BlogId">BlogId.</param>
        /// <param name="User">User.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreationTime">CreationTime.</param>
        /// <param name="Sentiment">Sentiment.</param>
        /// <param name="SentimentDetails">SentimentDetails.</param>
        /// <param name="SentimentWeightage">SentimentWeightage.</param>
        /// <param name="Entity">Entity.</param>
        public Blog(long? BlogId = null, User User = null, string Title = null, string Description = null, DateTime? CreationTime = null, string Sentiment = null, Sentiment SentimentDetails = null, double? SentimentWeightage = null, List<NER> Entity = null)
        {
            this.BlogId = BlogId;
            this.User = User;
            this.Title = Title;
            this.Description = Description;
            this.CreationTime = CreationTime;
            this.Sentiment = Sentiment;
            this.SentimentDetails = SentimentDetails;
            this.SentimentWeightage = SentimentWeightage;
            this.Entity = Entity;
        }
        
        /// <summary>
        /// Gets or Sets BlogId
        /// </summary>
        [DataMember(Name="blogId", EmitDefaultValue=false)]
        public long? BlogId { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }
        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name="sentiment", EmitDefaultValue=false)]
        public string Sentiment { get; set; }
        /// <summary>
        /// Gets or Sets SentimentDetails
        /// </summary>
        [DataMember(Name="sentimentDetails", EmitDefaultValue=false)]
        public Sentiment SentimentDetails { get; set; }
        /// <summary>
        /// Gets or Sets SentimentWeightage
        /// </summary>
        [DataMember(Name="sentimentWeightage", EmitDefaultValue=false)]
        public double? SentimentWeightage { get; set; }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public List<NER> Entity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Blog {\n");
            sb.Append("  BlogId: ").Append(BlogId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  SentimentDetails: ").Append(SentimentDetails).Append("\n");
            sb.Append("  SentimentWeightage: ").Append(SentimentWeightage).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Blog);
        }

        /// <summary>
        /// Returns true if Blog instances are equal
        /// </summary>
        /// <param name="other">Instance of Blog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Blog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BlogId == other.BlogId ||
                    this.BlogId != null &&
                    this.BlogId.Equals(other.BlogId)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreationTime == other.CreationTime ||
                    this.CreationTime != null &&
                    this.CreationTime.Equals(other.CreationTime)
                ) && 
                (
                    this.Sentiment == other.Sentiment ||
                    this.Sentiment != null &&
                    this.Sentiment.Equals(other.Sentiment)
                ) && 
                (
                    this.SentimentDetails == other.SentimentDetails ||
                    this.SentimentDetails != null &&
                    this.SentimentDetails.Equals(other.SentimentDetails)
                ) && 
                (
                    this.SentimentWeightage == other.SentimentWeightage ||
                    this.SentimentWeightage != null &&
                    this.SentimentWeightage.Equals(other.SentimentWeightage)
                ) && 
                (
                    this.Entity == other.Entity ||
                    this.Entity != null &&
                    this.Entity.SequenceEqual(other.Entity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BlogId != null)
                    hash = hash * 59 + this.BlogId.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CreationTime != null)
                    hash = hash * 59 + this.CreationTime.GetHashCode();
                if (this.Sentiment != null)
                    hash = hash * 59 + this.Sentiment.GetHashCode();
                if (this.SentimentDetails != null)
                    hash = hash * 59 + this.SentimentDetails.GetHashCode();
                if (this.SentimentWeightage != null)
                    hash = hash * 59 + this.SentimentWeightage.GetHashCode();
                if (this.Entity != null)
                    hash = hash * 59 + this.Entity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
