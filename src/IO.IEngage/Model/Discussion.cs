/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.IEngage.Model
{
    /// <summary>
    /// Discussion
    /// </summary>
    [DataContract]
    public partial class Discussion :  IEquatable<Discussion>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Discussion" /> class.
        /// </summary>
        /// <param name="DiscussionId">DiscussionId.</param>
        /// <param name="User">User.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CreationTime">CreationTime.</param>
        /// <param name="Sentiment">Sentiment.</param>
        /// <param name="SentimentDetails">SentimentDetails.</param>
        /// <param name="SentimentWeightage">SentimentWeightage.</param>
        /// <param name="Entity">Entity.</param>
        /// <param name="Association">Association.</param>
        public Discussion(long? DiscussionId = null, User User = null, string Subject = null, string Description = null, DateTime? CreationTime = null, string Sentiment = null, Sentiment SentimentDetails = null, double? SentimentWeightage = null, List<NER> Entity = null, long? Association = null)
        {
            this.DiscussionId = DiscussionId;
            this.User = User;
            this.Subject = Subject;
            this.Description = Description;
            this.CreationTime = CreationTime;
            this.Sentiment = Sentiment;
            this.SentimentDetails = SentimentDetails;
            this.SentimentWeightage = SentimentWeightage;
            this.Entity = Entity;
            this.Association = Association;
        }
        
        /// <summary>
        /// Gets or Sets DiscussionId
        /// </summary>
        [DataMember(Name="discussionId", EmitDefaultValue=false)]
        public long? DiscussionId { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }
        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name="sentiment", EmitDefaultValue=false)]
        public string Sentiment { get; set; }
        /// <summary>
        /// Gets or Sets SentimentDetails
        /// </summary>
        [DataMember(Name="sentimentDetails", EmitDefaultValue=false)]
        public Sentiment SentimentDetails { get; set; }
        /// <summary>
        /// Gets or Sets SentimentWeightage
        /// </summary>
        [DataMember(Name="sentimentWeightage", EmitDefaultValue=false)]
        public double? SentimentWeightage { get; set; }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public List<NER> Entity { get; set; }
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public long? Association { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Discussion {\n");
            sb.Append("  DiscussionId: ").Append(DiscussionId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  SentimentDetails: ").Append(SentimentDetails).Append("\n");
            sb.Append("  SentimentWeightage: ").Append(SentimentWeightage).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Association: ").Append(Association).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Discussion);
        }

        /// <summary>
        /// Returns true if Discussion instances are equal
        /// </summary>
        /// <param name="other">Instance of Discussion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Discussion other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DiscussionId == other.DiscussionId ||
                    this.DiscussionId != null &&
                    this.DiscussionId.Equals(other.DiscussionId)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CreationTime == other.CreationTime ||
                    this.CreationTime != null &&
                    this.CreationTime.Equals(other.CreationTime)
                ) && 
                (
                    this.Sentiment == other.Sentiment ||
                    this.Sentiment != null &&
                    this.Sentiment.Equals(other.Sentiment)
                ) && 
                (
                    this.SentimentDetails == other.SentimentDetails ||
                    this.SentimentDetails != null &&
                    this.SentimentDetails.Equals(other.SentimentDetails)
                ) && 
                (
                    this.SentimentWeightage == other.SentimentWeightage ||
                    this.SentimentWeightage != null &&
                    this.SentimentWeightage.Equals(other.SentimentWeightage)
                ) && 
                (
                    this.Entity == other.Entity ||
                    this.Entity != null &&
                    this.Entity.SequenceEqual(other.Entity)
                ) && 
                (
                    this.Association == other.Association ||
                    this.Association != null &&
                    this.Association.Equals(other.Association)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DiscussionId != null)
                    hash = hash * 59 + this.DiscussionId.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CreationTime != null)
                    hash = hash * 59 + this.CreationTime.GetHashCode();
                if (this.Sentiment != null)
                    hash = hash * 59 + this.Sentiment.GetHashCode();
                if (this.SentimentDetails != null)
                    hash = hash * 59 + this.SentimentDetails.GetHashCode();
                if (this.SentimentWeightage != null)
                    hash = hash * 59 + this.SentimentWeightage.GetHashCode();
                if (this.Entity != null)
                    hash = hash * 59 + this.Entity.GetHashCode();
                if (this.Association != null)
                    hash = hash * 59 + this.Association.GetHashCode();
                return hash;
            }
        }
    }

}
