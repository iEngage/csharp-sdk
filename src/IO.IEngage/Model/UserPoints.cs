/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.IEngage.Model
{
    /// <summary>
    /// UserPoints
    /// </summary>
    [DataContract]
    public partial class UserPoints :  IEquatable<UserPoints>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPoints" /> class.
        /// </summary>
        /// <param name="User">User.</param>
        /// <param name="ContributionPoints">ContributionPoints.</param>
        /// <param name="ParticipationPoints">ParticipationPoints.</param>
        /// <param name="TotalPoints">TotalPoints.</param>
        public UserPoints(User User = null, long? ContributionPoints = null, long? ParticipationPoints = null, long? TotalPoints = null)
        {
            this.User = User;
            this.ContributionPoints = ContributionPoints;
            this.ParticipationPoints = ParticipationPoints;
            this.TotalPoints = TotalPoints;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// Gets or Sets ContributionPoints
        /// </summary>
        [DataMember(Name="contributionPoints", EmitDefaultValue=false)]
        public long? ContributionPoints { get; set; }
        /// <summary>
        /// Gets or Sets ParticipationPoints
        /// </summary>
        [DataMember(Name="participationPoints", EmitDefaultValue=false)]
        public long? ParticipationPoints { get; set; }
        /// <summary>
        /// Gets or Sets TotalPoints
        /// </summary>
        [DataMember(Name="totalPoints", EmitDefaultValue=false)]
        public long? TotalPoints { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPoints {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ContributionPoints: ").Append(ContributionPoints).Append("\n");
            sb.Append("  ParticipationPoints: ").Append(ParticipationPoints).Append("\n");
            sb.Append("  TotalPoints: ").Append(TotalPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserPoints);
        }

        /// <summary>
        /// Returns true if UserPoints instances are equal
        /// </summary>
        /// <param name="other">Instance of UserPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPoints other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.ContributionPoints == other.ContributionPoints ||
                    this.ContributionPoints != null &&
                    this.ContributionPoints.Equals(other.ContributionPoints)
                ) && 
                (
                    this.ParticipationPoints == other.ParticipationPoints ||
                    this.ParticipationPoints != null &&
                    this.ParticipationPoints.Equals(other.ParticipationPoints)
                ) && 
                (
                    this.TotalPoints == other.TotalPoints ||
                    this.TotalPoints != null &&
                    this.TotalPoints.Equals(other.TotalPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.ContributionPoints != null)
                    hash = hash * 59 + this.ContributionPoints.GetHashCode();
                if (this.ParticipationPoints != null)
                    hash = hash * 59 + this.ParticipationPoints.GetHashCode();
                if (this.TotalPoints != null)
                    hash = hash * 59 + this.TotalPoints.GetHashCode();
                return hash;
            }
        }
    }

}
