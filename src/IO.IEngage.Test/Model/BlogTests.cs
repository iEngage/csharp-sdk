/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.IEngage.Api;
using IO.IEngage.Model;
using IO.IEngage.Client;
using System.Reflection;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing Blog
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class BlogTests
    {
        // TODO uncomment below to declare an instance variable for Blog
        //private Blog instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Blog
            //instance = new Blog();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Blog
        /// </summary>
        [Test]
        public void BlogInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Blog
            //Assert.IsInstanceOfType<Blog> (instance, "variable 'instance' is a Blog");
        }

        /// <summary>
        /// Test the property 'BlogId'
        /// </summary>
        [Test]
        public void BlogIdTest()
        {
            // TODO unit test for the property 'BlogId'
        }
        /// <summary>
        /// Test the property 'User'
        /// </summary>
        [Test]
        public void UserTest()
        {
            // TODO unit test for the property 'User'
        }
        /// <summary>
        /// Test the property 'Title'
        /// </summary>
        [Test]
        public void TitleTest()
        {
            // TODO unit test for the property 'Title'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Test]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'CreationTime'
        /// </summary>
        [Test]
        public void CreationTimeTest()
        {
            // TODO unit test for the property 'CreationTime'
        }
        /// <summary>
        /// Test the property 'Sentiment'
        /// </summary>
        [Test]
        public void SentimentTest()
        {
            // TODO unit test for the property 'Sentiment'
        }
        /// <summary>
        /// Test the property 'SentimentDetails'
        /// </summary>
        [Test]
        public void SentimentDetailsTest()
        {
            // TODO unit test for the property 'SentimentDetails'
        }
        /// <summary>
        /// Test the property 'SentimentWeightage'
        /// </summary>
        [Test]
        public void SentimentWeightageTest()
        {
            // TODO unit test for the property 'SentimentWeightage'
        }
        /// <summary>
        /// Test the property 'Entity'
        /// </summary>
        [Test]
        public void EntityTest()
        {
            // TODO unit test for the property 'Entity'
        }

    }

}
