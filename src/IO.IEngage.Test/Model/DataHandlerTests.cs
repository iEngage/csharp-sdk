/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.IEngage.Api;
using IO.IEngage.Model;
using IO.IEngage.Client;
using System.Reflection;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing DataHandler
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class DataHandlerTests
    {
        // TODO uncomment below to declare an instance variable for DataHandler
        //private DataHandler instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of DataHandler
            //instance = new DataHandler();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataHandler
        /// </summary>
        [Test]
        public void DataHandlerInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" DataHandler
            //Assert.IsInstanceOfType<DataHandler> (instance, "variable 'instance' is a DataHandler");
        }

        /// <summary>
        /// Test the property 'DataSource'
        /// </summary>
        [Test]
        public void DataSourceTest()
        {
            // TODO unit test for the property 'DataSource'
        }
        /// <summary>
        /// Test the property 'AllCommands'
        /// </summary>
        [Test]
        public void AllCommandsTest()
        {
            // TODO unit test for the property 'AllCommands'
        }
        /// <summary>
        /// Test the property 'PreferredCommands'
        /// </summary>
        [Test]
        public void PreferredCommandsTest()
        {
            // TODO unit test for the property 'PreferredCommands'
        }
        /// <summary>
        /// Test the property 'TransferDataFlavors'
        /// </summary>
        [Test]
        public void TransferDataFlavorsTest()
        {
            // TODO unit test for the property 'TransferDataFlavors'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'InputStream'
        /// </summary>
        [Test]
        public void InputStreamTest()
        {
            // TODO unit test for the property 'InputStream'
        }
        /// <summary>
        /// Test the property 'Content'
        /// </summary>
        [Test]
        public void ContentTest()
        {
            // TODO unit test for the property 'Content'
        }
        /// <summary>
        /// Test the property 'ContentType'
        /// </summary>
        [Test]
        public void ContentTypeTest()
        {
            // TODO unit test for the property 'ContentType'
        }
        /// <summary>
        /// Test the property 'OutputStream'
        /// </summary>
        [Test]
        public void OutputStreamTest()
        {
            // TODO unit test for the property 'OutputStream'
        }

    }

}
