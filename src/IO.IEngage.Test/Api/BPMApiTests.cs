/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing BPMApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BPMApiTests
    {
        private BPMApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Configuration.Default.AccessToken = null;
            instance = new BPMApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BPMApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BPMApi
            //Assert.IsInstanceOfType(typeof(BPMApi), instance, "instance is a BPMApi");
        }

        
        /// <summary>
        /// Test AssignWFTask
        /// </summary>
        [Test]
        public void AssignWFTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? assigneeUserId = null;
            long? taskId = null;
            string requesterId = null;
            string clientToken = null;
            string comment = null;
            long? dueDate = null;
            string fields = null;
            string accessToken = null;
            var response = instance.AssignWFTask(assigneeUserId, taskId, requesterId, clientToken, comment, dueDate, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTask> (response, "response is VerveResponseWFTask");
        }
        
        /// <summary>
        /// Test CompleteWFTask
        /// </summary>
        [Test]
        public void CompleteWFTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            long? taskId = null;
            string requesterId = null;
            string clientToken = null;
            string transition = null;
            string comment = null;
            string fields = null;
            string accessToken = null;
            var response = instance.CompleteWFTask(userId, taskId, requesterId, clientToken, transition, comment, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTask> (response, "response is VerveResponseWFTask");
        }
        
        /// <summary>
        /// Test GetBPMTasks
        /// </summary>
        [Test]
        public void GetBPMTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            long? taskId = null;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetBPMTasks(userId, taskId, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTask> (response, "response is VerveResponseWFTask");
        }

        /// <summary>
        /// Test GetSearchTask
        /// </summary>
        [Test]
        public void GetSearchTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            string searchString = null;
            bool? completed = false;
            bool? searchByUserRoles = false;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string type = null;
            long? organizationId = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetSearchTask(userId, searchString, completed, searchByUserRoles, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTaskList> (response, "response is VerveResponseWFTaskList");
        }
        
        /// <summary>
        /// Test GetTasksByEntity
        /// </summary>
        [Test]
        public void GetTasksByEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            long? entityId = null;
            bool? completed = null;
            bool? searchByUserRoles = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetTasksByEntity(userId, entityId, completed, searchByUserRoles, start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTaskList> (response, "response is VerveResponseWFTaskList");
        }
        
        /// <summary>
        /// Test GetUserBPMTasks
        /// </summary>
        [Test]
        public void GetUserBPMTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            bool? completed = false;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string type = null;
            long? organizationId = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetUserBPMTasks(userId, completed, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTaskList> (response, "response is VerveResponseWFTaskList");
        }
        
        /// <summary>
        /// Test GetUserRolesBPMTasks
        /// </summary>
        [Test]
        public void GetUserRolesBPMTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            bool? completed = false;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string type = null;
            long? organizationId = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetUserRolesBPMTasks(userId, completed, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseWFTaskList> (response, "response is VerveResponseWFTaskList");
        }
        
    }

}
