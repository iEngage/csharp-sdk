/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupApiTests
    {
        private GroupApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Configuration.Default.AccessToken = null;
            instance = new GroupApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupApi
            //Assert.IsInstanceOfType(typeof(GroupApi), instance, "instance is a GroupApi");
        }

        
        /// <summary>
        /// Test CreateGroup
        /// </summary>
        [Test]
        public void CreateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string requesterId = null;
            string clientToken = null;
            Group body = null;
            
			string accessToken = null;
            var response = instance.CreateGroup(requesterId, clientToken, body, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroup> (response, "response is VerveResponseGroup");
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.DeleteGroup(groupId, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroup> (response, "response is VerveResponseGroup");
        }
        
        /// <summary>
        /// Test FollowGroup
        /// </summary>
        [Test]
        public void FollowGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.FollowGroup(groupId, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroup> (response, "response is VerveResponseGroup");
        }
        
        /// <summary>
        /// Test GetGroupFollowers
        /// </summary>
        [Test]
        public void GetGroupFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetGroupFollowers(groupId, start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseUserList> (response, "response is VerveResponseUserList");
        }
        
        /// <summary>
        /// Test GetGroupIdeas
        /// </summary>
        [Test]
        public void GetGroupIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetGroupIdeas(groupId, start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Test]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetGroups(start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroupList> (response, "response is VerveResponseGroupList");
        }
        
        /// <summary>
        /// Test GetRecommendationGroup
        /// </summary>
        [Test]
        public void GetRecommendationGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetRecommendationGroup(start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroupList> (response, "response is VerveResponseGroupList");
        }
        
        /// <summary>
        /// Test GetUserFollowingGroups
        /// </summary>
        [Test]
        public void GetUserFollowingGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.GetUserFollowingGroups(userId, start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroupList> (response, "response is VerveResponseGroupList");
        }
        
        /// <summary>
        /// Test SearchGroups
        /// </summary>
        [Test]
        public void SearchGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string query = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.SearchGroups(query, start, end, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroupList> (response, "response is VerveResponseGroupList");
        }
        
        /// <summary>
        /// Test UnfollowGroup
        /// </summary>
        [Test]
        public void UnfollowGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.UnfollowGroup(groupId, requesterId, clientToken, fields, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseGroup> (response, "response is VerveResponseGroup");
        }
        
        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Test]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? groupId = null;
            string title = null;
            string description = null;
            string requesterId = null;
            string clientToken = null;
            string fields = null;
            string accessToken = null;
            var response = instance.UpdateGroup(groupId, title, description, requesterId, clientToken, fields, accessToken);
            Assert.IsInstanceOf<VerveResponseGroup> (response, "response is VerveResponseGroup");
        }
        
    }

}
