/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing RewardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RewardsApiTests
    {
        private RewardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Configuration.Default.AccessToken = null;
            instance = new RewardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RewardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RewardsApi
            //Assert.IsInstanceOfType(typeof(RewardsApi), instance, "instance is a RewardsApi");
        }

        
        /// <summary>
        /// Test GetTopFriends
        /// </summary>
        [Test]
        public void GetTopFriendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string accessToken = null;
            var response = instance.GetTopFriends(userId, start, end, requesterId, clientToken, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseUserPointsList> (response, "response is VerveResponseUserPointsList");
        }
        
        /// <summary>
        /// Test GetTopUsers
        /// </summary>
        [Test]
        public void GetTopUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string accessToken = null;
            var response = instance.GetTopUsers(start, end, requesterId, clientToken, accessToken);
            List<UserPoints> list = response.List;
            for(int i = 0; i < list.Count(); i++)
            {
                Console.Write(list.ElementAt(i));
            }
            Assert.IsInstanceOf<VerveResponseUserPointsList> (response, "response is VerveResponseUserPointsList");
        }
        
        /// <summary>
        /// Test GetUserPoints
        /// </summary>
        [Test]
        public void GetUserPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? userId = null;
            string requesterId = null;
            string clientToken = null;
            string accessToken = null;
            var response = instance.GetUserPoints(userId, requesterId, clientToken, accessToken);
            Console.Write(response.ToString());
            
            Assert.IsInstanceOf<VerveResponseUserPoints> (response, "response is VerveResponseUserPoints");
        }
        
    }

}
