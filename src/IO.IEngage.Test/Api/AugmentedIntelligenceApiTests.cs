/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing AugmentedIntelligenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AugmentedIntelligenceApiTests
    {
        private AugmentedIntelligenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AugmentedIntelligenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AugmentedIntelligenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AugmentedIntelligenceApi
            //Assert.IsInstanceOfType(typeof(AugmentedIntelligenceApi), instance, "instance is a AugmentedIntelligenceApi");
        }

        
        /// <summary>
        /// Test GetInteraction
        /// </summary>
        [Test]
        public void GetInteractionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetInteraction(text, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseFlowFinder> (response, "response is VerveResponseFlowFinder");
        }
        
        /// <summary>
        /// Test GetPopularTag
        /// </summary>
        [Test]
        public void GetPopularTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startTime = null;
            //long? endTime = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string interactionType = null;
            //string sentimentType = null;
            //string additionalInformation = null;
            //string association = null;
            //long? categoryId = null;
            //var response = instance.GetPopularTag(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId);
            //Assert.IsInstanceOf<VerveResponseTagList> (response, "response is VerveResponseTagList");
        }
        
        /// <summary>
        /// Test GetSentiment
        /// </summary>
        [Test]
        public void GetSentimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startTime = null;
            //long? endTime = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string interactionType = null;
            //string additionalInformation = null;
            //string association = null;
            //long? categoryId = null;
            //var response = instance.GetSentiment(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, association, categoryId);
            //Assert.IsInstanceOf<VerveResponseSentimentAnalytics> (response, "response is VerveResponseSentimentAnalytics");
        }
        
        /// <summary>
        /// Test GetTagEntitySentiments
        /// </summary>
        [Test]
        public void GetTagEntitySentimentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagName = null;
            //long? startTime = null;
            //long? endTime = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string sentimentType = null;
            //string additionalInformation = null;
            //string association = null;
            //string interactionType = null;
            //long? categoryId = null;
            //var response = instance.GetTagEntitySentiments(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId);
            //Assert.IsInstanceOf<VerveResponseEntitySentimentList> (response, "response is VerveResponseEntitySentimentList");
        }
        
    }

}
