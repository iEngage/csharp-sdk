/* 
 * iEngage 2.0 API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
//using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing AugmentedIntelligenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AugmentedIntelligenceApiTests
    {
        private AugmentedIntelligenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Configuration.Default.AccessToken = null;
            instance = new AugmentedIntelligenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AugmentedIntelligenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AugmentedIntelligenceApi
            //Assert.IsInstanceOfType(typeof(AugmentedIntelligenceApi), instance, "instance is a AugmentedIntelligenceApi");
        }

        
        /// <summary>
        /// Test Classify
        /// </summary>
        [Test]
        public void ClassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string text = null;
            long? id = null;
            string clientToken = null;
            var response = instance.Classify(text, id, clientToken);
            Assert.IsInstanceOf<VerveResponseTextClassificationList>(response, "response is VerveResponseTextClassificationList");
            
            
        }

        /// <summary>
        /// Test GetEntities
        /// </summary>
        [Test]
        public void GetEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? id = null;
            string text = null;
            string clientToken = null;
            var response = instance.GetEntities(id, text, clientToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseEntitiesClassifiedList> (response, "response is VerveResponseEntitiesClassifiedList");
        }
        
        /// <summary>
        /// Test GetInteractionType
        /// </summary>
        [Test]
        public void GetInteractionTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string text = null;
            string clientToken = null;
            var response = instance.GetInteractionType(text, clientToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseFlowFinder> (response, "response is VerveResponseFlowFinder");
        }
        
        /// <summary>
        /// Test GetKeywords
        /// </summary>
        [Test]
        public void GetKeywordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string text = null;
            string clientToken = null;
            var response = instance.GetKeywords(text, clientToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseKeyword> (response, "response is VerveResponseKeyword");
        }
        
        /// <summary>
        /// Test GetPopularTag
        /// </summary>
        [Test]
        public void GetPopularTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? startTime = null;
            long? endTime = null;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string interactionType = null;
            string sentimentType = null;
            string additionalInformation = null;
            string association = null;
            long? categoryId = null;
            string accessToken = null;
            var response = instance.GetPopularTag(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseTagList> (response, "response is VerveResponseTagList");
        }
        
        /// <summary>
        /// Test GetSentiment
        /// </summary>
        [Test]
        public void GetSentimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? startTime = 0;
            long? endTime = 10;
            string requesterId = null;
            string clientToken = null;
            string interactionType = null;
            string additionalInformation = null;
            string association = null;
            long? categoryId = null;
            string accessToken = null;
            var response = instance.GetSentiment(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseSentimentAnalytics> (response, "response is VerveResponseSentimentAnalytics");
        }
        
        /// <summary>
        /// Test GetTagEntitySentiments
        /// </summary>
        [Test]
        public void GetTagEntitySentimentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string tagName = null;
            long? startTime = 0;
            long? endTime = 10;
            int? start = 0;
            int? end = 10;
            string requesterId = null;
            string clientToken = null;
            string sentimentType = null;
            string additionalInformation = null;
            string association = null;
            string interactionType = null;
            long? categoryId = null;
            string accessToken = null;
            var response = instance.GetTagEntitySentiments(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseEntitySentimentList> (response, "response is VerveResponseEntitySentimentList");
        }
        
        /// <summary>
        /// Test Sentiment
        /// </summary>
        [Test]
        public void SentimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string text = null;
            string clientToken = null;
            var response = instance.Sentiment(text, clientToken);
            Console.Write(response.ToString());
            Assert.IsInstanceOf<VerveResponseSentiment> (response, "response is VerveResponseSentiment");
        }
        
    }

}
