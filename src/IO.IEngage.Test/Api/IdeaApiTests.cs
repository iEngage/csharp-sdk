/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing IdeaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IdeaApiTests
    {
        private IdeaApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IdeaApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IdeaApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IdeaApi
            //Assert.IsInstanceOfType(typeof(IdeaApi), instance, "instance is a IdeaApi");
        }

        
        /// <summary>
        /// Test DeleteComment
        /// </summary>
        [Test]
        public void DeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? commentId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.DeleteComment(commentId, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseComment> (response, "response is VerveResponseComment");
        }
        
        /// <summary>
        /// Test DeleteIdea
        /// </summary>
        [Test]
        public void DeleteIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.DeleteIdea(ideaId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test FollowIdea
        /// </summary>
        [Test]
        public void FollowIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.FollowIdea(ideaId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test GetAllIdeas
        /// </summary>
        [Test]
        public void GetAllIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetAllIdeas(start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetFollowingIdeas
        /// </summary>
        [Test]
        public void GetFollowingIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetFollowingIdeas(userId, start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetGroupIdeas
        /// </summary>
        [Test]
        public void GetGroupIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //long? groupId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetGroupIdeas(userId, groupId, start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetIdea
        /// </summary>
        [Test]
        public void GetIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetIdea(ideaId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test GetIdeaComment
        /// </summary>
        [Test]
        public void GetIdeaCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetIdeaComment(ideaId, start, end, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseCommentList> (response, "response is VerveResponseCommentList");
        }
        
        /// <summary>
        /// Test GetIdeaFollowers
        /// </summary>
        [Test]
        public void GetIdeaFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetIdeaFollowers(ideaId, start, end, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseUserList> (response, "response is VerveResponseUserList");
        }
        
        /// <summary>
        /// Test GetIdeaRatingParameters
        /// </summary>
        [Test]
        public void GetIdeaRatingParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string ideaStage = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetIdeaRatingParameters(userId, ideaStage, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseString> (response, "response is VerveResponseString");
        }
        
        /// <summary>
        /// Test GetIdeaRatings
        /// </summary>
        [Test]
        public void GetIdeaRatingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //long? ideaId = null;
            //string ideaStage = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetIdeaRatings(userId, ideaId, ideaStage, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseIdeaUserRatingList> (response, "response is VerveResponseIdeaUserRatingList");
        }
        
        /// <summary>
        /// Test GetRecommendIdeas
        /// </summary>
        [Test]
        public void GetRecommendIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetRecommendIdeas(start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetTopIdeas
        /// </summary>
        [Test]
        public void GetTopIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetTopIdeas(start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetUserIdeas
        /// </summary>
        [Test]
        public void GetUserIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUserIdeas(userId, start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test GetUserRateIdeas
        /// </summary>
        [Test]
        public void GetUserRateIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUserRateIdeas(userId, start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test RateIdea
        /// </summary>
        [Test]
        public void RateIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //long? ideaId = null;
            //string ideaStage = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.RateIdea(userId, ideaId, ideaStage, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test RateIdea_0
        /// </summary>
        [Test]
        public void RateIdea_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //long? ideaId = null;
            //string ideaStage = null;
            //string _parameter = null;
            //double? rating = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.RateIdea_0(userId, ideaId, ideaStage, _parameter, rating, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test SearchIdeas
        /// </summary>
        [Test]
        public void SearchIdeasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string searchText = null;
            //int? start = null;
            //int? end = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.SearchIdeas(searchText, start, end, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdeaList> (response, "response is VerveResponseIdeaList");
        }
        
        /// <summary>
        /// Test ShareFormIdea
        /// </summary>
        [Test]
        public void ShareFormIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string body2 = null;
            //long? body3 = null;
            //List<Attachment> body4 = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.ShareFormIdea(body, body2, body3, body4, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test ShareIdea
        /// </summary>
        [Test]
        public void ShareIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string title = null;
            //string description = null;
            //long? groupId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.ShareIdea(title, description, groupId, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test ShareIdeaComment
        /// </summary>
        [Test]
        public void ShareIdeaCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string commentText = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.ShareIdeaComment(ideaId, commentText, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseComment> (response, "response is VerveResponseComment");
        }
        
        /// <summary>
        /// Test UnfollowIdea
        /// </summary>
        [Test]
        public void UnfollowIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.UnfollowIdea(ideaId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
        /// <summary>
        /// Test UpdateCommet
        /// </summary>
        [Test]
        public void UpdateCommetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? commentId = null;
            //string commentText = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.UpdateCommet(commentId, commentText, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseComment> (response, "response is VerveResponseComment");
        }
        
        /// <summary>
        /// Test UpdateIdea
        /// </summary>
        [Test]
        public void UpdateIdeaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? ideaId = null;
            //string ideaTitle = null;
            //string ideaDescription = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.UpdateIdea(ideaId, ideaTitle, ideaDescription, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseIdea> (response, "response is VerveResponseIdea");
        }
        
    }

}
