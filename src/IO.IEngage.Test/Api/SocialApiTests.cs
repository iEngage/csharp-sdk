/* 
 * Stakeholder engagement API
 *
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.IEngage.Client;
using IO.IEngage.Api;
using IO.IEngage.Model;

namespace IO.IEngage.Test
{
    /// <summary>
    ///  Class for testing SocialApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SocialApiTests
    {
        private SocialApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SocialApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SocialApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SocialApi
            //Assert.IsInstanceOfType(typeof(SocialApi), instance, "instance is a SocialApi");
        }

        
        /// <summary>
        /// Test AddFriend
        /// </summary>
        [Test]
        public void AddFriendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id1 = null;
            //string id2 = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.AddFriend(id1, id2, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test ConfirmFriendRequest
        /// </summary>
        [Test]
        public void ConfirmFriendRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? status = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.ConfirmFriendRequest(userId, status, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test Follow
        /// </summary>
        [Test]
        public void FollowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string follower = null;
            //string followee = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.Follow(follower, followee, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUser(userId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseUser> (response, "response is VerveResponseUser");
        }
        
        /// <summary>
        /// Test GetUserDetail
        /// </summary>
        [Test]
        public void GetUserDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.GetUserDetail(userId, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseUserDetail> (response, "response is VerveResponseUserDetail");
        }
        
        /// <summary>
        /// Test GetUserFollowers
        /// </summary>
        [Test]
        public void GetUserFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUserFollowers(userId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseUserList> (response, "response is VerveResponseUserList");
        }
        
        /// <summary>
        /// Test GetUserFollowing
        /// </summary>
        [Test]
        public void GetUserFollowingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUserFollowing(userId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseUserList> (response, "response is VerveResponseUserList");
        }
        
        /// <summary>
        /// Test GetUserFriends
        /// </summary>
        [Test]
        public void GetUserFriendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //string fields = null;
            //var response = instance.GetUserFriends(userId, loggedInUserId, accessToken, clientToken, fields);
            //Assert.IsInstanceOf<VerveResponseUserList> (response, "response is VerveResponseUserList");
        }
        
        /// <summary>
        /// Test RemoveFriend
        /// </summary>
        [Test]
        public void RemoveFriendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id1 = null;
            //string id2 = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.RemoveFriend(id1, id2, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RequestFriend
        /// </summary>
        [Test]
        public void RequestFriendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.RequestFriend(userId, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RequestsForMe
        /// </summary>
        [Test]
        public void RequestsForMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.RequestsForMe(loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<VerveResponseRequestForMeList> (response, "response is VerveResponseRequestForMeList");
        }
        
        /// <summary>
        /// Test Unfollow
        /// </summary>
        [Test]
        public void UnfollowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string unfollower = null;
            //string unfollowee = null;
            //string loggedInUserId = null;
            //string accessToken = null;
            //string clientToken = null;
            //var response = instance.Unfollow(unfollower, unfollowee, loggedInUserId, accessToken, clientToken);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
